"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cosmos = void 0;
const pb_1 = __importStar(require("google-protobuf"));
var cosmos;
(function (cosmos) {
    var base;
    (function (base) {
        var snapshots;
        (function (snapshots) {
            var v1beta1;
            (function (v1beta1) {
                class Snapshot extends pb_1.Message {
                    constructor(data) {
                        super();
                        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                        if (!Array.isArray(data) && typeof data == "object") {
                            if ("height" in data && data.height != undefined) {
                                this.height = data.height;
                            }
                            if ("format" in data && data.format != undefined) {
                                this.format = data.format;
                            }
                            if ("chunks" in data && data.chunks != undefined) {
                                this.chunks = data.chunks;
                            }
                            if ("hash" in data && data.hash != undefined) {
                                this.hash = data.hash;
                            }
                            if ("metadata" in data && data.metadata != undefined) {
                                this.metadata = data.metadata;
                            }
                        }
                    }
                    get height() {
                        return pb_1.Message.getField(this, 1);
                    }
                    set height(value) {
                        pb_1.Message.setField(this, 1, value);
                    }
                    get format() {
                        return pb_1.Message.getField(this, 2);
                    }
                    set format(value) {
                        pb_1.Message.setField(this, 2, value);
                    }
                    get chunks() {
                        return pb_1.Message.getField(this, 3);
                    }
                    set chunks(value) {
                        pb_1.Message.setField(this, 3, value);
                    }
                    get hash() {
                        return pb_1.Message.getField(this, 4);
                    }
                    set hash(value) {
                        pb_1.Message.setField(this, 4, value);
                    }
                    get metadata() {
                        return pb_1.Message.getWrapperField(this, Metadata, 5);
                    }
                    set metadata(value) {
                        pb_1.Message.setWrapperField(this, 5, value);
                    }
                    static fromObject(data) {
                        const message = new Snapshot({});
                        if (data.height != null) {
                            message.height = data.height;
                        }
                        if (data.format != null) {
                            message.format = data.format;
                        }
                        if (data.chunks != null) {
                            message.chunks = data.chunks;
                        }
                        if (data.hash != null) {
                            message.hash = data.hash;
                        }
                        if (data.metadata != null) {
                            message.metadata = Metadata.fromObject(data.metadata);
                        }
                        return message;
                    }
                    toObject() {
                        const data = {};
                        if (this.height != null) {
                            data.height = this.height;
                        }
                        if (this.format != null) {
                            data.format = this.format;
                        }
                        if (this.chunks != null) {
                            data.chunks = this.chunks;
                        }
                        if (this.hash != null) {
                            data.hash = this.hash;
                        }
                        if (this.metadata != null) {
                            data.metadata = this.metadata.toObject();
                        }
                        return data;
                    }
                    serialize(w) {
                        const writer = w || new pb_1.BinaryWriter();
                        if (this.height !== undefined)
                            writer.writeUint64(1, this.height);
                        if (this.format !== undefined)
                            writer.writeUint32(2, this.format);
                        if (this.chunks !== undefined)
                            writer.writeUint32(3, this.chunks);
                        if (this.hash !== undefined)
                            writer.writeBytes(4, this.hash);
                        if (this.metadata !== undefined)
                            writer.writeMessage(5, this.metadata, () => this.metadata.serialize(writer));
                        if (!w)
                            return writer.getResultBuffer();
                    }
                    static deserialize(bytes) {
                        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Snapshot();
                        while (reader.nextField()) {
                            if (reader.isEndGroup())
                                break;
                            switch (reader.getFieldNumber()) {
                                case 1:
                                    message.height = reader.readUint64();
                                    break;
                                case 2:
                                    message.format = reader.readUint32();
                                    break;
                                case 3:
                                    message.chunks = reader.readUint32();
                                    break;
                                case 4:
                                    message.hash = reader.readBytes();
                                    break;
                                case 5:
                                    reader.readMessage(message.metadata, () => message.metadata = Metadata.deserialize(reader));
                                    break;
                                default: reader.skipField();
                            }
                        }
                        return message;
                    }
                    serializeBinary() {
                        return this.serialize();
                    }
                    static deserializeBinary(bytes) {
                        return Snapshot.deserialize(bytes);
                    }
                }
                v1beta1.Snapshot = Snapshot;
                class Metadata extends pb_1.Message {
                    constructor(data) {
                        super();
                        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
                        if (!Array.isArray(data) && typeof data == "object") {
                            if ("chunk_hashes" in data && data.chunk_hashes != undefined) {
                                this.chunk_hashes = data.chunk_hashes;
                            }
                        }
                    }
                    get chunk_hashes() {
                        return pb_1.Message.getField(this, 1);
                    }
                    set chunk_hashes(value) {
                        pb_1.Message.setField(this, 1, value);
                    }
                    static fromObject(data) {
                        const message = new Metadata({});
                        if (data.chunk_hashes != null) {
                            message.chunk_hashes = data.chunk_hashes;
                        }
                        return message;
                    }
                    toObject() {
                        const data = {};
                        if (this.chunk_hashes != null) {
                            data.chunk_hashes = this.chunk_hashes;
                        }
                        return data;
                    }
                    serialize(w) {
                        const writer = w || new pb_1.BinaryWriter();
                        if (this.chunk_hashes !== undefined)
                            writer.writeRepeatedBytes(1, this.chunk_hashes);
                        if (!w)
                            return writer.getResultBuffer();
                    }
                    static deserialize(bytes) {
                        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Metadata();
                        while (reader.nextField()) {
                            if (reader.isEndGroup())
                                break;
                            switch (reader.getFieldNumber()) {
                                case 1:
                                    pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                                    break;
                                default: reader.skipField();
                            }
                        }
                        return message;
                    }
                    serializeBinary() {
                        return this.serialize();
                    }
                    static deserializeBinary(bytes) {
                        return Metadata.deserialize(bytes);
                    }
                }
                v1beta1.Metadata = Metadata;
            })(v1beta1 = snapshots.v1beta1 || (snapshots.v1beta1 = {}));
        })(snapshots = base.snapshots || (base.snapshots = {}));
    })(base = cosmos.base || (cosmos.base = {}));
})(cosmos = exports.cosmos || (exports.cosmos = {}));
//# sourceMappingURL=snapshot.js.map