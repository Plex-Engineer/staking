import {
  require_google_protobuf
} from "./chunk-P6W3ZOSO.js";
import {
  require_buffer
} from "./chunk-MYFKNE7U.js";
import {
  __commonJS
} from "./chunk-ACCAMVX6.js";

// node_modules/@tharsis/proto/dist/proto/cosmos/base/v1beta1/coin.js
var require_coin = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/cosmos/base/v1beta1/coin.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cosmos = void 0;
    var pb_1 = __importStar(require_google_protobuf());
    var cosmos;
    (function(cosmos2) {
      var base;
      (function(base2) {
        var v1beta1;
        (function(v1beta12) {
          class Coin extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("denom" in data && data.denom != void 0) {
                  this.denom = data.denom;
                }
                if ("amount" in data && data.amount != void 0) {
                  this.amount = data.amount;
                }
              }
            }
            get denom() {
              return pb_1.Message.getField(this, 1);
            }
            set denom(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get amount() {
              return pb_1.Message.getField(this, 2);
            }
            set amount(value) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
              const message = new Coin({});
              if (data.denom != null) {
                message.denom = data.denom;
              }
              if (data.amount != null) {
                message.amount = data.amount;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.denom != null) {
                data.denom = this.denom;
              }
              if (this.amount != null) {
                data.amount = this.amount;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.denom === "string" && this.denom.length)
                writer.writeString(1, this.denom);
              if (typeof this.amount === "string" && this.amount.length)
                writer.writeString(2, this.amount);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Coin();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.denom = reader.readString();
                    break;
                  case 2:
                    message.amount = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Coin.deserialize(bytes);
            }
          }
          v1beta12.Coin = Coin;
          class DecCoin extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("denom" in data && data.denom != void 0) {
                  this.denom = data.denom;
                }
                if ("amount" in data && data.amount != void 0) {
                  this.amount = data.amount;
                }
              }
            }
            get denom() {
              return pb_1.Message.getField(this, 1);
            }
            set denom(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get amount() {
              return pb_1.Message.getField(this, 2);
            }
            set amount(value) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
              const message = new DecCoin({});
              if (data.denom != null) {
                message.denom = data.denom;
              }
              if (data.amount != null) {
                message.amount = data.amount;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.denom != null) {
                data.denom = this.denom;
              }
              if (this.amount != null) {
                data.amount = this.amount;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.denom === "string" && this.denom.length)
                writer.writeString(1, this.denom);
              if (typeof this.amount === "string" && this.amount.length)
                writer.writeString(2, this.amount);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DecCoin();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.denom = reader.readString();
                    break;
                  case 2:
                    message.amount = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return DecCoin.deserialize(bytes);
            }
          }
          v1beta12.DecCoin = DecCoin;
          class IntProto extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("int" in data && data.int != void 0) {
                  this.int = data.int;
                }
              }
            }
            get int() {
              return pb_1.Message.getField(this, 1);
            }
            set int(value) {
              pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data) {
              const message = new IntProto({});
              if (data.int != null) {
                message.int = data.int;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.int != null) {
                data.int = this.int;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.int === "string" && this.int.length)
                writer.writeString(1, this.int);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IntProto();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.int = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return IntProto.deserialize(bytes);
            }
          }
          v1beta12.IntProto = IntProto;
          class DecProto extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("dec" in data && data.dec != void 0) {
                  this.dec = data.dec;
                }
              }
            }
            get dec() {
              return pb_1.Message.getField(this, 1);
            }
            set dec(value) {
              pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data) {
              const message = new DecProto({});
              if (data.dec != null) {
                message.dec = data.dec;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.dec != null) {
                data.dec = this.dec;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.dec === "string" && this.dec.length)
                writer.writeString(1, this.dec);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DecProto();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.dec = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return DecProto.deserialize(bytes);
            }
          }
          v1beta12.DecProto = DecProto;
        })(v1beta1 = base2.v1beta1 || (base2.v1beta1 = {}));
      })(base = cosmos2.base || (cosmos2.base = {}));
    })(cosmos = exports.cosmos || (exports.cosmos = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/evmos/erc20/v1/tx.js
var require_tx = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/evmos/erc20/v1/tx.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evmos = void 0;
    var dependency_3 = __importStar(require_coin());
    var pb_1 = __importStar(require_google_protobuf());
    var evmos;
    (function(evmos2) {
      var erc20;
      (function(erc202) {
        var v1;
        (function(v12) {
          class MsgConvertCoin extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("coin" in data && data.coin != void 0) {
                  this.coin = data.coin;
                }
                if ("receiver" in data && data.receiver != void 0) {
                  this.receiver = data.receiver;
                }
                if ("sender" in data && data.sender != void 0) {
                  this.sender = data.sender;
                }
              }
            }
            get coin() {
              return pb_1.Message.getWrapperField(this, dependency_3.cosmos.base.v1beta1.Coin, 1);
            }
            set coin(value) {
              pb_1.Message.setWrapperField(this, 1, value);
            }
            get receiver() {
              return pb_1.Message.getField(this, 2);
            }
            set receiver(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get sender() {
              return pb_1.Message.getField(this, 3);
            }
            set sender(value) {
              pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data) {
              const message = new MsgConvertCoin({});
              if (data.coin != null) {
                message.coin = dependency_3.cosmos.base.v1beta1.Coin.fromObject(data.coin);
              }
              if (data.receiver != null) {
                message.receiver = data.receiver;
              }
              if (data.sender != null) {
                message.sender = data.sender;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.coin != null) {
                data.coin = this.coin.toObject();
              }
              if (this.receiver != null) {
                data.receiver = this.receiver;
              }
              if (this.sender != null) {
                data.sender = this.sender;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.coin !== void 0)
                writer.writeMessage(1, this.coin, () => this.coin.serialize(writer));
              if (typeof this.receiver === "string" && this.receiver.length)
                writer.writeString(2, this.receiver);
              if (typeof this.sender === "string" && this.sender.length)
                writer.writeString(3, this.sender);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgConvertCoin();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.coin, () => message.coin = dependency_3.cosmos.base.v1beta1.Coin.deserialize(reader));
                    break;
                  case 2:
                    message.receiver = reader.readString();
                    break;
                  case 3:
                    message.sender = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgConvertCoin.deserialize(bytes);
            }
          }
          v12.MsgConvertCoin = MsgConvertCoin;
          class MsgConvertCoinResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
              }
            }
            static fromObject(data) {
              const message = new MsgConvertCoinResponse({});
              return message;
            }
            toObject() {
              const data = {};
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgConvertCoinResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgConvertCoinResponse.deserialize(bytes);
            }
          }
          v12.MsgConvertCoinResponse = MsgConvertCoinResponse;
          class MsgConvertERC20 extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_address" in data && data.contract_address != void 0) {
                  this.contract_address = data.contract_address;
                }
                if ("amount" in data && data.amount != void 0) {
                  this.amount = data.amount;
                }
                if ("receiver" in data && data.receiver != void 0) {
                  this.receiver = data.receiver;
                }
                if ("sender" in data && data.sender != void 0) {
                  this.sender = data.sender;
                }
              }
            }
            get contract_address() {
              return pb_1.Message.getField(this, 1);
            }
            set contract_address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get amount() {
              return pb_1.Message.getField(this, 2);
            }
            set amount(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get receiver() {
              return pb_1.Message.getField(this, 3);
            }
            set receiver(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get sender() {
              return pb_1.Message.getField(this, 4);
            }
            set sender(value) {
              pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data) {
              const message = new MsgConvertERC20({});
              if (data.contract_address != null) {
                message.contract_address = data.contract_address;
              }
              if (data.amount != null) {
                message.amount = data.amount;
              }
              if (data.receiver != null) {
                message.receiver = data.receiver;
              }
              if (data.sender != null) {
                message.sender = data.sender;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.contract_address != null) {
                data.contract_address = this.contract_address;
              }
              if (this.amount != null) {
                data.amount = this.amount;
              }
              if (this.receiver != null) {
                data.receiver = this.receiver;
              }
              if (this.sender != null) {
                data.sender = this.sender;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.contract_address === "string" && this.contract_address.length)
                writer.writeString(1, this.contract_address);
              if (typeof this.amount === "string" && this.amount.length)
                writer.writeString(2, this.amount);
              if (typeof this.receiver === "string" && this.receiver.length)
                writer.writeString(3, this.receiver);
              if (typeof this.sender === "string" && this.sender.length)
                writer.writeString(4, this.sender);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgConvertERC20();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.contract_address = reader.readString();
                    break;
                  case 2:
                    message.amount = reader.readString();
                    break;
                  case 3:
                    message.receiver = reader.readString();
                    break;
                  case 4:
                    message.sender = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgConvertERC20.deserialize(bytes);
            }
          }
          v12.MsgConvertERC20 = MsgConvertERC20;
          class MsgConvertERC20Response extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
              }
            }
            static fromObject(data) {
              const message = new MsgConvertERC20Response({});
              return message;
            }
            toObject() {
              const data = {};
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgConvertERC20Response();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgConvertERC20Response.deserialize(bytes);
            }
          }
          v12.MsgConvertERC20Response = MsgConvertERC20Response;
        })(v1 = erc202.v1 || (erc202.v1 = {}));
      })(erc20 = evmos2.erc20 || (evmos2.erc20 = {}));
    })(evmos = exports.evmos || (exports.evmos = {}));
  }
});

// node_modules/@tharsis/proto/dist/messages/erc20/msgConvertCoin.js
var require_msgConvertCoin = __commonJS({
  "node_modules/@tharsis/proto/dist/messages/erc20/msgConvertCoin.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMsgConvertCoin = void 0;
    var erc20 = __importStar(require_tx());
    var coin = __importStar(require_coin());
    function createMsgConvertCoin(denom, amount, receiver, sender) {
      const msg = new erc20.evmos.erc20.v1.MsgConvertCoin({
        coin: new coin.cosmos.base.v1beta1.Coin({
          denom,
          amount
        }),
        receiver,
        sender
      });
      return {
        message: msg,
        path: "evmos.erc20.v1.MsgConvertCoin"
      };
    }
    exports.createMsgConvertCoin = createMsgConvertCoin;
  }
});

// node_modules/@tharsis/proto/dist/messages/erc20/msgConvertERC20.js
var require_msgConvertERC20 = __commonJS({
  "node_modules/@tharsis/proto/dist/messages/erc20/msgConvertERC20.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMsgConvertERC20 = void 0;
    var erc20 = __importStar(require_tx());
    function createMsgConvertERC20(contractAddress, amount, receiver, sender) {
      const msg = new erc20.evmos.erc20.v1.MsgConvertERC20({
        contract_address: contractAddress,
        amount,
        receiver,
        sender
      });
      return {
        message: msg,
        path: "evmos.erc20.v1.MsgConvertERC20"
      };
    }
    exports.createMsgConvertERC20 = createMsgConvertERC20;
  }
});

// node_modules/@tharsis/proto/dist/proto/google/protobuf/any.js
var require_any = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/google/protobuf/any.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.google = void 0;
    var pb_1 = __importStar(require_google_protobuf());
    var google;
    (function(google2) {
      var protobuf;
      (function(protobuf2) {
        class Any extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("type_url" in data && data.type_url != void 0) {
                this.type_url = data.type_url;
              }
              if ("value" in data && data.value != void 0) {
                this.value = data.value;
              }
            }
          }
          get type_url() {
            return pb_1.Message.getField(this, 1);
          }
          set type_url(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get value() {
            return pb_1.Message.getField(this, 2);
          }
          set value(value) {
            pb_1.Message.setField(this, 2, value);
          }
          static fromObject(data) {
            const message = new Any({});
            if (data.type_url != null) {
              message.type_url = data.type_url;
            }
            if (data.value != null) {
              message.value = data.value;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.type_url != null) {
              data.type_url = this.type_url;
            }
            if (this.value != null) {
              data.value = this.value;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.type_url === "string" && this.type_url.length)
              writer.writeString(1, this.type_url);
            if (this.value !== void 0)
              writer.writeBytes(2, this.value);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Any();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.type_url = reader.readString();
                  break;
                case 2:
                  message.value = reader.readBytes();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return Any.deserialize(bytes);
          }
        }
        protobuf2.Any = Any;
      })(protobuf = google2.protobuf || (google2.protobuf = {}));
    })(google = exports.google || (exports.google = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/google/protobuf/timestamp.js
var require_timestamp = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/google/protobuf/timestamp.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.google = void 0;
    var pb_1 = __importStar(require_google_protobuf());
    var google;
    (function(google2) {
      var protobuf;
      (function(protobuf2) {
        class Timestamp extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("seconds" in data && data.seconds != void 0) {
                this.seconds = data.seconds;
              }
              if ("nanos" in data && data.nanos != void 0) {
                this.nanos = data.nanos;
              }
            }
          }
          get seconds() {
            return pb_1.Message.getField(this, 1);
          }
          set seconds(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get nanos() {
            return pb_1.Message.getField(this, 2);
          }
          set nanos(value) {
            pb_1.Message.setField(this, 2, value);
          }
          static fromObject(data) {
            const message = new Timestamp({});
            if (data.seconds != null) {
              message.seconds = data.seconds;
            }
            if (data.nanos != null) {
              message.nanos = data.nanos;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.seconds != null) {
              data.seconds = this.seconds;
            }
            if (this.nanos != null) {
              data.nanos = this.nanos;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.seconds !== void 0)
              writer.writeInt64(1, this.seconds);
            if (this.nanos !== void 0)
              writer.writeInt32(2, this.nanos);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Timestamp();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.seconds = reader.readInt64();
                  break;
                case 2:
                  message.nanos = reader.readInt32();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return Timestamp.deserialize(bytes);
          }
        }
        protobuf2.Timestamp = Timestamp;
      })(protobuf = google2.protobuf || (google2.protobuf = {}));
    })(google = exports.google || (exports.google = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/cosmos/upgrade/v1beta1/upgrade.js
var require_upgrade = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/cosmos/upgrade/v1beta1/upgrade.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cosmos = void 0;
    var dependency_1 = __importStar(require_any());
    var dependency_3 = __importStar(require_timestamp());
    var pb_1 = __importStar(require_google_protobuf());
    var cosmos;
    (function(cosmos2) {
      var upgrade;
      (function(upgrade2) {
        var v1beta1;
        (function(v1beta12) {
          class Plan extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != void 0) {
                  this.name = data.name;
                }
                if ("time" in data && data.time != void 0) {
                  this.time = data.time;
                }
                if ("height" in data && data.height != void 0) {
                  this.height = data.height;
                }
                if ("info" in data && data.info != void 0) {
                  this.info = data.info;
                }
                if ("upgraded_client_state" in data && data.upgraded_client_state != void 0) {
                  this.upgraded_client_state = data.upgraded_client_state;
                }
              }
            }
            get name() {
              return pb_1.Message.getField(this, 1);
            }
            set name(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get time() {
              return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Timestamp, 2);
            }
            set time(value) {
              pb_1.Message.setWrapperField(this, 2, value);
            }
            get height() {
              return pb_1.Message.getField(this, 3);
            }
            set height(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get info() {
              return pb_1.Message.getField(this, 4);
            }
            set info(value) {
              pb_1.Message.setField(this, 4, value);
            }
            get upgraded_client_state() {
              return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 5);
            }
            set upgraded_client_state(value) {
              pb_1.Message.setWrapperField(this, 5, value);
            }
            static fromObject(data) {
              const message = new Plan({});
              if (data.name != null) {
                message.name = data.name;
              }
              if (data.time != null) {
                message.time = dependency_3.google.protobuf.Timestamp.fromObject(data.time);
              }
              if (data.height != null) {
                message.height = data.height;
              }
              if (data.info != null) {
                message.info = data.info;
              }
              if (data.upgraded_client_state != null) {
                message.upgraded_client_state = dependency_1.google.protobuf.Any.fromObject(data.upgraded_client_state);
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.name != null) {
                data.name = this.name;
              }
              if (this.time != null) {
                data.time = this.time.toObject();
              }
              if (this.height != null) {
                data.height = this.height;
              }
              if (this.info != null) {
                data.info = this.info;
              }
              if (this.upgraded_client_state != null) {
                data.upgraded_client_state = this.upgraded_client_state.toObject();
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
              if (this.time !== void 0)
                writer.writeMessage(2, this.time, () => this.time.serialize(writer));
              if (this.height !== void 0)
                writer.writeInt64(3, this.height);
              if (typeof this.info === "string" && this.info.length)
                writer.writeString(4, this.info);
              if (this.upgraded_client_state !== void 0)
                writer.writeMessage(5, this.upgraded_client_state, () => this.upgraded_client_state.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Plan();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.name = reader.readString();
                    break;
                  case 2:
                    reader.readMessage(message.time, () => message.time = dependency_3.google.protobuf.Timestamp.deserialize(reader));
                    break;
                  case 3:
                    message.height = reader.readInt64();
                    break;
                  case 4:
                    message.info = reader.readString();
                    break;
                  case 5:
                    reader.readMessage(message.upgraded_client_state, () => message.upgraded_client_state = dependency_1.google.protobuf.Any.deserialize(reader));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Plan.deserialize(bytes);
            }
          }
          v1beta12.Plan = Plan;
          class SoftwareUpgradeProposal extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != void 0) {
                  this.title = data.title;
                }
                if ("description" in data && data.description != void 0) {
                  this.description = data.description;
                }
                if ("plan" in data && data.plan != void 0) {
                  this.plan = data.plan;
                }
              }
            }
            get title() {
              return pb_1.Message.getField(this, 1);
            }
            set title(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get description() {
              return pb_1.Message.getField(this, 2);
            }
            set description(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get plan() {
              return pb_1.Message.getWrapperField(this, Plan, 3);
            }
            set plan(value) {
              pb_1.Message.setWrapperField(this, 3, value);
            }
            static fromObject(data) {
              const message = new SoftwareUpgradeProposal({});
              if (data.title != null) {
                message.title = data.title;
              }
              if (data.description != null) {
                message.description = data.description;
              }
              if (data.plan != null) {
                message.plan = Plan.fromObject(data.plan);
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.title != null) {
                data.title = this.title;
              }
              if (this.description != null) {
                data.description = this.description;
              }
              if (this.plan != null) {
                data.plan = this.plan.toObject();
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.title === "string" && this.title.length)
                writer.writeString(1, this.title);
              if (typeof this.description === "string" && this.description.length)
                writer.writeString(2, this.description);
              if (this.plan !== void 0)
                writer.writeMessage(3, this.plan, () => this.plan.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SoftwareUpgradeProposal();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.title = reader.readString();
                    break;
                  case 2:
                    message.description = reader.readString();
                    break;
                  case 3:
                    reader.readMessage(message.plan, () => message.plan = Plan.deserialize(reader));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return SoftwareUpgradeProposal.deserialize(bytes);
            }
          }
          v1beta12.SoftwareUpgradeProposal = SoftwareUpgradeProposal;
          class CancelSoftwareUpgradeProposal extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != void 0) {
                  this.title = data.title;
                }
                if ("description" in data && data.description != void 0) {
                  this.description = data.description;
                }
              }
            }
            get title() {
              return pb_1.Message.getField(this, 1);
            }
            set title(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get description() {
              return pb_1.Message.getField(this, 2);
            }
            set description(value) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
              const message = new CancelSoftwareUpgradeProposal({});
              if (data.title != null) {
                message.title = data.title;
              }
              if (data.description != null) {
                message.description = data.description;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.title != null) {
                data.title = this.title;
              }
              if (this.description != null) {
                data.description = this.description;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.title === "string" && this.title.length)
                writer.writeString(1, this.title);
              if (typeof this.description === "string" && this.description.length)
                writer.writeString(2, this.description);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CancelSoftwareUpgradeProposal();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.title = reader.readString();
                    break;
                  case 2:
                    message.description = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return CancelSoftwareUpgradeProposal.deserialize(bytes);
            }
          }
          v1beta12.CancelSoftwareUpgradeProposal = CancelSoftwareUpgradeProposal;
          class ModuleVersion extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != void 0) {
                  this.name = data.name;
                }
                if ("version" in data && data.version != void 0) {
                  this.version = data.version;
                }
              }
            }
            get name() {
              return pb_1.Message.getField(this, 1);
            }
            set name(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get version() {
              return pb_1.Message.getField(this, 2);
            }
            set version(value) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
              const message = new ModuleVersion({});
              if (data.name != null) {
                message.name = data.name;
              }
              if (data.version != null) {
                message.version = data.version;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.name != null) {
                data.name = this.name;
              }
              if (this.version != null) {
                data.version = this.version;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.name === "string" && this.name.length)
                writer.writeString(1, this.name);
              if (this.version !== void 0)
                writer.writeUint64(2, this.version);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModuleVersion();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.name = reader.readString();
                    break;
                  case 2:
                    message.version = reader.readUint64();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return ModuleVersion.deserialize(bytes);
            }
          }
          v1beta12.ModuleVersion = ModuleVersion;
        })(v1beta1 = upgrade2.v1beta1 || (upgrade2.v1beta1 = {}));
      })(upgrade = cosmos2.upgrade || (cosmos2.upgrade = {}));
    })(cosmos = exports.cosmos || (exports.cosmos = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/ibc/core/client/v1/client.js
var require_client = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/ibc/core/client/v1/client.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ibc = void 0;
    var dependency_2 = __importStar(require_any());
    var dependency_3 = __importStar(require_upgrade());
    var pb_1 = __importStar(require_google_protobuf());
    var ibc;
    (function(ibc2) {
      var core;
      (function(core2) {
        var client;
        (function(client2) {
          var v1;
          (function(v12) {
            class IdentifiedClientState extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                  if ("client_id" in data && data.client_id != void 0) {
                    this.client_id = data.client_id;
                  }
                  if ("client_state" in data && data.client_state != void 0) {
                    this.client_state = data.client_state;
                  }
                }
              }
              get client_id() {
                return pb_1.Message.getField(this, 1);
              }
              set client_id(value) {
                pb_1.Message.setField(this, 1, value);
              }
              get client_state() {
                return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Any, 2);
              }
              set client_state(value) {
                pb_1.Message.setWrapperField(this, 2, value);
              }
              static fromObject(data) {
                const message = new IdentifiedClientState({});
                if (data.client_id != null) {
                  message.client_id = data.client_id;
                }
                if (data.client_state != null) {
                  message.client_state = dependency_2.google.protobuf.Any.fromObject(data.client_state);
                }
                return message;
              }
              toObject() {
                const data = {};
                if (this.client_id != null) {
                  data.client_id = this.client_id;
                }
                if (this.client_state != null) {
                  data.client_state = this.client_state.toObject();
                }
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (typeof this.client_id === "string" && this.client_id.length)
                  writer.writeString(1, this.client_id);
                if (this.client_state !== void 0)
                  writer.writeMessage(2, this.client_state, () => this.client_state.serialize(writer));
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IdentifiedClientState();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    case 1:
                      message.client_id = reader.readString();
                      break;
                    case 2:
                      reader.readMessage(message.client_state, () => message.client_state = dependency_2.google.protobuf.Any.deserialize(reader));
                      break;
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return IdentifiedClientState.deserialize(bytes);
              }
            }
            v12.IdentifiedClientState = IdentifiedClientState;
            class ConsensusStateWithHeight extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                  if ("height" in data && data.height != void 0) {
                    this.height = data.height;
                  }
                  if ("consensus_state" in data && data.consensus_state != void 0) {
                    this.consensus_state = data.consensus_state;
                  }
                }
              }
              get height() {
                return pb_1.Message.getWrapperField(this, Height, 1);
              }
              set height(value) {
                pb_1.Message.setWrapperField(this, 1, value);
              }
              get consensus_state() {
                return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Any, 2);
              }
              set consensus_state(value) {
                pb_1.Message.setWrapperField(this, 2, value);
              }
              static fromObject(data) {
                const message = new ConsensusStateWithHeight({});
                if (data.height != null) {
                  message.height = Height.fromObject(data.height);
                }
                if (data.consensus_state != null) {
                  message.consensus_state = dependency_2.google.protobuf.Any.fromObject(data.consensus_state);
                }
                return message;
              }
              toObject() {
                const data = {};
                if (this.height != null) {
                  data.height = this.height.toObject();
                }
                if (this.consensus_state != null) {
                  data.consensus_state = this.consensus_state.toObject();
                }
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.height !== void 0)
                  writer.writeMessage(1, this.height, () => this.height.serialize(writer));
                if (this.consensus_state !== void 0)
                  writer.writeMessage(2, this.consensus_state, () => this.consensus_state.serialize(writer));
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ConsensusStateWithHeight();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    case 1:
                      reader.readMessage(message.height, () => message.height = Height.deserialize(reader));
                      break;
                    case 2:
                      reader.readMessage(message.consensus_state, () => message.consensus_state = dependency_2.google.protobuf.Any.deserialize(reader));
                      break;
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return ConsensusStateWithHeight.deserialize(bytes);
              }
            }
            v12.ConsensusStateWithHeight = ConsensusStateWithHeight;
            class ClientConsensusStates extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
                if (!Array.isArray(data) && typeof data == "object") {
                  if ("client_id" in data && data.client_id != void 0) {
                    this.client_id = data.client_id;
                  }
                  if ("consensus_states" in data && data.consensus_states != void 0) {
                    this.consensus_states = data.consensus_states;
                  }
                }
              }
              get client_id() {
                return pb_1.Message.getField(this, 1);
              }
              set client_id(value) {
                pb_1.Message.setField(this, 1, value);
              }
              get consensus_states() {
                return pb_1.Message.getRepeatedWrapperField(this, ConsensusStateWithHeight, 2);
              }
              set consensus_states(value) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
              }
              static fromObject(data) {
                const message = new ClientConsensusStates({});
                if (data.client_id != null) {
                  message.client_id = data.client_id;
                }
                if (data.consensus_states != null) {
                  message.consensus_states = data.consensus_states.map((item) => ConsensusStateWithHeight.fromObject(item));
                }
                return message;
              }
              toObject() {
                const data = {};
                if (this.client_id != null) {
                  data.client_id = this.client_id;
                }
                if (this.consensus_states != null) {
                  data.consensus_states = this.consensus_states.map((item) => item.toObject());
                }
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (typeof this.client_id === "string" && this.client_id.length)
                  writer.writeString(1, this.client_id);
                if (this.consensus_states !== void 0)
                  writer.writeRepeatedMessage(2, this.consensus_states, (item) => item.serialize(writer));
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientConsensusStates();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    case 1:
                      message.client_id = reader.readString();
                      break;
                    case 2:
                      reader.readMessage(message.consensus_states, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ConsensusStateWithHeight.deserialize(reader), ConsensusStateWithHeight));
                      break;
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return ClientConsensusStates.deserialize(bytes);
              }
            }
            v12.ClientConsensusStates = ClientConsensusStates;
            class ClientUpdateProposal extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                  if ("title" in data && data.title != void 0) {
                    this.title = data.title;
                  }
                  if ("description" in data && data.description != void 0) {
                    this.description = data.description;
                  }
                  if ("subject_client_id" in data && data.subject_client_id != void 0) {
                    this.subject_client_id = data.subject_client_id;
                  }
                  if ("substitute_client_id" in data && data.substitute_client_id != void 0) {
                    this.substitute_client_id = data.substitute_client_id;
                  }
                }
              }
              get title() {
                return pb_1.Message.getField(this, 1);
              }
              set title(value) {
                pb_1.Message.setField(this, 1, value);
              }
              get description() {
                return pb_1.Message.getField(this, 2);
              }
              set description(value) {
                pb_1.Message.setField(this, 2, value);
              }
              get subject_client_id() {
                return pb_1.Message.getField(this, 3);
              }
              set subject_client_id(value) {
                pb_1.Message.setField(this, 3, value);
              }
              get substitute_client_id() {
                return pb_1.Message.getField(this, 4);
              }
              set substitute_client_id(value) {
                pb_1.Message.setField(this, 4, value);
              }
              static fromObject(data) {
                const message = new ClientUpdateProposal({});
                if (data.title != null) {
                  message.title = data.title;
                }
                if (data.description != null) {
                  message.description = data.description;
                }
                if (data.subject_client_id != null) {
                  message.subject_client_id = data.subject_client_id;
                }
                if (data.substitute_client_id != null) {
                  message.substitute_client_id = data.substitute_client_id;
                }
                return message;
              }
              toObject() {
                const data = {};
                if (this.title != null) {
                  data.title = this.title;
                }
                if (this.description != null) {
                  data.description = this.description;
                }
                if (this.subject_client_id != null) {
                  data.subject_client_id = this.subject_client_id;
                }
                if (this.substitute_client_id != null) {
                  data.substitute_client_id = this.substitute_client_id;
                }
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (typeof this.title === "string" && this.title.length)
                  writer.writeString(1, this.title);
                if (typeof this.description === "string" && this.description.length)
                  writer.writeString(2, this.description);
                if (typeof this.subject_client_id === "string" && this.subject_client_id.length)
                  writer.writeString(3, this.subject_client_id);
                if (typeof this.substitute_client_id === "string" && this.substitute_client_id.length)
                  writer.writeString(4, this.substitute_client_id);
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClientUpdateProposal();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    case 1:
                      message.title = reader.readString();
                      break;
                    case 2:
                      message.description = reader.readString();
                      break;
                    case 3:
                      message.subject_client_id = reader.readString();
                      break;
                    case 4:
                      message.substitute_client_id = reader.readString();
                      break;
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return ClientUpdateProposal.deserialize(bytes);
              }
            }
            v12.ClientUpdateProposal = ClientUpdateProposal;
            class UpgradeProposal extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                  if ("title" in data && data.title != void 0) {
                    this.title = data.title;
                  }
                  if ("description" in data && data.description != void 0) {
                    this.description = data.description;
                  }
                  if ("plan" in data && data.plan != void 0) {
                    this.plan = data.plan;
                  }
                  if ("upgraded_client_state" in data && data.upgraded_client_state != void 0) {
                    this.upgraded_client_state = data.upgraded_client_state;
                  }
                }
              }
              get title() {
                return pb_1.Message.getField(this, 1);
              }
              set title(value) {
                pb_1.Message.setField(this, 1, value);
              }
              get description() {
                return pb_1.Message.getField(this, 2);
              }
              set description(value) {
                pb_1.Message.setField(this, 2, value);
              }
              get plan() {
                return pb_1.Message.getWrapperField(this, dependency_3.cosmos.upgrade.v1beta1.Plan, 3);
              }
              set plan(value) {
                pb_1.Message.setWrapperField(this, 3, value);
              }
              get upgraded_client_state() {
                return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Any, 4);
              }
              set upgraded_client_state(value) {
                pb_1.Message.setWrapperField(this, 4, value);
              }
              static fromObject(data) {
                const message = new UpgradeProposal({});
                if (data.title != null) {
                  message.title = data.title;
                }
                if (data.description != null) {
                  message.description = data.description;
                }
                if (data.plan != null) {
                  message.plan = dependency_3.cosmos.upgrade.v1beta1.Plan.fromObject(data.plan);
                }
                if (data.upgraded_client_state != null) {
                  message.upgraded_client_state = dependency_2.google.protobuf.Any.fromObject(data.upgraded_client_state);
                }
                return message;
              }
              toObject() {
                const data = {};
                if (this.title != null) {
                  data.title = this.title;
                }
                if (this.description != null) {
                  data.description = this.description;
                }
                if (this.plan != null) {
                  data.plan = this.plan.toObject();
                }
                if (this.upgraded_client_state != null) {
                  data.upgraded_client_state = this.upgraded_client_state.toObject();
                }
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (typeof this.title === "string" && this.title.length)
                  writer.writeString(1, this.title);
                if (typeof this.description === "string" && this.description.length)
                  writer.writeString(2, this.description);
                if (this.plan !== void 0)
                  writer.writeMessage(3, this.plan, () => this.plan.serialize(writer));
                if (this.upgraded_client_state !== void 0)
                  writer.writeMessage(4, this.upgraded_client_state, () => this.upgraded_client_state.serialize(writer));
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpgradeProposal();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    case 1:
                      message.title = reader.readString();
                      break;
                    case 2:
                      message.description = reader.readString();
                      break;
                    case 3:
                      reader.readMessage(message.plan, () => message.plan = dependency_3.cosmos.upgrade.v1beta1.Plan.deserialize(reader));
                      break;
                    case 4:
                      reader.readMessage(message.upgraded_client_state, () => message.upgraded_client_state = dependency_2.google.protobuf.Any.deserialize(reader));
                      break;
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return UpgradeProposal.deserialize(bytes);
              }
            }
            v12.UpgradeProposal = UpgradeProposal;
            class Height extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                  if ("revision_number" in data && data.revision_number != void 0) {
                    this.revision_number = data.revision_number;
                  }
                  if ("revision_height" in data && data.revision_height != void 0) {
                    this.revision_height = data.revision_height;
                  }
                }
              }
              get revision_number() {
                return pb_1.Message.getField(this, 1);
              }
              set revision_number(value) {
                pb_1.Message.setField(this, 1, value);
              }
              get revision_height() {
                return pb_1.Message.getField(this, 2);
              }
              set revision_height(value) {
                pb_1.Message.setField(this, 2, value);
              }
              static fromObject(data) {
                const message = new Height({});
                if (data.revision_number != null) {
                  message.revision_number = data.revision_number;
                }
                if (data.revision_height != null) {
                  message.revision_height = data.revision_height;
                }
                return message;
              }
              toObject() {
                const data = {};
                if (this.revision_number != null) {
                  data.revision_number = this.revision_number;
                }
                if (this.revision_height != null) {
                  data.revision_height = this.revision_height;
                }
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.revision_number !== void 0)
                  writer.writeUint64(1, this.revision_number);
                if (this.revision_height !== void 0)
                  writer.writeUint64(2, this.revision_height);
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Height();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    case 1:
                      message.revision_number = reader.readUint64();
                      break;
                    case 2:
                      message.revision_height = reader.readUint64();
                      break;
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return Height.deserialize(bytes);
              }
            }
            v12.Height = Height;
            class Params extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
                if (!Array.isArray(data) && typeof data == "object") {
                  if ("allowed_clients" in data && data.allowed_clients != void 0) {
                    this.allowed_clients = data.allowed_clients;
                  }
                }
              }
              get allowed_clients() {
                return pb_1.Message.getField(this, 1);
              }
              set allowed_clients(value) {
                pb_1.Message.setField(this, 1, value);
              }
              static fromObject(data) {
                const message = new Params({});
                if (data.allowed_clients != null) {
                  message.allowed_clients = data.allowed_clients;
                }
                return message;
              }
              toObject() {
                const data = {};
                if (this.allowed_clients != null) {
                  data.allowed_clients = this.allowed_clients;
                }
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.allowed_clients !== void 0)
                  writer.writeRepeatedString(1, this.allowed_clients);
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Params();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    case 1:
                      pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                      break;
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return Params.deserialize(bytes);
              }
            }
            v12.Params = Params;
          })(v1 = client2.v1 || (client2.v1 = {}));
        })(client = core2.client || (core2.client = {}));
      })(core = ibc2.core || (ibc2.core = {}));
    })(ibc = exports.ibc || (exports.ibc = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/ibc/applications/transfer/v1/tx.js
var require_tx2 = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/ibc/applications/transfer/v1/tx.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ibc = void 0;
    var dependency_2 = __importStar(require_coin());
    var dependency_3 = __importStar(require_client());
    var pb_1 = __importStar(require_google_protobuf());
    var ibc;
    (function(ibc2) {
      var applications;
      (function(applications2) {
        var transfer;
        (function(transfer2) {
          var v1;
          (function(v12) {
            class MsgTransfer extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                  if ("source_port" in data && data.source_port != void 0) {
                    this.source_port = data.source_port;
                  }
                  if ("source_channel" in data && data.source_channel != void 0) {
                    this.source_channel = data.source_channel;
                  }
                  if ("token" in data && data.token != void 0) {
                    this.token = data.token;
                  }
                  if ("sender" in data && data.sender != void 0) {
                    this.sender = data.sender;
                  }
                  if ("receiver" in data && data.receiver != void 0) {
                    this.receiver = data.receiver;
                  }
                  if ("timeout_height" in data && data.timeout_height != void 0) {
                    this.timeout_height = data.timeout_height;
                  }
                  if ("timeout_timestamp" in data && data.timeout_timestamp != void 0) {
                    this.timeout_timestamp = data.timeout_timestamp;
                  }
                }
              }
              get source_port() {
                return pb_1.Message.getField(this, 1);
              }
              set source_port(value) {
                pb_1.Message.setField(this, 1, value);
              }
              get source_channel() {
                return pb_1.Message.getField(this, 2);
              }
              set source_channel(value) {
                pb_1.Message.setField(this, 2, value);
              }
              get token() {
                return pb_1.Message.getWrapperField(this, dependency_2.cosmos.base.v1beta1.Coin, 3);
              }
              set token(value) {
                pb_1.Message.setWrapperField(this, 3, value);
              }
              get sender() {
                return pb_1.Message.getField(this, 4);
              }
              set sender(value) {
                pb_1.Message.setField(this, 4, value);
              }
              get receiver() {
                return pb_1.Message.getField(this, 5);
              }
              set receiver(value) {
                pb_1.Message.setField(this, 5, value);
              }
              get timeout_height() {
                return pb_1.Message.getWrapperField(this, dependency_3.ibc.core.client.v1.Height, 6);
              }
              set timeout_height(value) {
                pb_1.Message.setWrapperField(this, 6, value);
              }
              get timeout_timestamp() {
                return pb_1.Message.getField(this, 7);
              }
              set timeout_timestamp(value) {
                pb_1.Message.setField(this, 7, value);
              }
              static fromObject(data) {
                const message = new MsgTransfer({});
                if (data.source_port != null) {
                  message.source_port = data.source_port;
                }
                if (data.source_channel != null) {
                  message.source_channel = data.source_channel;
                }
                if (data.token != null) {
                  message.token = dependency_2.cosmos.base.v1beta1.Coin.fromObject(data.token);
                }
                if (data.sender != null) {
                  message.sender = data.sender;
                }
                if (data.receiver != null) {
                  message.receiver = data.receiver;
                }
                if (data.timeout_height != null) {
                  message.timeout_height = dependency_3.ibc.core.client.v1.Height.fromObject(data.timeout_height);
                }
                if (data.timeout_timestamp != null) {
                  message.timeout_timestamp = data.timeout_timestamp;
                }
                return message;
              }
              toObject() {
                const data = {};
                if (this.source_port != null) {
                  data.source_port = this.source_port;
                }
                if (this.source_channel != null) {
                  data.source_channel = this.source_channel;
                }
                if (this.token != null) {
                  data.token = this.token.toObject();
                }
                if (this.sender != null) {
                  data.sender = this.sender;
                }
                if (this.receiver != null) {
                  data.receiver = this.receiver;
                }
                if (this.timeout_height != null) {
                  data.timeout_height = this.timeout_height.toObject();
                }
                if (this.timeout_timestamp != null) {
                  data.timeout_timestamp = this.timeout_timestamp;
                }
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (typeof this.source_port === "string" && this.source_port.length)
                  writer.writeString(1, this.source_port);
                if (typeof this.source_channel === "string" && this.source_channel.length)
                  writer.writeString(2, this.source_channel);
                if (this.token !== void 0)
                  writer.writeMessage(3, this.token, () => this.token.serialize(writer));
                if (typeof this.sender === "string" && this.sender.length)
                  writer.writeString(4, this.sender);
                if (typeof this.receiver === "string" && this.receiver.length)
                  writer.writeString(5, this.receiver);
                if (this.timeout_height !== void 0)
                  writer.writeMessage(6, this.timeout_height, () => this.timeout_height.serialize(writer));
                if (this.timeout_timestamp !== void 0)
                  writer.writeUint64(7, this.timeout_timestamp);
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransfer();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    case 1:
                      message.source_port = reader.readString();
                      break;
                    case 2:
                      message.source_channel = reader.readString();
                      break;
                    case 3:
                      reader.readMessage(message.token, () => message.token = dependency_2.cosmos.base.v1beta1.Coin.deserialize(reader));
                      break;
                    case 4:
                      message.sender = reader.readString();
                      break;
                    case 5:
                      message.receiver = reader.readString();
                      break;
                    case 6:
                      reader.readMessage(message.timeout_height, () => message.timeout_height = dependency_3.ibc.core.client.v1.Height.deserialize(reader));
                      break;
                    case 7:
                      message.timeout_timestamp = reader.readUint64();
                      break;
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return MsgTransfer.deserialize(bytes);
              }
            }
            v12.MsgTransfer = MsgTransfer;
            class MsgTransferResponse extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                }
              }
              static fromObject(data) {
                const message = new MsgTransferResponse({});
                return message;
              }
              toObject() {
                const data = {};
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferResponse();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return MsgTransferResponse.deserialize(bytes);
              }
            }
            v12.MsgTransferResponse = MsgTransferResponse;
          })(v1 = transfer2.v1 || (transfer2.v1 = {}));
        })(transfer = applications2.transfer || (applications2.transfer = {}));
      })(applications = ibc2.applications || (ibc2.applications = {}));
    })(ibc = exports.ibc || (exports.ibc = {}));
  }
});

// node_modules/@tharsis/proto/dist/messages/ibcMsgTransfer.js
var require_ibcMsgTransfer = __commonJS({
  "node_modules/@tharsis/proto/dist/messages/ibcMsgTransfer.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createIBCMsgTransfer = void 0;
    var coin = __importStar(require_coin());
    var ibcMsg = __importStar(require_tx2());
    var ibcCore = __importStar(require_client());
    function createIBCMsgTransfer(sourcePort, sourceChannel, amount, denom, sender, receiver, revisionNumber, revisionHeight, timeoutTimestamp) {
      const token = new coin.cosmos.base.v1beta1.Coin({
        denom,
        amount
      });
      const timeoutHeight = new ibcCore.ibc.core.client.v1.Height({
        revision_number: revisionNumber,
        revision_height: revisionHeight
      });
      const ibcMessage = new ibcMsg.ibc.applications.transfer.v1.MsgTransfer({
        source_port: sourcePort,
        source_channel: sourceChannel,
        token,
        sender,
        receiver,
        timeout_height: timeoutHeight,
        timeout_timestamp: parseInt(timeoutTimestamp, 10)
      });
      return {
        message: ibcMessage,
        path: "ibc.applications.transfer.v1.MsgTransfer"
      };
    }
    exports.createIBCMsgTransfer = createIBCMsgTransfer;
  }
});

// node_modules/@tharsis/proto/dist/proto/ethermint/evm/v1/evm.js
var require_evm = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/ethermint/evm/v1/evm.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ethermint = void 0;
    var pb_1 = __importStar(require_google_protobuf());
    var ethermint;
    (function(ethermint2) {
      var evm;
      (function(evm2) {
        var v1;
        (function(v12) {
          class Params extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("evm_denom" in data && data.evm_denom != void 0) {
                  this.evm_denom = data.evm_denom;
                }
                if ("enable_create" in data && data.enable_create != void 0) {
                  this.enable_create = data.enable_create;
                }
                if ("enable_call" in data && data.enable_call != void 0) {
                  this.enable_call = data.enable_call;
                }
                if ("extra_eips" in data && data.extra_eips != void 0) {
                  this.extra_eips = data.extra_eips;
                }
                if ("chain_config" in data && data.chain_config != void 0) {
                  this.chain_config = data.chain_config;
                }
              }
            }
            get evm_denom() {
              return pb_1.Message.getField(this, 1);
            }
            set evm_denom(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get enable_create() {
              return pb_1.Message.getField(this, 2);
            }
            set enable_create(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get enable_call() {
              return pb_1.Message.getField(this, 3);
            }
            set enable_call(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get extra_eips() {
              return pb_1.Message.getField(this, 4);
            }
            set extra_eips(value) {
              pb_1.Message.setField(this, 4, value);
            }
            get chain_config() {
              return pb_1.Message.getWrapperField(this, ChainConfig, 5);
            }
            set chain_config(value) {
              pb_1.Message.setWrapperField(this, 5, value);
            }
            static fromObject(data) {
              const message = new Params({});
              if (data.evm_denom != null) {
                message.evm_denom = data.evm_denom;
              }
              if (data.enable_create != null) {
                message.enable_create = data.enable_create;
              }
              if (data.enable_call != null) {
                message.enable_call = data.enable_call;
              }
              if (data.extra_eips != null) {
                message.extra_eips = data.extra_eips;
              }
              if (data.chain_config != null) {
                message.chain_config = ChainConfig.fromObject(data.chain_config);
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.evm_denom != null) {
                data.evm_denom = this.evm_denom;
              }
              if (this.enable_create != null) {
                data.enable_create = this.enable_create;
              }
              if (this.enable_call != null) {
                data.enable_call = this.enable_call;
              }
              if (this.extra_eips != null) {
                data.extra_eips = this.extra_eips;
              }
              if (this.chain_config != null) {
                data.chain_config = this.chain_config.toObject();
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.evm_denom === "string" && this.evm_denom.length)
                writer.writeString(1, this.evm_denom);
              if (this.enable_create !== void 0)
                writer.writeBool(2, this.enable_create);
              if (this.enable_call !== void 0)
                writer.writeBool(3, this.enable_call);
              if (this.extra_eips !== void 0)
                writer.writePackedInt64(4, this.extra_eips);
              if (this.chain_config !== void 0)
                writer.writeMessage(5, this.chain_config, () => this.chain_config.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Params();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.evm_denom = reader.readString();
                    break;
                  case 2:
                    message.enable_create = reader.readBool();
                    break;
                  case 3:
                    message.enable_call = reader.readBool();
                    break;
                  case 4:
                    message.extra_eips = reader.readPackedInt64();
                    break;
                  case 5:
                    reader.readMessage(message.chain_config, () => message.chain_config = ChainConfig.deserialize(reader));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Params.deserialize(bytes);
            }
          }
          v12.Params = Params;
          class ChainConfig extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("homestead_block" in data && data.homestead_block != void 0) {
                  this.homestead_block = data.homestead_block;
                }
                if ("dao_fork_block" in data && data.dao_fork_block != void 0) {
                  this.dao_fork_block = data.dao_fork_block;
                }
                if ("dao_fork_support" in data && data.dao_fork_support != void 0) {
                  this.dao_fork_support = data.dao_fork_support;
                }
                if ("eip150_block" in data && data.eip150_block != void 0) {
                  this.eip150_block = data.eip150_block;
                }
                if ("eip150_hash" in data && data.eip150_hash != void 0) {
                  this.eip150_hash = data.eip150_hash;
                }
                if ("eip155_block" in data && data.eip155_block != void 0) {
                  this.eip155_block = data.eip155_block;
                }
                if ("eip158_block" in data && data.eip158_block != void 0) {
                  this.eip158_block = data.eip158_block;
                }
                if ("byzantium_block" in data && data.byzantium_block != void 0) {
                  this.byzantium_block = data.byzantium_block;
                }
                if ("constantinople_block" in data && data.constantinople_block != void 0) {
                  this.constantinople_block = data.constantinople_block;
                }
                if ("petersburg_block" in data && data.petersburg_block != void 0) {
                  this.petersburg_block = data.petersburg_block;
                }
                if ("istanbul_block" in data && data.istanbul_block != void 0) {
                  this.istanbul_block = data.istanbul_block;
                }
                if ("muir_glacier_block" in data && data.muir_glacier_block != void 0) {
                  this.muir_glacier_block = data.muir_glacier_block;
                }
                if ("berlin_block" in data && data.berlin_block != void 0) {
                  this.berlin_block = data.berlin_block;
                }
                if ("london_block" in data && data.london_block != void 0) {
                  this.london_block = data.london_block;
                }
                if ("arrow_glacier_block" in data && data.arrow_glacier_block != void 0) {
                  this.arrow_glacier_block = data.arrow_glacier_block;
                }
                if ("merge_fork_block" in data && data.merge_fork_block != void 0) {
                  this.merge_fork_block = data.merge_fork_block;
                }
              }
            }
            get homestead_block() {
              return pb_1.Message.getField(this, 1);
            }
            set homestead_block(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get dao_fork_block() {
              return pb_1.Message.getField(this, 2);
            }
            set dao_fork_block(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get dao_fork_support() {
              return pb_1.Message.getField(this, 3);
            }
            set dao_fork_support(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get eip150_block() {
              return pb_1.Message.getField(this, 4);
            }
            set eip150_block(value) {
              pb_1.Message.setField(this, 4, value);
            }
            get eip150_hash() {
              return pb_1.Message.getField(this, 5);
            }
            set eip150_hash(value) {
              pb_1.Message.setField(this, 5, value);
            }
            get eip155_block() {
              return pb_1.Message.getField(this, 6);
            }
            set eip155_block(value) {
              pb_1.Message.setField(this, 6, value);
            }
            get eip158_block() {
              return pb_1.Message.getField(this, 7);
            }
            set eip158_block(value) {
              pb_1.Message.setField(this, 7, value);
            }
            get byzantium_block() {
              return pb_1.Message.getField(this, 8);
            }
            set byzantium_block(value) {
              pb_1.Message.setField(this, 8, value);
            }
            get constantinople_block() {
              return pb_1.Message.getField(this, 9);
            }
            set constantinople_block(value) {
              pb_1.Message.setField(this, 9, value);
            }
            get petersburg_block() {
              return pb_1.Message.getField(this, 10);
            }
            set petersburg_block(value) {
              pb_1.Message.setField(this, 10, value);
            }
            get istanbul_block() {
              return pb_1.Message.getField(this, 11);
            }
            set istanbul_block(value) {
              pb_1.Message.setField(this, 11, value);
            }
            get muir_glacier_block() {
              return pb_1.Message.getField(this, 12);
            }
            set muir_glacier_block(value) {
              pb_1.Message.setField(this, 12, value);
            }
            get berlin_block() {
              return pb_1.Message.getField(this, 13);
            }
            set berlin_block(value) {
              pb_1.Message.setField(this, 13, value);
            }
            get london_block() {
              return pb_1.Message.getField(this, 17);
            }
            set london_block(value) {
              pb_1.Message.setField(this, 17, value);
            }
            get arrow_glacier_block() {
              return pb_1.Message.getField(this, 18);
            }
            set arrow_glacier_block(value) {
              pb_1.Message.setField(this, 18, value);
            }
            get merge_fork_block() {
              return pb_1.Message.getField(this, 19);
            }
            set merge_fork_block(value) {
              pb_1.Message.setField(this, 19, value);
            }
            static fromObject(data) {
              const message = new ChainConfig({});
              if (data.homestead_block != null) {
                message.homestead_block = data.homestead_block;
              }
              if (data.dao_fork_block != null) {
                message.dao_fork_block = data.dao_fork_block;
              }
              if (data.dao_fork_support != null) {
                message.dao_fork_support = data.dao_fork_support;
              }
              if (data.eip150_block != null) {
                message.eip150_block = data.eip150_block;
              }
              if (data.eip150_hash != null) {
                message.eip150_hash = data.eip150_hash;
              }
              if (data.eip155_block != null) {
                message.eip155_block = data.eip155_block;
              }
              if (data.eip158_block != null) {
                message.eip158_block = data.eip158_block;
              }
              if (data.byzantium_block != null) {
                message.byzantium_block = data.byzantium_block;
              }
              if (data.constantinople_block != null) {
                message.constantinople_block = data.constantinople_block;
              }
              if (data.petersburg_block != null) {
                message.petersburg_block = data.petersburg_block;
              }
              if (data.istanbul_block != null) {
                message.istanbul_block = data.istanbul_block;
              }
              if (data.muir_glacier_block != null) {
                message.muir_glacier_block = data.muir_glacier_block;
              }
              if (data.berlin_block != null) {
                message.berlin_block = data.berlin_block;
              }
              if (data.london_block != null) {
                message.london_block = data.london_block;
              }
              if (data.arrow_glacier_block != null) {
                message.arrow_glacier_block = data.arrow_glacier_block;
              }
              if (data.merge_fork_block != null) {
                message.merge_fork_block = data.merge_fork_block;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.homestead_block != null) {
                data.homestead_block = this.homestead_block;
              }
              if (this.dao_fork_block != null) {
                data.dao_fork_block = this.dao_fork_block;
              }
              if (this.dao_fork_support != null) {
                data.dao_fork_support = this.dao_fork_support;
              }
              if (this.eip150_block != null) {
                data.eip150_block = this.eip150_block;
              }
              if (this.eip150_hash != null) {
                data.eip150_hash = this.eip150_hash;
              }
              if (this.eip155_block != null) {
                data.eip155_block = this.eip155_block;
              }
              if (this.eip158_block != null) {
                data.eip158_block = this.eip158_block;
              }
              if (this.byzantium_block != null) {
                data.byzantium_block = this.byzantium_block;
              }
              if (this.constantinople_block != null) {
                data.constantinople_block = this.constantinople_block;
              }
              if (this.petersburg_block != null) {
                data.petersburg_block = this.petersburg_block;
              }
              if (this.istanbul_block != null) {
                data.istanbul_block = this.istanbul_block;
              }
              if (this.muir_glacier_block != null) {
                data.muir_glacier_block = this.muir_glacier_block;
              }
              if (this.berlin_block != null) {
                data.berlin_block = this.berlin_block;
              }
              if (this.london_block != null) {
                data.london_block = this.london_block;
              }
              if (this.arrow_glacier_block != null) {
                data.arrow_glacier_block = this.arrow_glacier_block;
              }
              if (this.merge_fork_block != null) {
                data.merge_fork_block = this.merge_fork_block;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.homestead_block === "string" && this.homestead_block.length)
                writer.writeString(1, this.homestead_block);
              if (typeof this.dao_fork_block === "string" && this.dao_fork_block.length)
                writer.writeString(2, this.dao_fork_block);
              if (this.dao_fork_support !== void 0)
                writer.writeBool(3, this.dao_fork_support);
              if (typeof this.eip150_block === "string" && this.eip150_block.length)
                writer.writeString(4, this.eip150_block);
              if (typeof this.eip150_hash === "string" && this.eip150_hash.length)
                writer.writeString(5, this.eip150_hash);
              if (typeof this.eip155_block === "string" && this.eip155_block.length)
                writer.writeString(6, this.eip155_block);
              if (typeof this.eip158_block === "string" && this.eip158_block.length)
                writer.writeString(7, this.eip158_block);
              if (typeof this.byzantium_block === "string" && this.byzantium_block.length)
                writer.writeString(8, this.byzantium_block);
              if (typeof this.constantinople_block === "string" && this.constantinople_block.length)
                writer.writeString(9, this.constantinople_block);
              if (typeof this.petersburg_block === "string" && this.petersburg_block.length)
                writer.writeString(10, this.petersburg_block);
              if (typeof this.istanbul_block === "string" && this.istanbul_block.length)
                writer.writeString(11, this.istanbul_block);
              if (typeof this.muir_glacier_block === "string" && this.muir_glacier_block.length)
                writer.writeString(12, this.muir_glacier_block);
              if (typeof this.berlin_block === "string" && this.berlin_block.length)
                writer.writeString(13, this.berlin_block);
              if (typeof this.london_block === "string" && this.london_block.length)
                writer.writeString(17, this.london_block);
              if (typeof this.arrow_glacier_block === "string" && this.arrow_glacier_block.length)
                writer.writeString(18, this.arrow_glacier_block);
              if (typeof this.merge_fork_block === "string" && this.merge_fork_block.length)
                writer.writeString(19, this.merge_fork_block);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChainConfig();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.homestead_block = reader.readString();
                    break;
                  case 2:
                    message.dao_fork_block = reader.readString();
                    break;
                  case 3:
                    message.dao_fork_support = reader.readBool();
                    break;
                  case 4:
                    message.eip150_block = reader.readString();
                    break;
                  case 5:
                    message.eip150_hash = reader.readString();
                    break;
                  case 6:
                    message.eip155_block = reader.readString();
                    break;
                  case 7:
                    message.eip158_block = reader.readString();
                    break;
                  case 8:
                    message.byzantium_block = reader.readString();
                    break;
                  case 9:
                    message.constantinople_block = reader.readString();
                    break;
                  case 10:
                    message.petersburg_block = reader.readString();
                    break;
                  case 11:
                    message.istanbul_block = reader.readString();
                    break;
                  case 12:
                    message.muir_glacier_block = reader.readString();
                    break;
                  case 13:
                    message.berlin_block = reader.readString();
                    break;
                  case 17:
                    message.london_block = reader.readString();
                    break;
                  case 18:
                    message.arrow_glacier_block = reader.readString();
                    break;
                  case 19:
                    message.merge_fork_block = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return ChainConfig.deserialize(bytes);
            }
          }
          v12.ChainConfig = ChainConfig;
          class State extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != void 0) {
                  this.key = data.key;
                }
                if ("value" in data && data.value != void 0) {
                  this.value = data.value;
                }
              }
            }
            get key() {
              return pb_1.Message.getField(this, 1);
            }
            set key(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get value() {
              return pb_1.Message.getField(this, 2);
            }
            set value(value) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
              const message = new State({});
              if (data.key != null) {
                message.key = data.key;
              }
              if (data.value != null) {
                message.value = data.value;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.key != null) {
                data.key = this.key;
              }
              if (this.value != null) {
                data.value = this.value;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.key === "string" && this.key.length)
                writer.writeString(1, this.key);
              if (typeof this.value === "string" && this.value.length)
                writer.writeString(2, this.value);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new State();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.key = reader.readString();
                    break;
                  case 2:
                    message.value = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return State.deserialize(bytes);
            }
          }
          v12.State = State;
          class TransactionLogs extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("hash" in data && data.hash != void 0) {
                  this.hash = data.hash;
                }
                if ("logs" in data && data.logs != void 0) {
                  this.logs = data.logs;
                }
              }
            }
            get hash() {
              return pb_1.Message.getField(this, 1);
            }
            set hash(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get logs() {
              return pb_1.Message.getRepeatedWrapperField(this, Log, 2);
            }
            set logs(value) {
              pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data) {
              const message = new TransactionLogs({});
              if (data.hash != null) {
                message.hash = data.hash;
              }
              if (data.logs != null) {
                message.logs = data.logs.map((item) => Log.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.hash != null) {
                data.hash = this.hash;
              }
              if (this.logs != null) {
                data.logs = this.logs.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.hash === "string" && this.hash.length)
                writer.writeString(1, this.hash);
              if (this.logs !== void 0)
                writer.writeRepeatedMessage(2, this.logs, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionLogs();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.hash = reader.readString();
                    break;
                  case 2:
                    reader.readMessage(message.logs, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Log.deserialize(reader), Log));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return TransactionLogs.deserialize(bytes);
            }
          }
          v12.TransactionLogs = TransactionLogs;
          class Log extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != void 0) {
                  this.address = data.address;
                }
                if ("topics" in data && data.topics != void 0) {
                  this.topics = data.topics;
                }
                if ("data" in data && data.data != void 0) {
                  this.data = data.data;
                }
                if ("block_number" in data && data.block_number != void 0) {
                  this.block_number = data.block_number;
                }
                if ("tx_hash" in data && data.tx_hash != void 0) {
                  this.tx_hash = data.tx_hash;
                }
                if ("tx_index" in data && data.tx_index != void 0) {
                  this.tx_index = data.tx_index;
                }
                if ("block_hash" in data && data.block_hash != void 0) {
                  this.block_hash = data.block_hash;
                }
                if ("index" in data && data.index != void 0) {
                  this.index = data.index;
                }
                if ("removed" in data && data.removed != void 0) {
                  this.removed = data.removed;
                }
              }
            }
            get address() {
              return pb_1.Message.getField(this, 1);
            }
            set address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get topics() {
              return pb_1.Message.getField(this, 2);
            }
            set topics(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get data() {
              return pb_1.Message.getField(this, 3);
            }
            set data(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get block_number() {
              return pb_1.Message.getField(this, 4);
            }
            set block_number(value) {
              pb_1.Message.setField(this, 4, value);
            }
            get tx_hash() {
              return pb_1.Message.getField(this, 5);
            }
            set tx_hash(value) {
              pb_1.Message.setField(this, 5, value);
            }
            get tx_index() {
              return pb_1.Message.getField(this, 6);
            }
            set tx_index(value) {
              pb_1.Message.setField(this, 6, value);
            }
            get block_hash() {
              return pb_1.Message.getField(this, 7);
            }
            set block_hash(value) {
              pb_1.Message.setField(this, 7, value);
            }
            get index() {
              return pb_1.Message.getField(this, 8);
            }
            set index(value) {
              pb_1.Message.setField(this, 8, value);
            }
            get removed() {
              return pb_1.Message.getField(this, 9);
            }
            set removed(value) {
              pb_1.Message.setField(this, 9, value);
            }
            static fromObject(data) {
              const message = new Log({});
              if (data.address != null) {
                message.address = data.address;
              }
              if (data.topics != null) {
                message.topics = data.topics;
              }
              if (data.data != null) {
                message.data = data.data;
              }
              if (data.block_number != null) {
                message.block_number = data.block_number;
              }
              if (data.tx_hash != null) {
                message.tx_hash = data.tx_hash;
              }
              if (data.tx_index != null) {
                message.tx_index = data.tx_index;
              }
              if (data.block_hash != null) {
                message.block_hash = data.block_hash;
              }
              if (data.index != null) {
                message.index = data.index;
              }
              if (data.removed != null) {
                message.removed = data.removed;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.address != null) {
                data.address = this.address;
              }
              if (this.topics != null) {
                data.topics = this.topics;
              }
              if (this.data != null) {
                data.data = this.data;
              }
              if (this.block_number != null) {
                data.block_number = this.block_number;
              }
              if (this.tx_hash != null) {
                data.tx_hash = this.tx_hash;
              }
              if (this.tx_index != null) {
                data.tx_index = this.tx_index;
              }
              if (this.block_hash != null) {
                data.block_hash = this.block_hash;
              }
              if (this.index != null) {
                data.index = this.index;
              }
              if (this.removed != null) {
                data.removed = this.removed;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.address === "string" && this.address.length)
                writer.writeString(1, this.address);
              if (this.topics !== void 0)
                writer.writeRepeatedString(2, this.topics);
              if (this.data !== void 0)
                writer.writeBytes(3, this.data);
              if (this.block_number !== void 0)
                writer.writeUint64(4, this.block_number);
              if (typeof this.tx_hash === "string" && this.tx_hash.length)
                writer.writeString(5, this.tx_hash);
              if (this.tx_index !== void 0)
                writer.writeUint64(6, this.tx_index);
              if (typeof this.block_hash === "string" && this.block_hash.length)
                writer.writeString(7, this.block_hash);
              if (this.index !== void 0)
                writer.writeUint64(8, this.index);
              if (this.removed !== void 0)
                writer.writeBool(9, this.removed);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Log();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.address = reader.readString();
                    break;
                  case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                    break;
                  case 3:
                    message.data = reader.readBytes();
                    break;
                  case 4:
                    message.block_number = reader.readUint64();
                    break;
                  case 5:
                    message.tx_hash = reader.readString();
                    break;
                  case 6:
                    message.tx_index = reader.readUint64();
                    break;
                  case 7:
                    message.block_hash = reader.readString();
                    break;
                  case 8:
                    message.index = reader.readUint64();
                    break;
                  case 9:
                    message.removed = reader.readBool();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Log.deserialize(bytes);
            }
          }
          v12.Log = Log;
          class TxResult extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_address" in data && data.contract_address != void 0) {
                  this.contract_address = data.contract_address;
                }
                if ("bloom" in data && data.bloom != void 0) {
                  this.bloom = data.bloom;
                }
                if ("tx_logs" in data && data.tx_logs != void 0) {
                  this.tx_logs = data.tx_logs;
                }
                if ("ret" in data && data.ret != void 0) {
                  this.ret = data.ret;
                }
                if ("reverted" in data && data.reverted != void 0) {
                  this.reverted = data.reverted;
                }
                if ("gas_used" in data && data.gas_used != void 0) {
                  this.gas_used = data.gas_used;
                }
              }
            }
            get contract_address() {
              return pb_1.Message.getField(this, 1);
            }
            set contract_address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get bloom() {
              return pb_1.Message.getField(this, 2);
            }
            set bloom(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get tx_logs() {
              return pb_1.Message.getWrapperField(this, TransactionLogs, 3);
            }
            set tx_logs(value) {
              pb_1.Message.setWrapperField(this, 3, value);
            }
            get ret() {
              return pb_1.Message.getField(this, 4);
            }
            set ret(value) {
              pb_1.Message.setField(this, 4, value);
            }
            get reverted() {
              return pb_1.Message.getField(this, 5);
            }
            set reverted(value) {
              pb_1.Message.setField(this, 5, value);
            }
            get gas_used() {
              return pb_1.Message.getField(this, 6);
            }
            set gas_used(value) {
              pb_1.Message.setField(this, 6, value);
            }
            static fromObject(data) {
              const message = new TxResult({});
              if (data.contract_address != null) {
                message.contract_address = data.contract_address;
              }
              if (data.bloom != null) {
                message.bloom = data.bloom;
              }
              if (data.tx_logs != null) {
                message.tx_logs = TransactionLogs.fromObject(data.tx_logs);
              }
              if (data.ret != null) {
                message.ret = data.ret;
              }
              if (data.reverted != null) {
                message.reverted = data.reverted;
              }
              if (data.gas_used != null) {
                message.gas_used = data.gas_used;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.contract_address != null) {
                data.contract_address = this.contract_address;
              }
              if (this.bloom != null) {
                data.bloom = this.bloom;
              }
              if (this.tx_logs != null) {
                data.tx_logs = this.tx_logs.toObject();
              }
              if (this.ret != null) {
                data.ret = this.ret;
              }
              if (this.reverted != null) {
                data.reverted = this.reverted;
              }
              if (this.gas_used != null) {
                data.gas_used = this.gas_used;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.contract_address === "string" && this.contract_address.length)
                writer.writeString(1, this.contract_address);
              if (this.bloom !== void 0)
                writer.writeBytes(2, this.bloom);
              if (this.tx_logs !== void 0)
                writer.writeMessage(3, this.tx_logs, () => this.tx_logs.serialize(writer));
              if (this.ret !== void 0)
                writer.writeBytes(4, this.ret);
              if (this.reverted !== void 0)
                writer.writeBool(5, this.reverted);
              if (this.gas_used !== void 0)
                writer.writeUint64(6, this.gas_used);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TxResult();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.contract_address = reader.readString();
                    break;
                  case 2:
                    message.bloom = reader.readBytes();
                    break;
                  case 3:
                    reader.readMessage(message.tx_logs, () => message.tx_logs = TransactionLogs.deserialize(reader));
                    break;
                  case 4:
                    message.ret = reader.readBytes();
                    break;
                  case 5:
                    message.reverted = reader.readBool();
                    break;
                  case 6:
                    message.gas_used = reader.readUint64();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return TxResult.deserialize(bytes);
            }
          }
          v12.TxResult = TxResult;
          class AccessTuple extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != void 0) {
                  this.address = data.address;
                }
                if ("storage_keys" in data && data.storage_keys != void 0) {
                  this.storage_keys = data.storage_keys;
                }
              }
            }
            get address() {
              return pb_1.Message.getField(this, 1);
            }
            set address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get storage_keys() {
              return pb_1.Message.getField(this, 2);
            }
            set storage_keys(value) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
              const message = new AccessTuple({});
              if (data.address != null) {
                message.address = data.address;
              }
              if (data.storage_keys != null) {
                message.storage_keys = data.storage_keys;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.address != null) {
                data.address = this.address;
              }
              if (this.storage_keys != null) {
                data.storage_keys = this.storage_keys;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.address === "string" && this.address.length)
                writer.writeString(1, this.address);
              if (this.storage_keys !== void 0)
                writer.writeRepeatedString(2, this.storage_keys);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccessTuple();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.address = reader.readString();
                    break;
                  case 2:
                    pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return AccessTuple.deserialize(bytes);
            }
          }
          v12.AccessTuple = AccessTuple;
          class TraceConfig extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("tracer" in data && data.tracer != void 0) {
                  this.tracer = data.tracer;
                }
                if ("timeout" in data && data.timeout != void 0) {
                  this.timeout = data.timeout;
                }
                if ("reexec" in data && data.reexec != void 0) {
                  this.reexec = data.reexec;
                }
                if ("disable_stack" in data && data.disable_stack != void 0) {
                  this.disable_stack = data.disable_stack;
                }
                if ("disable_storage" in data && data.disable_storage != void 0) {
                  this.disable_storage = data.disable_storage;
                }
                if ("debug" in data && data.debug != void 0) {
                  this.debug = data.debug;
                }
                if ("limit" in data && data.limit != void 0) {
                  this.limit = data.limit;
                }
                if ("overrides" in data && data.overrides != void 0) {
                  this.overrides = data.overrides;
                }
                if ("enable_memory" in data && data.enable_memory != void 0) {
                  this.enable_memory = data.enable_memory;
                }
                if ("enable_return_data" in data && data.enable_return_data != void 0) {
                  this.enable_return_data = data.enable_return_data;
                }
              }
            }
            get tracer() {
              return pb_1.Message.getField(this, 1);
            }
            set tracer(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get timeout() {
              return pb_1.Message.getField(this, 2);
            }
            set timeout(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get reexec() {
              return pb_1.Message.getField(this, 3);
            }
            set reexec(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get disable_stack() {
              return pb_1.Message.getField(this, 5);
            }
            set disable_stack(value) {
              pb_1.Message.setField(this, 5, value);
            }
            get disable_storage() {
              return pb_1.Message.getField(this, 6);
            }
            set disable_storage(value) {
              pb_1.Message.setField(this, 6, value);
            }
            get debug() {
              return pb_1.Message.getField(this, 8);
            }
            set debug(value) {
              pb_1.Message.setField(this, 8, value);
            }
            get limit() {
              return pb_1.Message.getField(this, 9);
            }
            set limit(value) {
              pb_1.Message.setField(this, 9, value);
            }
            get overrides() {
              return pb_1.Message.getWrapperField(this, ChainConfig, 10);
            }
            set overrides(value) {
              pb_1.Message.setWrapperField(this, 10, value);
            }
            get enable_memory() {
              return pb_1.Message.getField(this, 11);
            }
            set enable_memory(value) {
              pb_1.Message.setField(this, 11, value);
            }
            get enable_return_data() {
              return pb_1.Message.getField(this, 12);
            }
            set enable_return_data(value) {
              pb_1.Message.setField(this, 12, value);
            }
            static fromObject(data) {
              const message = new TraceConfig({});
              if (data.tracer != null) {
                message.tracer = data.tracer;
              }
              if (data.timeout != null) {
                message.timeout = data.timeout;
              }
              if (data.reexec != null) {
                message.reexec = data.reexec;
              }
              if (data.disable_stack != null) {
                message.disable_stack = data.disable_stack;
              }
              if (data.disable_storage != null) {
                message.disable_storage = data.disable_storage;
              }
              if (data.debug != null) {
                message.debug = data.debug;
              }
              if (data.limit != null) {
                message.limit = data.limit;
              }
              if (data.overrides != null) {
                message.overrides = ChainConfig.fromObject(data.overrides);
              }
              if (data.enable_memory != null) {
                message.enable_memory = data.enable_memory;
              }
              if (data.enable_return_data != null) {
                message.enable_return_data = data.enable_return_data;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.tracer != null) {
                data.tracer = this.tracer;
              }
              if (this.timeout != null) {
                data.timeout = this.timeout;
              }
              if (this.reexec != null) {
                data.reexec = this.reexec;
              }
              if (this.disable_stack != null) {
                data.disable_stack = this.disable_stack;
              }
              if (this.disable_storage != null) {
                data.disable_storage = this.disable_storage;
              }
              if (this.debug != null) {
                data.debug = this.debug;
              }
              if (this.limit != null) {
                data.limit = this.limit;
              }
              if (this.overrides != null) {
                data.overrides = this.overrides.toObject();
              }
              if (this.enable_memory != null) {
                data.enable_memory = this.enable_memory;
              }
              if (this.enable_return_data != null) {
                data.enable_return_data = this.enable_return_data;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.tracer === "string" && this.tracer.length)
                writer.writeString(1, this.tracer);
              if (typeof this.timeout === "string" && this.timeout.length)
                writer.writeString(2, this.timeout);
              if (this.reexec !== void 0)
                writer.writeUint64(3, this.reexec);
              if (this.disable_stack !== void 0)
                writer.writeBool(5, this.disable_stack);
              if (this.disable_storage !== void 0)
                writer.writeBool(6, this.disable_storage);
              if (this.debug !== void 0)
                writer.writeBool(8, this.debug);
              if (this.limit !== void 0)
                writer.writeInt32(9, this.limit);
              if (this.overrides !== void 0)
                writer.writeMessage(10, this.overrides, () => this.overrides.serialize(writer));
              if (this.enable_memory !== void 0)
                writer.writeBool(11, this.enable_memory);
              if (this.enable_return_data !== void 0)
                writer.writeBool(12, this.enable_return_data);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TraceConfig();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.tracer = reader.readString();
                    break;
                  case 2:
                    message.timeout = reader.readString();
                    break;
                  case 3:
                    message.reexec = reader.readUint64();
                    break;
                  case 5:
                    message.disable_stack = reader.readBool();
                    break;
                  case 6:
                    message.disable_storage = reader.readBool();
                    break;
                  case 8:
                    message.debug = reader.readBool();
                    break;
                  case 9:
                    message.limit = reader.readInt32();
                    break;
                  case 10:
                    reader.readMessage(message.overrides, () => message.overrides = ChainConfig.deserialize(reader));
                    break;
                  case 11:
                    message.enable_memory = reader.readBool();
                    break;
                  case 12:
                    message.enable_return_data = reader.readBool();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return TraceConfig.deserialize(bytes);
            }
          }
          v12.TraceConfig = TraceConfig;
        })(v1 = evm2.v1 || (evm2.v1 = {}));
      })(evm = ethermint2.evm || (ethermint2.evm = {}));
    })(ethermint = exports.ethermint || (exports.ethermint = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/ethermint/evm/v1/tx.js
var require_tx3 = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/ethermint/evm/v1/tx.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ethermint = void 0;
    var dependency_3 = __importStar(require_any());
    var dependency_5 = __importStar(require_evm());
    var pb_1 = __importStar(require_google_protobuf());
    var ethermint;
    (function(ethermint2) {
      var evm;
      (function(evm2) {
        var v1;
        (function(v12) {
          class MsgEthereumTx extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != void 0) {
                  this.data = data.data;
                }
                if ("size" in data && data.size != void 0) {
                  this.size = data.size;
                }
                if ("hash" in data && data.hash != void 0) {
                  this.hash = data.hash;
                }
                if ("from" in data && data.from != void 0) {
                  this.from = data.from;
                }
              }
            }
            get data() {
              return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Any, 1);
            }
            set data(value) {
              pb_1.Message.setWrapperField(this, 1, value);
            }
            get size() {
              return pb_1.Message.getField(this, 2);
            }
            set size(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get hash() {
              return pb_1.Message.getField(this, 3);
            }
            set hash(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get from() {
              return pb_1.Message.getField(this, 4);
            }
            set from(value) {
              pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data) {
              const message = new MsgEthereumTx({});
              if (data.data != null) {
                message.data = dependency_3.google.protobuf.Any.fromObject(data.data);
              }
              if (data.size != null) {
                message.size = data.size;
              }
              if (data.hash != null) {
                message.hash = data.hash;
              }
              if (data.from != null) {
                message.from = data.from;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.data != null) {
                data.data = this.data.toObject();
              }
              if (this.size != null) {
                data.size = this.size;
              }
              if (this.hash != null) {
                data.hash = this.hash;
              }
              if (this.from != null) {
                data.from = this.from;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.data !== void 0)
                writer.writeMessage(1, this.data, () => this.data.serialize(writer));
              if (this.size !== void 0)
                writer.writeDouble(2, this.size);
              if (typeof this.hash === "string" && this.hash.length)
                writer.writeString(3, this.hash);
              if (typeof this.from === "string" && this.from.length)
                writer.writeString(4, this.from);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgEthereumTx();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.data, () => message.data = dependency_3.google.protobuf.Any.deserialize(reader));
                    break;
                  case 2:
                    message.size = reader.readDouble();
                    break;
                  case 3:
                    message.hash = reader.readString();
                    break;
                  case 4:
                    message.from = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgEthereumTx.deserialize(bytes);
            }
          }
          v12.MsgEthereumTx = MsgEthereumTx;
          class LegacyTx extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("nonce" in data && data.nonce != void 0) {
                  this.nonce = data.nonce;
                }
                if ("gas_price" in data && data.gas_price != void 0) {
                  this.gas_price = data.gas_price;
                }
                if ("gas" in data && data.gas != void 0) {
                  this.gas = data.gas;
                }
                if ("to" in data && data.to != void 0) {
                  this.to = data.to;
                }
                if ("value" in data && data.value != void 0) {
                  this.value = data.value;
                }
                if ("data" in data && data.data != void 0) {
                  this.data = data.data;
                }
                if ("v" in data && data.v != void 0) {
                  this.v = data.v;
                }
                if ("r" in data && data.r != void 0) {
                  this.r = data.r;
                }
                if ("s" in data && data.s != void 0) {
                  this.s = data.s;
                }
              }
            }
            get nonce() {
              return pb_1.Message.getField(this, 1);
            }
            set nonce(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get gas_price() {
              return pb_1.Message.getField(this, 2);
            }
            set gas_price(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get gas() {
              return pb_1.Message.getField(this, 3);
            }
            set gas(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get to() {
              return pb_1.Message.getField(this, 4);
            }
            set to(value) {
              pb_1.Message.setField(this, 4, value);
            }
            get value() {
              return pb_1.Message.getField(this, 5);
            }
            set value(value) {
              pb_1.Message.setField(this, 5, value);
            }
            get data() {
              return pb_1.Message.getField(this, 6);
            }
            set data(value) {
              pb_1.Message.setField(this, 6, value);
            }
            get v() {
              return pb_1.Message.getField(this, 7);
            }
            set v(value) {
              pb_1.Message.setField(this, 7, value);
            }
            get r() {
              return pb_1.Message.getField(this, 8);
            }
            set r(value) {
              pb_1.Message.setField(this, 8, value);
            }
            get s() {
              return pb_1.Message.getField(this, 9);
            }
            set s(value) {
              pb_1.Message.setField(this, 9, value);
            }
            static fromObject(data) {
              const message = new LegacyTx({});
              if (data.nonce != null) {
                message.nonce = data.nonce;
              }
              if (data.gas_price != null) {
                message.gas_price = data.gas_price;
              }
              if (data.gas != null) {
                message.gas = data.gas;
              }
              if (data.to != null) {
                message.to = data.to;
              }
              if (data.value != null) {
                message.value = data.value;
              }
              if (data.data != null) {
                message.data = data.data;
              }
              if (data.v != null) {
                message.v = data.v;
              }
              if (data.r != null) {
                message.r = data.r;
              }
              if (data.s != null) {
                message.s = data.s;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.nonce != null) {
                data.nonce = this.nonce;
              }
              if (this.gas_price != null) {
                data.gas_price = this.gas_price;
              }
              if (this.gas != null) {
                data.gas = this.gas;
              }
              if (this.to != null) {
                data.to = this.to;
              }
              if (this.value != null) {
                data.value = this.value;
              }
              if (this.data != null) {
                data.data = this.data;
              }
              if (this.v != null) {
                data.v = this.v;
              }
              if (this.r != null) {
                data.r = this.r;
              }
              if (this.s != null) {
                data.s = this.s;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.nonce !== void 0)
                writer.writeUint64(1, this.nonce);
              if (typeof this.gas_price === "string" && this.gas_price.length)
                writer.writeString(2, this.gas_price);
              if (this.gas !== void 0)
                writer.writeUint64(3, this.gas);
              if (typeof this.to === "string" && this.to.length)
                writer.writeString(4, this.to);
              if (typeof this.value === "string" && this.value.length)
                writer.writeString(5, this.value);
              if (this.data !== void 0)
                writer.writeBytes(6, this.data);
              if (this.v !== void 0)
                writer.writeBytes(7, this.v);
              if (this.r !== void 0)
                writer.writeBytes(8, this.r);
              if (this.s !== void 0)
                writer.writeBytes(9, this.s);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LegacyTx();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.nonce = reader.readUint64();
                    break;
                  case 2:
                    message.gas_price = reader.readString();
                    break;
                  case 3:
                    message.gas = reader.readUint64();
                    break;
                  case 4:
                    message.to = reader.readString();
                    break;
                  case 5:
                    message.value = reader.readString();
                    break;
                  case 6:
                    message.data = reader.readBytes();
                    break;
                  case 7:
                    message.v = reader.readBytes();
                    break;
                  case 8:
                    message.r = reader.readBytes();
                    break;
                  case 9:
                    message.s = reader.readBytes();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return LegacyTx.deserialize(bytes);
            }
          }
          v12.LegacyTx = LegacyTx;
          class AccessListTx extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("chain_id" in data && data.chain_id != void 0) {
                  this.chain_id = data.chain_id;
                }
                if ("nonce" in data && data.nonce != void 0) {
                  this.nonce = data.nonce;
                }
                if ("gas_price" in data && data.gas_price != void 0) {
                  this.gas_price = data.gas_price;
                }
                if ("gas" in data && data.gas != void 0) {
                  this.gas = data.gas;
                }
                if ("to" in data && data.to != void 0) {
                  this.to = data.to;
                }
                if ("value" in data && data.value != void 0) {
                  this.value = data.value;
                }
                if ("data" in data && data.data != void 0) {
                  this.data = data.data;
                }
                if ("accesses" in data && data.accesses != void 0) {
                  this.accesses = data.accesses;
                }
                if ("v" in data && data.v != void 0) {
                  this.v = data.v;
                }
                if ("r" in data && data.r != void 0) {
                  this.r = data.r;
                }
                if ("s" in data && data.s != void 0) {
                  this.s = data.s;
                }
              }
            }
            get chain_id() {
              return pb_1.Message.getField(this, 1);
            }
            set chain_id(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get nonce() {
              return pb_1.Message.getField(this, 2);
            }
            set nonce(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get gas_price() {
              return pb_1.Message.getField(this, 3);
            }
            set gas_price(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get gas() {
              return pb_1.Message.getField(this, 4);
            }
            set gas(value) {
              pb_1.Message.setField(this, 4, value);
            }
            get to() {
              return pb_1.Message.getField(this, 5);
            }
            set to(value) {
              pb_1.Message.setField(this, 5, value);
            }
            get value() {
              return pb_1.Message.getField(this, 6);
            }
            set value(value) {
              pb_1.Message.setField(this, 6, value);
            }
            get data() {
              return pb_1.Message.getField(this, 7);
            }
            set data(value) {
              pb_1.Message.setField(this, 7, value);
            }
            get accesses() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_5.ethermint.evm.v1.AccessTuple, 8);
            }
            set accesses(value) {
              pb_1.Message.setRepeatedWrapperField(this, 8, value);
            }
            get v() {
              return pb_1.Message.getField(this, 9);
            }
            set v(value) {
              pb_1.Message.setField(this, 9, value);
            }
            get r() {
              return pb_1.Message.getField(this, 10);
            }
            set r(value) {
              pb_1.Message.setField(this, 10, value);
            }
            get s() {
              return pb_1.Message.getField(this, 11);
            }
            set s(value) {
              pb_1.Message.setField(this, 11, value);
            }
            static fromObject(data) {
              const message = new AccessListTx({});
              if (data.chain_id != null) {
                message.chain_id = data.chain_id;
              }
              if (data.nonce != null) {
                message.nonce = data.nonce;
              }
              if (data.gas_price != null) {
                message.gas_price = data.gas_price;
              }
              if (data.gas != null) {
                message.gas = data.gas;
              }
              if (data.to != null) {
                message.to = data.to;
              }
              if (data.value != null) {
                message.value = data.value;
              }
              if (data.data != null) {
                message.data = data.data;
              }
              if (data.accesses != null) {
                message.accesses = data.accesses.map((item) => dependency_5.ethermint.evm.v1.AccessTuple.fromObject(item));
              }
              if (data.v != null) {
                message.v = data.v;
              }
              if (data.r != null) {
                message.r = data.r;
              }
              if (data.s != null) {
                message.s = data.s;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.chain_id != null) {
                data.chain_id = this.chain_id;
              }
              if (this.nonce != null) {
                data.nonce = this.nonce;
              }
              if (this.gas_price != null) {
                data.gas_price = this.gas_price;
              }
              if (this.gas != null) {
                data.gas = this.gas;
              }
              if (this.to != null) {
                data.to = this.to;
              }
              if (this.value != null) {
                data.value = this.value;
              }
              if (this.data != null) {
                data.data = this.data;
              }
              if (this.accesses != null) {
                data.accesses = this.accesses.map((item) => item.toObject());
              }
              if (this.v != null) {
                data.v = this.v;
              }
              if (this.r != null) {
                data.r = this.r;
              }
              if (this.s != null) {
                data.s = this.s;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.chain_id === "string" && this.chain_id.length)
                writer.writeString(1, this.chain_id);
              if (this.nonce !== void 0)
                writer.writeUint64(2, this.nonce);
              if (typeof this.gas_price === "string" && this.gas_price.length)
                writer.writeString(3, this.gas_price);
              if (this.gas !== void 0)
                writer.writeUint64(4, this.gas);
              if (typeof this.to === "string" && this.to.length)
                writer.writeString(5, this.to);
              if (typeof this.value === "string" && this.value.length)
                writer.writeString(6, this.value);
              if (this.data !== void 0)
                writer.writeBytes(7, this.data);
              if (this.accesses !== void 0)
                writer.writeRepeatedMessage(8, this.accesses, (item) => item.serialize(writer));
              if (this.v !== void 0)
                writer.writeBytes(9, this.v);
              if (this.r !== void 0)
                writer.writeBytes(10, this.r);
              if (this.s !== void 0)
                writer.writeBytes(11, this.s);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccessListTx();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.chain_id = reader.readString();
                    break;
                  case 2:
                    message.nonce = reader.readUint64();
                    break;
                  case 3:
                    message.gas_price = reader.readString();
                    break;
                  case 4:
                    message.gas = reader.readUint64();
                    break;
                  case 5:
                    message.to = reader.readString();
                    break;
                  case 6:
                    message.value = reader.readString();
                    break;
                  case 7:
                    message.data = reader.readBytes();
                    break;
                  case 8:
                    reader.readMessage(message.accesses, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_5.ethermint.evm.v1.AccessTuple.deserialize(reader), dependency_5.ethermint.evm.v1.AccessTuple));
                    break;
                  case 9:
                    message.v = reader.readBytes();
                    break;
                  case 10:
                    message.r = reader.readBytes();
                    break;
                  case 11:
                    message.s = reader.readBytes();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return AccessListTx.deserialize(bytes);
            }
          }
          v12.AccessListTx = AccessListTx;
          class DynamicFeeTx extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("chain_id" in data && data.chain_id != void 0) {
                  this.chain_id = data.chain_id;
                }
                if ("nonce" in data && data.nonce != void 0) {
                  this.nonce = data.nonce;
                }
                if ("gas_tip_cap" in data && data.gas_tip_cap != void 0) {
                  this.gas_tip_cap = data.gas_tip_cap;
                }
                if ("gas_fee_cap" in data && data.gas_fee_cap != void 0) {
                  this.gas_fee_cap = data.gas_fee_cap;
                }
                if ("gas" in data && data.gas != void 0) {
                  this.gas = data.gas;
                }
                if ("to" in data && data.to != void 0) {
                  this.to = data.to;
                }
                if ("value" in data && data.value != void 0) {
                  this.value = data.value;
                }
                if ("data" in data && data.data != void 0) {
                  this.data = data.data;
                }
                if ("accesses" in data && data.accesses != void 0) {
                  this.accesses = data.accesses;
                }
                if ("v" in data && data.v != void 0) {
                  this.v = data.v;
                }
                if ("r" in data && data.r != void 0) {
                  this.r = data.r;
                }
                if ("s" in data && data.s != void 0) {
                  this.s = data.s;
                }
              }
            }
            get chain_id() {
              return pb_1.Message.getField(this, 1);
            }
            set chain_id(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get nonce() {
              return pb_1.Message.getField(this, 2);
            }
            set nonce(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get gas_tip_cap() {
              return pb_1.Message.getField(this, 3);
            }
            set gas_tip_cap(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get gas_fee_cap() {
              return pb_1.Message.getField(this, 4);
            }
            set gas_fee_cap(value) {
              pb_1.Message.setField(this, 4, value);
            }
            get gas() {
              return pb_1.Message.getField(this, 5);
            }
            set gas(value) {
              pb_1.Message.setField(this, 5, value);
            }
            get to() {
              return pb_1.Message.getField(this, 6);
            }
            set to(value) {
              pb_1.Message.setField(this, 6, value);
            }
            get value() {
              return pb_1.Message.getField(this, 7);
            }
            set value(value) {
              pb_1.Message.setField(this, 7, value);
            }
            get data() {
              return pb_1.Message.getField(this, 8);
            }
            set data(value) {
              pb_1.Message.setField(this, 8, value);
            }
            get accesses() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_5.ethermint.evm.v1.AccessTuple, 9);
            }
            set accesses(value) {
              pb_1.Message.setRepeatedWrapperField(this, 9, value);
            }
            get v() {
              return pb_1.Message.getField(this, 10);
            }
            set v(value) {
              pb_1.Message.setField(this, 10, value);
            }
            get r() {
              return pb_1.Message.getField(this, 11);
            }
            set r(value) {
              pb_1.Message.setField(this, 11, value);
            }
            get s() {
              return pb_1.Message.getField(this, 12);
            }
            set s(value) {
              pb_1.Message.setField(this, 12, value);
            }
            static fromObject(data) {
              const message = new DynamicFeeTx({});
              if (data.chain_id != null) {
                message.chain_id = data.chain_id;
              }
              if (data.nonce != null) {
                message.nonce = data.nonce;
              }
              if (data.gas_tip_cap != null) {
                message.gas_tip_cap = data.gas_tip_cap;
              }
              if (data.gas_fee_cap != null) {
                message.gas_fee_cap = data.gas_fee_cap;
              }
              if (data.gas != null) {
                message.gas = data.gas;
              }
              if (data.to != null) {
                message.to = data.to;
              }
              if (data.value != null) {
                message.value = data.value;
              }
              if (data.data != null) {
                message.data = data.data;
              }
              if (data.accesses != null) {
                message.accesses = data.accesses.map((item) => dependency_5.ethermint.evm.v1.AccessTuple.fromObject(item));
              }
              if (data.v != null) {
                message.v = data.v;
              }
              if (data.r != null) {
                message.r = data.r;
              }
              if (data.s != null) {
                message.s = data.s;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.chain_id != null) {
                data.chain_id = this.chain_id;
              }
              if (this.nonce != null) {
                data.nonce = this.nonce;
              }
              if (this.gas_tip_cap != null) {
                data.gas_tip_cap = this.gas_tip_cap;
              }
              if (this.gas_fee_cap != null) {
                data.gas_fee_cap = this.gas_fee_cap;
              }
              if (this.gas != null) {
                data.gas = this.gas;
              }
              if (this.to != null) {
                data.to = this.to;
              }
              if (this.value != null) {
                data.value = this.value;
              }
              if (this.data != null) {
                data.data = this.data;
              }
              if (this.accesses != null) {
                data.accesses = this.accesses.map((item) => item.toObject());
              }
              if (this.v != null) {
                data.v = this.v;
              }
              if (this.r != null) {
                data.r = this.r;
              }
              if (this.s != null) {
                data.s = this.s;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.chain_id === "string" && this.chain_id.length)
                writer.writeString(1, this.chain_id);
              if (this.nonce !== void 0)
                writer.writeUint64(2, this.nonce);
              if (typeof this.gas_tip_cap === "string" && this.gas_tip_cap.length)
                writer.writeString(3, this.gas_tip_cap);
              if (typeof this.gas_fee_cap === "string" && this.gas_fee_cap.length)
                writer.writeString(4, this.gas_fee_cap);
              if (this.gas !== void 0)
                writer.writeUint64(5, this.gas);
              if (typeof this.to === "string" && this.to.length)
                writer.writeString(6, this.to);
              if (typeof this.value === "string" && this.value.length)
                writer.writeString(7, this.value);
              if (this.data !== void 0)
                writer.writeBytes(8, this.data);
              if (this.accesses !== void 0)
                writer.writeRepeatedMessage(9, this.accesses, (item) => item.serialize(writer));
              if (this.v !== void 0)
                writer.writeBytes(10, this.v);
              if (this.r !== void 0)
                writer.writeBytes(11, this.r);
              if (this.s !== void 0)
                writer.writeBytes(12, this.s);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DynamicFeeTx();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.chain_id = reader.readString();
                    break;
                  case 2:
                    message.nonce = reader.readUint64();
                    break;
                  case 3:
                    message.gas_tip_cap = reader.readString();
                    break;
                  case 4:
                    message.gas_fee_cap = reader.readString();
                    break;
                  case 5:
                    message.gas = reader.readUint64();
                    break;
                  case 6:
                    message.to = reader.readString();
                    break;
                  case 7:
                    message.value = reader.readString();
                    break;
                  case 8:
                    message.data = reader.readBytes();
                    break;
                  case 9:
                    reader.readMessage(message.accesses, () => pb_1.Message.addToRepeatedWrapperField(message, 9, dependency_5.ethermint.evm.v1.AccessTuple.deserialize(reader), dependency_5.ethermint.evm.v1.AccessTuple));
                    break;
                  case 10:
                    message.v = reader.readBytes();
                    break;
                  case 11:
                    message.r = reader.readBytes();
                    break;
                  case 12:
                    message.s = reader.readBytes();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return DynamicFeeTx.deserialize(bytes);
            }
          }
          v12.DynamicFeeTx = DynamicFeeTx;
          class ExtensionOptionsEthereumTx extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
              }
            }
            static fromObject(data) {
              const message = new ExtensionOptionsEthereumTx({});
              return message;
            }
            toObject() {
              const data = {};
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExtensionOptionsEthereumTx();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return ExtensionOptionsEthereumTx.deserialize(bytes);
            }
          }
          v12.ExtensionOptionsEthereumTx = ExtensionOptionsEthereumTx;
          class MsgEthereumTxResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("hash" in data && data.hash != void 0) {
                  this.hash = data.hash;
                }
                if ("logs" in data && data.logs != void 0) {
                  this.logs = data.logs;
                }
                if ("ret" in data && data.ret != void 0) {
                  this.ret = data.ret;
                }
                if ("vm_error" in data && data.vm_error != void 0) {
                  this.vm_error = data.vm_error;
                }
                if ("gas_used" in data && data.gas_used != void 0) {
                  this.gas_used = data.gas_used;
                }
              }
            }
            get hash() {
              return pb_1.Message.getField(this, 1);
            }
            set hash(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get logs() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_5.ethermint.evm.v1.Log, 2);
            }
            set logs(value) {
              pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get ret() {
              return pb_1.Message.getField(this, 3);
            }
            set ret(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get vm_error() {
              return pb_1.Message.getField(this, 4);
            }
            set vm_error(value) {
              pb_1.Message.setField(this, 4, value);
            }
            get gas_used() {
              return pb_1.Message.getField(this, 5);
            }
            set gas_used(value) {
              pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data) {
              const message = new MsgEthereumTxResponse({});
              if (data.hash != null) {
                message.hash = data.hash;
              }
              if (data.logs != null) {
                message.logs = data.logs.map((item) => dependency_5.ethermint.evm.v1.Log.fromObject(item));
              }
              if (data.ret != null) {
                message.ret = data.ret;
              }
              if (data.vm_error != null) {
                message.vm_error = data.vm_error;
              }
              if (data.gas_used != null) {
                message.gas_used = data.gas_used;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.hash != null) {
                data.hash = this.hash;
              }
              if (this.logs != null) {
                data.logs = this.logs.map((item) => item.toObject());
              }
              if (this.ret != null) {
                data.ret = this.ret;
              }
              if (this.vm_error != null) {
                data.vm_error = this.vm_error;
              }
              if (this.gas_used != null) {
                data.gas_used = this.gas_used;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.hash === "string" && this.hash.length)
                writer.writeString(1, this.hash);
              if (this.logs !== void 0)
                writer.writeRepeatedMessage(2, this.logs, (item) => item.serialize(writer));
              if (this.ret !== void 0)
                writer.writeBytes(3, this.ret);
              if (typeof this.vm_error === "string" && this.vm_error.length)
                writer.writeString(4, this.vm_error);
              if (this.gas_used !== void 0)
                writer.writeUint64(5, this.gas_used);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgEthereumTxResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.hash = reader.readString();
                    break;
                  case 2:
                    reader.readMessage(message.logs, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.ethermint.evm.v1.Log.deserialize(reader), dependency_5.ethermint.evm.v1.Log));
                    break;
                  case 3:
                    message.ret = reader.readBytes();
                    break;
                  case 4:
                    message.vm_error = reader.readString();
                    break;
                  case 5:
                    message.gas_used = reader.readUint64();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgEthereumTxResponse.deserialize(bytes);
            }
          }
          v12.MsgEthereumTxResponse = MsgEthereumTxResponse;
        })(v1 = evm2.v1 || (evm2.v1 = {}));
      })(evm = ethermint2.evm || (ethermint2.evm = {}));
    })(ethermint = exports.ethermint || (exports.ethermint = {}));
  }
});

// node_modules/@tharsis/proto/dist/messages/msgEthereumTx.js
var require_msgEthereumTx = __commonJS({
  "node_modules/@tharsis/proto/dist/messages/msgEthereumTx.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.bytesToDynamicFeeTx = exports.bytesToAccessListTx = exports.bytesToLegacyTx = exports.bytesToMsgEthereumTx = void 0;
    var ethermint = __importStar(require_tx3());
    function bytesToMsgEthereumTx(bytes) {
      return ethermint.ethermint.evm.v1.MsgEthereumTx.deserialize(bytes);
    }
    exports.bytesToMsgEthereumTx = bytesToMsgEthereumTx;
    function bytesToLegacyTx(bytes) {
      return ethermint.ethermint.evm.v1.LegacyTx.deserialize(bytes);
    }
    exports.bytesToLegacyTx = bytesToLegacyTx;
    function bytesToAccessListTx(bytes) {
      return ethermint.ethermint.evm.v1.AccessListTx.deserialize(bytes);
    }
    exports.bytesToAccessListTx = bytesToAccessListTx;
    function bytesToDynamicFeeTx(bytes) {
      return ethermint.ethermint.evm.v1.DynamicFeeTx.deserialize(bytes);
    }
    exports.bytesToDynamicFeeTx = bytesToDynamicFeeTx;
  }
});

// node_modules/@tharsis/proto/dist/proto/cosmos/bank/v1beta1/bank.js
var require_bank = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/cosmos/bank/v1beta1/bank.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cosmos = void 0;
    var dependency_3 = __importStar(require_coin());
    var pb_1 = __importStar(require_google_protobuf());
    var cosmos;
    (function(cosmos2) {
      var bank;
      (function(bank2) {
        var v1beta1;
        (function(v1beta12) {
          class Params extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("send_enabled" in data && data.send_enabled != void 0) {
                  this.send_enabled = data.send_enabled;
                }
                if ("default_send_enabled" in data && data.default_send_enabled != void 0) {
                  this.default_send_enabled = data.default_send_enabled;
                }
              }
            }
            get send_enabled() {
              return pb_1.Message.getRepeatedWrapperField(this, SendEnabled, 1);
            }
            set send_enabled(value) {
              pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get default_send_enabled() {
              return pb_1.Message.getField(this, 2);
            }
            set default_send_enabled(value) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
              const message = new Params({});
              if (data.send_enabled != null) {
                message.send_enabled = data.send_enabled.map((item) => SendEnabled.fromObject(item));
              }
              if (data.default_send_enabled != null) {
                message.default_send_enabled = data.default_send_enabled;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.send_enabled != null) {
                data.send_enabled = this.send_enabled.map((item) => item.toObject());
              }
              if (this.default_send_enabled != null) {
                data.default_send_enabled = this.default_send_enabled;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.send_enabled !== void 0)
                writer.writeRepeatedMessage(1, this.send_enabled, (item) => item.serialize(writer));
              if (this.default_send_enabled !== void 0)
                writer.writeBool(2, this.default_send_enabled);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Params();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.send_enabled, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SendEnabled.deserialize(reader), SendEnabled));
                    break;
                  case 2:
                    message.default_send_enabled = reader.readBool();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Params.deserialize(bytes);
            }
          }
          v1beta12.Params = Params;
          class SendEnabled extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("denom" in data && data.denom != void 0) {
                  this.denom = data.denom;
                }
                if ("enabled" in data && data.enabled != void 0) {
                  this.enabled = data.enabled;
                }
              }
            }
            get denom() {
              return pb_1.Message.getField(this, 1);
            }
            set denom(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get enabled() {
              return pb_1.Message.getField(this, 2);
            }
            set enabled(value) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
              const message = new SendEnabled({});
              if (data.denom != null) {
                message.denom = data.denom;
              }
              if (data.enabled != null) {
                message.enabled = data.enabled;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.denom != null) {
                data.denom = this.denom;
              }
              if (this.enabled != null) {
                data.enabled = this.enabled;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.denom === "string" && this.denom.length)
                writer.writeString(1, this.denom);
              if (this.enabled !== void 0)
                writer.writeBool(2, this.enabled);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SendEnabled();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.denom = reader.readString();
                    break;
                  case 2:
                    message.enabled = reader.readBool();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return SendEnabled.deserialize(bytes);
            }
          }
          v1beta12.SendEnabled = SendEnabled;
          class Input extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != void 0) {
                  this.address = data.address;
                }
                if ("coins" in data && data.coins != void 0) {
                  this.coins = data.coins;
                }
              }
            }
            get address() {
              return pb_1.Message.getField(this, 1);
            }
            set address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get coins() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.base.v1beta1.Coin, 2);
            }
            set coins(value) {
              pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data) {
              const message = new Input({});
              if (data.address != null) {
                message.address = data.address;
              }
              if (data.coins != null) {
                message.coins = data.coins.map((item) => dependency_3.cosmos.base.v1beta1.Coin.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.address != null) {
                data.address = this.address;
              }
              if (this.coins != null) {
                data.coins = this.coins.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.address === "string" && this.address.length)
                writer.writeString(1, this.address);
              if (this.coins !== void 0)
                writer.writeRepeatedMessage(2, this.coins, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Input();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.address = reader.readString();
                    break;
                  case 2:
                    reader.readMessage(message.coins, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_3.cosmos.base.v1beta1.Coin));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Input.deserialize(bytes);
            }
          }
          v1beta12.Input = Input;
          class Output extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != void 0) {
                  this.address = data.address;
                }
                if ("coins" in data && data.coins != void 0) {
                  this.coins = data.coins;
                }
              }
            }
            get address() {
              return pb_1.Message.getField(this, 1);
            }
            set address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get coins() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.base.v1beta1.Coin, 2);
            }
            set coins(value) {
              pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data) {
              const message = new Output({});
              if (data.address != null) {
                message.address = data.address;
              }
              if (data.coins != null) {
                message.coins = data.coins.map((item) => dependency_3.cosmos.base.v1beta1.Coin.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.address != null) {
                data.address = this.address;
              }
              if (this.coins != null) {
                data.coins = this.coins.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.address === "string" && this.address.length)
                writer.writeString(1, this.address);
              if (this.coins !== void 0)
                writer.writeRepeatedMessage(2, this.coins, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Output();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.address = reader.readString();
                    break;
                  case 2:
                    reader.readMessage(message.coins, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_3.cosmos.base.v1beta1.Coin));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Output.deserialize(bytes);
            }
          }
          v1beta12.Output = Output;
          class Supply extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("total" in data && data.total != void 0) {
                  this.total = data.total;
                }
              }
            }
            get total() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.base.v1beta1.Coin, 1);
            }
            set total(value) {
              pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            static fromObject(data) {
              const message = new Supply({});
              if (data.total != null) {
                message.total = data.total.map((item) => dependency_3.cosmos.base.v1beta1.Coin.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.total != null) {
                data.total = this.total.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.total !== void 0)
                writer.writeRepeatedMessage(1, this.total, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Supply();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.total, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_3.cosmos.base.v1beta1.Coin));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Supply.deserialize(bytes);
            }
          }
          v1beta12.Supply = Supply;
          class DenomUnit extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("denom" in data && data.denom != void 0) {
                  this.denom = data.denom;
                }
                if ("exponent" in data && data.exponent != void 0) {
                  this.exponent = data.exponent;
                }
                if ("aliases" in data && data.aliases != void 0) {
                  this.aliases = data.aliases;
                }
              }
            }
            get denom() {
              return pb_1.Message.getField(this, 1);
            }
            set denom(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get exponent() {
              return pb_1.Message.getField(this, 2);
            }
            set exponent(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get aliases() {
              return pb_1.Message.getField(this, 3);
            }
            set aliases(value) {
              pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data) {
              const message = new DenomUnit({});
              if (data.denom != null) {
                message.denom = data.denom;
              }
              if (data.exponent != null) {
                message.exponent = data.exponent;
              }
              if (data.aliases != null) {
                message.aliases = data.aliases;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.denom != null) {
                data.denom = this.denom;
              }
              if (this.exponent != null) {
                data.exponent = this.exponent;
              }
              if (this.aliases != null) {
                data.aliases = this.aliases;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.denom === "string" && this.denom.length)
                writer.writeString(1, this.denom);
              if (this.exponent !== void 0)
                writer.writeUint32(2, this.exponent);
              if (this.aliases !== void 0)
                writer.writeRepeatedString(3, this.aliases);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DenomUnit();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.denom = reader.readString();
                    break;
                  case 2:
                    message.exponent = reader.readUint32();
                    break;
                  case 3:
                    pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return DenomUnit.deserialize(bytes);
            }
          }
          v1beta12.DenomUnit = DenomUnit;
          class Metadata extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("description" in data && data.description != void 0) {
                  this.description = data.description;
                }
                if ("denom_units" in data && data.denom_units != void 0) {
                  this.denom_units = data.denom_units;
                }
                if ("base" in data && data.base != void 0) {
                  this.base = data.base;
                }
                if ("display" in data && data.display != void 0) {
                  this.display = data.display;
                }
                if ("name" in data && data.name != void 0) {
                  this.name = data.name;
                }
                if ("symbol" in data && data.symbol != void 0) {
                  this.symbol = data.symbol;
                }
              }
            }
            get description() {
              return pb_1.Message.getField(this, 1);
            }
            set description(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get denom_units() {
              return pb_1.Message.getRepeatedWrapperField(this, DenomUnit, 2);
            }
            set denom_units(value) {
              pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get base() {
              return pb_1.Message.getField(this, 3);
            }
            set base(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get display() {
              return pb_1.Message.getField(this, 4);
            }
            set display(value) {
              pb_1.Message.setField(this, 4, value);
            }
            get name() {
              return pb_1.Message.getField(this, 5);
            }
            set name(value) {
              pb_1.Message.setField(this, 5, value);
            }
            get symbol() {
              return pb_1.Message.getField(this, 6);
            }
            set symbol(value) {
              pb_1.Message.setField(this, 6, value);
            }
            static fromObject(data) {
              const message = new Metadata({});
              if (data.description != null) {
                message.description = data.description;
              }
              if (data.denom_units != null) {
                message.denom_units = data.denom_units.map((item) => DenomUnit.fromObject(item));
              }
              if (data.base != null) {
                message.base = data.base;
              }
              if (data.display != null) {
                message.display = data.display;
              }
              if (data.name != null) {
                message.name = data.name;
              }
              if (data.symbol != null) {
                message.symbol = data.symbol;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.description != null) {
                data.description = this.description;
              }
              if (this.denom_units != null) {
                data.denom_units = this.denom_units.map((item) => item.toObject());
              }
              if (this.base != null) {
                data.base = this.base;
              }
              if (this.display != null) {
                data.display = this.display;
              }
              if (this.name != null) {
                data.name = this.name;
              }
              if (this.symbol != null) {
                data.symbol = this.symbol;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.description === "string" && this.description.length)
                writer.writeString(1, this.description);
              if (this.denom_units !== void 0)
                writer.writeRepeatedMessage(2, this.denom_units, (item) => item.serialize(writer));
              if (typeof this.base === "string" && this.base.length)
                writer.writeString(3, this.base);
              if (typeof this.display === "string" && this.display.length)
                writer.writeString(4, this.display);
              if (typeof this.name === "string" && this.name.length)
                writer.writeString(5, this.name);
              if (typeof this.symbol === "string" && this.symbol.length)
                writer.writeString(6, this.symbol);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Metadata();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.description = reader.readString();
                    break;
                  case 2:
                    reader.readMessage(message.denom_units, () => pb_1.Message.addToRepeatedWrapperField(message, 2, DenomUnit.deserialize(reader), DenomUnit));
                    break;
                  case 3:
                    message.base = reader.readString();
                    break;
                  case 4:
                    message.display = reader.readString();
                    break;
                  case 5:
                    message.name = reader.readString();
                    break;
                  case 6:
                    message.symbol = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Metadata.deserialize(bytes);
            }
          }
          v1beta12.Metadata = Metadata;
        })(v1beta1 = bank2.v1beta1 || (bank2.v1beta1 = {}));
      })(bank = cosmos2.bank || (cosmos2.bank = {}));
    })(cosmos = exports.cosmos || (exports.cosmos = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/cosmos/bank/v1beta1/tx.js
var require_tx4 = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/cosmos/bank/v1beta1/tx.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cosmos = void 0;
    var dependency_2 = __importStar(require_coin());
    var dependency_3 = __importStar(require_bank());
    var pb_1 = __importStar(require_google_protobuf());
    var cosmos;
    (function(cosmos2) {
      var bank;
      (function(bank2) {
        var v1beta1;
        (function(v1beta12) {
          class MsgSend extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("from_address" in data && data.from_address != void 0) {
                  this.from_address = data.from_address;
                }
                if ("to_address" in data && data.to_address != void 0) {
                  this.to_address = data.to_address;
                }
                if ("amount" in data && data.amount != void 0) {
                  this.amount = data.amount;
                }
              }
            }
            get from_address() {
              return pb_1.Message.getField(this, 1);
            }
            set from_address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get to_address() {
              return pb_1.Message.getField(this, 2);
            }
            set to_address(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get amount() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.base.v1beta1.Coin, 3);
            }
            set amount(value) {
              pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data) {
              const message = new MsgSend({});
              if (data.from_address != null) {
                message.from_address = data.from_address;
              }
              if (data.to_address != null) {
                message.to_address = data.to_address;
              }
              if (data.amount != null) {
                message.amount = data.amount.map((item) => dependency_2.cosmos.base.v1beta1.Coin.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.from_address != null) {
                data.from_address = this.from_address;
              }
              if (this.to_address != null) {
                data.to_address = this.to_address;
              }
              if (this.amount != null) {
                data.amount = this.amount.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.from_address === "string" && this.from_address.length)
                writer.writeString(1, this.from_address);
              if (typeof this.to_address === "string" && this.to_address.length)
                writer.writeString(2, this.to_address);
              if (this.amount !== void 0)
                writer.writeRepeatedMessage(3, this.amount, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSend();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.from_address = reader.readString();
                    break;
                  case 2:
                    message.to_address = reader.readString();
                    break;
                  case 3:
                    reader.readMessage(message.amount, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_2.cosmos.base.v1beta1.Coin));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgSend.deserialize(bytes);
            }
          }
          v1beta12.MsgSend = MsgSend;
          class MsgSendResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
              }
            }
            static fromObject(data) {
              const message = new MsgSendResponse({});
              return message;
            }
            toObject() {
              const data = {};
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSendResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgSendResponse.deserialize(bytes);
            }
          }
          v1beta12.MsgSendResponse = MsgSendResponse;
          class MsgMultiSend extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("inputs" in data && data.inputs != void 0) {
                  this.inputs = data.inputs;
                }
                if ("outputs" in data && data.outputs != void 0) {
                  this.outputs = data.outputs;
                }
              }
            }
            get inputs() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.bank.v1beta1.Input, 1);
            }
            set inputs(value) {
              pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get outputs() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.bank.v1beta1.Output, 2);
            }
            set outputs(value) {
              pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data) {
              const message = new MsgMultiSend({});
              if (data.inputs != null) {
                message.inputs = data.inputs.map((item) => dependency_3.cosmos.bank.v1beta1.Input.fromObject(item));
              }
              if (data.outputs != null) {
                message.outputs = data.outputs.map((item) => dependency_3.cosmos.bank.v1beta1.Output.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.inputs != null) {
                data.inputs = this.inputs.map((item) => item.toObject());
              }
              if (this.outputs != null) {
                data.outputs = this.outputs.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.inputs !== void 0)
                writer.writeRepeatedMessage(1, this.inputs, (item) => item.serialize(writer));
              if (this.outputs !== void 0)
                writer.writeRepeatedMessage(2, this.outputs, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgMultiSend();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.inputs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.cosmos.bank.v1beta1.Input.deserialize(reader), dependency_3.cosmos.bank.v1beta1.Input));
                    break;
                  case 2:
                    reader.readMessage(message.outputs, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.cosmos.bank.v1beta1.Output.deserialize(reader), dependency_3.cosmos.bank.v1beta1.Output));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgMultiSend.deserialize(bytes);
            }
          }
          v1beta12.MsgMultiSend = MsgMultiSend;
          class MsgMultiSendResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
              }
            }
            static fromObject(data) {
              const message = new MsgMultiSendResponse({});
              return message;
            }
            toObject() {
              const data = {};
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgMultiSendResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgMultiSendResponse.deserialize(bytes);
            }
          }
          v1beta12.MsgMultiSendResponse = MsgMultiSendResponse;
        })(v1beta1 = bank2.v1beta1 || (bank2.v1beta1 = {}));
      })(bank = cosmos2.bank || (cosmos2.bank = {}));
    })(cosmos = exports.cosmos || (exports.cosmos = {}));
  }
});

// node_modules/@tharsis/proto/dist/messages/msgSend.js
var require_msgSend = __commonJS({
  "node_modules/@tharsis/proto/dist/messages/msgSend.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMsgSend = void 0;
    var bank = __importStar(require_tx4());
    var coin = __importStar(require_coin());
    function createMsgSend(fromAddress, toAddress, amount, denom) {
      const value = new coin.cosmos.base.v1beta1.Coin({
        denom,
        amount
      });
      const message = new bank.cosmos.bank.v1beta1.MsgSend({
        from_address: fromAddress,
        to_address: toAddress,
        amount: [value]
      });
      return {
        message,
        path: "cosmos.bank.v1beta1.MsgSend"
      };
    }
    exports.createMsgSend = createMsgSend;
  }
});

// node_modules/@tharsis/proto/dist/proto/google/protobuf/duration.js
var require_duration = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/google/protobuf/duration.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.google = void 0;
    var pb_1 = __importStar(require_google_protobuf());
    var google;
    (function(google2) {
      var protobuf;
      (function(protobuf2) {
        class Duration extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("seconds" in data && data.seconds != void 0) {
                this.seconds = data.seconds;
              }
              if ("nanos" in data && data.nanos != void 0) {
                this.nanos = data.nanos;
              }
            }
          }
          get seconds() {
            return pb_1.Message.getField(this, 1);
          }
          set seconds(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get nanos() {
            return pb_1.Message.getField(this, 2);
          }
          set nanos(value) {
            pb_1.Message.setField(this, 2, value);
          }
          static fromObject(data) {
            const message = new Duration({});
            if (data.seconds != null) {
              message.seconds = data.seconds;
            }
            if (data.nanos != null) {
              message.nanos = data.nanos;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.seconds != null) {
              data.seconds = this.seconds;
            }
            if (this.nanos != null) {
              data.nanos = this.nanos;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.seconds !== void 0)
              writer.writeInt64(1, this.seconds);
            if (this.nanos !== void 0)
              writer.writeInt32(2, this.nanos);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Duration();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.seconds = reader.readInt64();
                  break;
                case 2:
                  message.nanos = reader.readInt32();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return Duration.deserialize(bytes);
          }
        }
        protobuf2.Duration = Duration;
      })(protobuf = google2.protobuf || (google2.protobuf = {}));
    })(google = exports.google || (exports.google = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/tendermint/crypto/proof.js
var require_proof = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/tendermint/crypto/proof.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tendermint = void 0;
    var pb_1 = __importStar(require_google_protobuf());
    var tendermint;
    (function(tendermint2) {
      var crypto;
      (function(crypto2) {
        class Proof extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("total" in data && data.total != void 0) {
                this.total = data.total;
              }
              if ("index" in data && data.index != void 0) {
                this.index = data.index;
              }
              if ("leaf_hash" in data && data.leaf_hash != void 0) {
                this.leaf_hash = data.leaf_hash;
              }
              if ("aunts" in data && data.aunts != void 0) {
                this.aunts = data.aunts;
              }
            }
          }
          get total() {
            return pb_1.Message.getField(this, 1);
          }
          set total(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get index() {
            return pb_1.Message.getField(this, 2);
          }
          set index(value) {
            pb_1.Message.setField(this, 2, value);
          }
          get leaf_hash() {
            return pb_1.Message.getField(this, 3);
          }
          set leaf_hash(value) {
            pb_1.Message.setField(this, 3, value);
          }
          get aunts() {
            return pb_1.Message.getField(this, 4);
          }
          set aunts(value) {
            pb_1.Message.setField(this, 4, value);
          }
          static fromObject(data) {
            const message = new Proof({});
            if (data.total != null) {
              message.total = data.total;
            }
            if (data.index != null) {
              message.index = data.index;
            }
            if (data.leaf_hash != null) {
              message.leaf_hash = data.leaf_hash;
            }
            if (data.aunts != null) {
              message.aunts = data.aunts;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.total != null) {
              data.total = this.total;
            }
            if (this.index != null) {
              data.index = this.index;
            }
            if (this.leaf_hash != null) {
              data.leaf_hash = this.leaf_hash;
            }
            if (this.aunts != null) {
              data.aunts = this.aunts;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.total !== void 0)
              writer.writeInt64(1, this.total);
            if (this.index !== void 0)
              writer.writeInt64(2, this.index);
            if (this.leaf_hash !== void 0)
              writer.writeBytes(3, this.leaf_hash);
            if (this.aunts !== void 0)
              writer.writeRepeatedBytes(4, this.aunts);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Proof();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.total = reader.readInt64();
                  break;
                case 2:
                  message.index = reader.readInt64();
                  break;
                case 3:
                  message.leaf_hash = reader.readBytes();
                  break;
                case 4:
                  pb_1.Message.addToRepeatedField(message, 4, reader.readBytes());
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return Proof.deserialize(bytes);
          }
        }
        crypto2.Proof = Proof;
        class ValueOp extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("key" in data && data.key != void 0) {
                this.key = data.key;
              }
              if ("proof" in data && data.proof != void 0) {
                this.proof = data.proof;
              }
            }
          }
          get key() {
            return pb_1.Message.getField(this, 1);
          }
          set key(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get proof() {
            return pb_1.Message.getWrapperField(this, Proof, 2);
          }
          set proof(value) {
            pb_1.Message.setWrapperField(this, 2, value);
          }
          static fromObject(data) {
            const message = new ValueOp({});
            if (data.key != null) {
              message.key = data.key;
            }
            if (data.proof != null) {
              message.proof = Proof.fromObject(data.proof);
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.key != null) {
              data.key = this.key;
            }
            if (this.proof != null) {
              data.proof = this.proof.toObject();
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key !== void 0)
              writer.writeBytes(1, this.key);
            if (this.proof !== void 0)
              writer.writeMessage(2, this.proof, () => this.proof.serialize(writer));
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValueOp();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.key = reader.readBytes();
                  break;
                case 2:
                  reader.readMessage(message.proof, () => message.proof = Proof.deserialize(reader));
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return ValueOp.deserialize(bytes);
          }
        }
        crypto2.ValueOp = ValueOp;
        class DominoOp extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("key" in data && data.key != void 0) {
                this.key = data.key;
              }
              if ("input" in data && data.input != void 0) {
                this.input = data.input;
              }
              if ("output" in data && data.output != void 0) {
                this.output = data.output;
              }
            }
          }
          get key() {
            return pb_1.Message.getField(this, 1);
          }
          set key(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get input() {
            return pb_1.Message.getField(this, 2);
          }
          set input(value) {
            pb_1.Message.setField(this, 2, value);
          }
          get output() {
            return pb_1.Message.getField(this, 3);
          }
          set output(value) {
            pb_1.Message.setField(this, 3, value);
          }
          static fromObject(data) {
            const message = new DominoOp({});
            if (data.key != null) {
              message.key = data.key;
            }
            if (data.input != null) {
              message.input = data.input;
            }
            if (data.output != null) {
              message.output = data.output;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.key != null) {
              data.key = this.key;
            }
            if (this.input != null) {
              data.input = this.input;
            }
            if (this.output != null) {
              data.output = this.output;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.key === "string" && this.key.length)
              writer.writeString(1, this.key);
            if (typeof this.input === "string" && this.input.length)
              writer.writeString(2, this.input);
            if (typeof this.output === "string" && this.output.length)
              writer.writeString(3, this.output);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DominoOp();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.key = reader.readString();
                  break;
                case 2:
                  message.input = reader.readString();
                  break;
                case 3:
                  message.output = reader.readString();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return DominoOp.deserialize(bytes);
          }
        }
        crypto2.DominoOp = DominoOp;
        class ProofOp extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("type" in data && data.type != void 0) {
                this.type = data.type;
              }
              if ("key" in data && data.key != void 0) {
                this.key = data.key;
              }
              if ("data" in data && data.data != void 0) {
                this.data = data.data;
              }
            }
          }
          get type() {
            return pb_1.Message.getField(this, 1);
          }
          set type(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get key() {
            return pb_1.Message.getField(this, 2);
          }
          set key(value) {
            pb_1.Message.setField(this, 2, value);
          }
          get data() {
            return pb_1.Message.getField(this, 3);
          }
          set data(value) {
            pb_1.Message.setField(this, 3, value);
          }
          static fromObject(data) {
            const message = new ProofOp({});
            if (data.type != null) {
              message.type = data.type;
            }
            if (data.key != null) {
              message.key = data.key;
            }
            if (data.data != null) {
              message.data = data.data;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.type != null) {
              data.type = this.type;
            }
            if (this.key != null) {
              data.key = this.key;
            }
            if (this.data != null) {
              data.data = this.data;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.type === "string" && this.type.length)
              writer.writeString(1, this.type);
            if (this.key !== void 0)
              writer.writeBytes(2, this.key);
            if (this.data !== void 0)
              writer.writeBytes(3, this.data);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofOp();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.type = reader.readString();
                  break;
                case 2:
                  message.key = reader.readBytes();
                  break;
                case 3:
                  message.data = reader.readBytes();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return ProofOp.deserialize(bytes);
          }
        }
        crypto2.ProofOp = ProofOp;
        class ProofOps extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("ops" in data && data.ops != void 0) {
                this.ops = data.ops;
              }
            }
          }
          get ops() {
            return pb_1.Message.getRepeatedWrapperField(this, ProofOp, 1);
          }
          set ops(value) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
          }
          static fromObject(data) {
            const message = new ProofOps({});
            if (data.ops != null) {
              message.ops = data.ops.map((item) => ProofOp.fromObject(item));
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.ops != null) {
              data.ops = this.ops.map((item) => item.toObject());
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ops !== void 0)
              writer.writeRepeatedMessage(1, this.ops, (item) => item.serialize(writer));
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofOps();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  reader.readMessage(message.ops, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ProofOp.deserialize(reader), ProofOp));
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return ProofOps.deserialize(bytes);
          }
        }
        crypto2.ProofOps = ProofOps;
      })(crypto = tendermint2.crypto || (tendermint2.crypto = {}));
    })(tendermint = exports.tendermint || (exports.tendermint = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/tendermint/version/types.js
var require_types = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/tendermint/version/types.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tendermint = void 0;
    var pb_1 = __importStar(require_google_protobuf());
    var tendermint;
    (function(tendermint2) {
      var version;
      (function(version2) {
        class App extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("protocol" in data && data.protocol != void 0) {
                this.protocol = data.protocol;
              }
              if ("software" in data && data.software != void 0) {
                this.software = data.software;
              }
            }
          }
          get protocol() {
            return pb_1.Message.getField(this, 1);
          }
          set protocol(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get software() {
            return pb_1.Message.getField(this, 2);
          }
          set software(value) {
            pb_1.Message.setField(this, 2, value);
          }
          static fromObject(data) {
            const message = new App({});
            if (data.protocol != null) {
              message.protocol = data.protocol;
            }
            if (data.software != null) {
              message.software = data.software;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.protocol != null) {
              data.protocol = this.protocol;
            }
            if (this.software != null) {
              data.software = this.software;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.protocol !== void 0)
              writer.writeUint64(1, this.protocol);
            if (typeof this.software === "string" && this.software.length)
              writer.writeString(2, this.software);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new App();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.protocol = reader.readUint64();
                  break;
                case 2:
                  message.software = reader.readString();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return App.deserialize(bytes);
          }
        }
        version2.App = App;
        class Consensus extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("block" in data && data.block != void 0) {
                this.block = data.block;
              }
              if ("app" in data && data.app != void 0) {
                this.app = data.app;
              }
            }
          }
          get block() {
            return pb_1.Message.getField(this, 1);
          }
          set block(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get app() {
            return pb_1.Message.getField(this, 2);
          }
          set app(value) {
            pb_1.Message.setField(this, 2, value);
          }
          static fromObject(data) {
            const message = new Consensus({});
            if (data.block != null) {
              message.block = data.block;
            }
            if (data.app != null) {
              message.app = data.app;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.block != null) {
              data.block = this.block;
            }
            if (this.app != null) {
              data.app = this.app;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block !== void 0)
              writer.writeUint64(1, this.block);
            if (this.app !== void 0)
              writer.writeUint64(2, this.app);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Consensus();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.block = reader.readUint64();
                  break;
                case 2:
                  message.app = reader.readUint64();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return Consensus.deserialize(bytes);
          }
        }
        version2.Consensus = Consensus;
      })(version = tendermint2.version || (tendermint2.version = {}));
    })(tendermint = exports.tendermint || (exports.tendermint = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/tendermint/crypto/keys.js
var require_keys = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/tendermint/crypto/keys.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tendermint = void 0;
    var pb_1 = __importStar(require_google_protobuf());
    var tendermint;
    (function(tendermint2) {
      var crypto;
      (function(crypto2) {
        class PublicKey extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1, 2]]);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("ed25519" in data && data.ed25519 != void 0) {
                this.ed25519 = data.ed25519;
              }
              if ("secp256k1" in data && data.secp256k1 != void 0) {
                this.secp256k1 = data.secp256k1;
              }
            }
          }
          get ed25519() {
            return pb_1.Message.getField(this, 1);
          }
          set ed25519(value) {
            pb_1.Message.setOneofField(this, 1, [1, 2], value);
          }
          get secp256k1() {
            return pb_1.Message.getField(this, 2);
          }
          set secp256k1(value) {
            pb_1.Message.setOneofField(this, 2, [1, 2], value);
          }
          get sum() {
            const cases = {
              0: "none",
              1: "ed25519",
              2: "secp256k1"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
          }
          static fromObject(data) {
            const message = new PublicKey({});
            if (data.ed25519 != null) {
              message.ed25519 = data.ed25519;
            }
            if (data.secp256k1 != null) {
              message.secp256k1 = data.secp256k1;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.ed25519 != null) {
              data.ed25519 = this.ed25519;
            }
            if (this.secp256k1 != null) {
              data.secp256k1 = this.secp256k1;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.ed25519 !== void 0)
              writer.writeBytes(1, this.ed25519);
            if (this.secp256k1 !== void 0)
              writer.writeBytes(2, this.secp256k1);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PublicKey();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.ed25519 = reader.readBytes();
                  break;
                case 2:
                  message.secp256k1 = reader.readBytes();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return PublicKey.deserialize(bytes);
          }
        }
        crypto2.PublicKey = PublicKey;
      })(crypto = tendermint2.crypto || (tendermint2.crypto = {}));
    })(tendermint = exports.tendermint || (exports.tendermint = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/tendermint/types/validator.js
var require_validator = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/tendermint/types/validator.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tendermint = void 0;
    var dependency_2 = __importStar(require_keys());
    var pb_1 = __importStar(require_google_protobuf());
    var tendermint;
    (function(tendermint2) {
      var types;
      (function(types2) {
        class ValidatorSet extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("validators" in data && data.validators != void 0) {
                this.validators = data.validators;
              }
              if ("proposer" in data && data.proposer != void 0) {
                this.proposer = data.proposer;
              }
              if ("total_voting_power" in data && data.total_voting_power != void 0) {
                this.total_voting_power = data.total_voting_power;
              }
            }
          }
          get validators() {
            return pb_1.Message.getRepeatedWrapperField(this, Validator, 1);
          }
          set validators(value) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
          }
          get proposer() {
            return pb_1.Message.getWrapperField(this, Validator, 2);
          }
          set proposer(value) {
            pb_1.Message.setWrapperField(this, 2, value);
          }
          get total_voting_power() {
            return pb_1.Message.getField(this, 3);
          }
          set total_voting_power(value) {
            pb_1.Message.setField(this, 3, value);
          }
          static fromObject(data) {
            const message = new ValidatorSet({});
            if (data.validators != null) {
              message.validators = data.validators.map((item) => Validator.fromObject(item));
            }
            if (data.proposer != null) {
              message.proposer = Validator.fromObject(data.proposer);
            }
            if (data.total_voting_power != null) {
              message.total_voting_power = data.total_voting_power;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.validators != null) {
              data.validators = this.validators.map((item) => item.toObject());
            }
            if (this.proposer != null) {
              data.proposer = this.proposer.toObject();
            }
            if (this.total_voting_power != null) {
              data.total_voting_power = this.total_voting_power;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validators !== void 0)
              writer.writeRepeatedMessage(1, this.validators, (item) => item.serialize(writer));
            if (this.proposer !== void 0)
              writer.writeMessage(2, this.proposer, () => this.proposer.serialize(writer));
            if (this.total_voting_power !== void 0)
              writer.writeInt64(3, this.total_voting_power);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValidatorSet();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  reader.readMessage(message.validators, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Validator.deserialize(reader), Validator));
                  break;
                case 2:
                  reader.readMessage(message.proposer, () => message.proposer = Validator.deserialize(reader));
                  break;
                case 3:
                  message.total_voting_power = reader.readInt64();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return ValidatorSet.deserialize(bytes);
          }
        }
        types2.ValidatorSet = ValidatorSet;
        class Validator extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("address" in data && data.address != void 0) {
                this.address = data.address;
              }
              if ("pub_key" in data && data.pub_key != void 0) {
                this.pub_key = data.pub_key;
              }
              if ("voting_power" in data && data.voting_power != void 0) {
                this.voting_power = data.voting_power;
              }
              if ("proposer_priority" in data && data.proposer_priority != void 0) {
                this.proposer_priority = data.proposer_priority;
              }
            }
          }
          get address() {
            return pb_1.Message.getField(this, 1);
          }
          set address(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get pub_key() {
            return pb_1.Message.getWrapperField(this, dependency_2.tendermint.crypto.PublicKey, 2);
          }
          set pub_key(value) {
            pb_1.Message.setWrapperField(this, 2, value);
          }
          get voting_power() {
            return pb_1.Message.getField(this, 3);
          }
          set voting_power(value) {
            pb_1.Message.setField(this, 3, value);
          }
          get proposer_priority() {
            return pb_1.Message.getField(this, 4);
          }
          set proposer_priority(value) {
            pb_1.Message.setField(this, 4, value);
          }
          static fromObject(data) {
            const message = new Validator({});
            if (data.address != null) {
              message.address = data.address;
            }
            if (data.pub_key != null) {
              message.pub_key = dependency_2.tendermint.crypto.PublicKey.fromObject(data.pub_key);
            }
            if (data.voting_power != null) {
              message.voting_power = data.voting_power;
            }
            if (data.proposer_priority != null) {
              message.proposer_priority = data.proposer_priority;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.address != null) {
              data.address = this.address;
            }
            if (this.pub_key != null) {
              data.pub_key = this.pub_key.toObject();
            }
            if (this.voting_power != null) {
              data.voting_power = this.voting_power;
            }
            if (this.proposer_priority != null) {
              data.proposer_priority = this.proposer_priority;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address !== void 0)
              writer.writeBytes(1, this.address);
            if (this.pub_key !== void 0)
              writer.writeMessage(2, this.pub_key, () => this.pub_key.serialize(writer));
            if (this.voting_power !== void 0)
              writer.writeInt64(3, this.voting_power);
            if (this.proposer_priority !== void 0)
              writer.writeInt64(4, this.proposer_priority);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Validator();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.address = reader.readBytes();
                  break;
                case 2:
                  reader.readMessage(message.pub_key, () => message.pub_key = dependency_2.tendermint.crypto.PublicKey.deserialize(reader));
                  break;
                case 3:
                  message.voting_power = reader.readInt64();
                  break;
                case 4:
                  message.proposer_priority = reader.readInt64();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return Validator.deserialize(bytes);
          }
        }
        types2.Validator = Validator;
        class SimpleValidator extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("pub_key" in data && data.pub_key != void 0) {
                this.pub_key = data.pub_key;
              }
              if ("voting_power" in data && data.voting_power != void 0) {
                this.voting_power = data.voting_power;
              }
            }
          }
          get pub_key() {
            return pb_1.Message.getWrapperField(this, dependency_2.tendermint.crypto.PublicKey, 1);
          }
          set pub_key(value) {
            pb_1.Message.setWrapperField(this, 1, value);
          }
          get voting_power() {
            return pb_1.Message.getField(this, 2);
          }
          set voting_power(value) {
            pb_1.Message.setField(this, 2, value);
          }
          static fromObject(data) {
            const message = new SimpleValidator({});
            if (data.pub_key != null) {
              message.pub_key = dependency_2.tendermint.crypto.PublicKey.fromObject(data.pub_key);
            }
            if (data.voting_power != null) {
              message.voting_power = data.voting_power;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.pub_key != null) {
              data.pub_key = this.pub_key.toObject();
            }
            if (this.voting_power != null) {
              data.voting_power = this.voting_power;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pub_key !== void 0)
              writer.writeMessage(1, this.pub_key, () => this.pub_key.serialize(writer));
            if (this.voting_power !== void 0)
              writer.writeInt64(2, this.voting_power);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SimpleValidator();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  reader.readMessage(message.pub_key, () => message.pub_key = dependency_2.tendermint.crypto.PublicKey.deserialize(reader));
                  break;
                case 2:
                  message.voting_power = reader.readInt64();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return SimpleValidator.deserialize(bytes);
          }
        }
        types2.SimpleValidator = SimpleValidator;
      })(types = tendermint2.types || (tendermint2.types = {}));
    })(tendermint = exports.tendermint || (exports.tendermint = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/tendermint/types/types.js
var require_types2 = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/tendermint/types/types.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tendermint = void 0;
    var dependency_2 = __importStar(require_timestamp());
    var dependency_3 = __importStar(require_proof());
    var dependency_4 = __importStar(require_types());
    var dependency_5 = __importStar(require_validator());
    var pb_1 = __importStar(require_google_protobuf());
    var tendermint;
    (function(tendermint2) {
      var types;
      (function(types2) {
        let BlockIDFlag;
        (function(BlockIDFlag2) {
          BlockIDFlag2[BlockIDFlag2["BLOCK_ID_FLAG_UNKNOWN"] = 0] = "BLOCK_ID_FLAG_UNKNOWN";
          BlockIDFlag2[BlockIDFlag2["BLOCK_ID_FLAG_ABSENT"] = 1] = "BLOCK_ID_FLAG_ABSENT";
          BlockIDFlag2[BlockIDFlag2["BLOCK_ID_FLAG_COMMIT"] = 2] = "BLOCK_ID_FLAG_COMMIT";
          BlockIDFlag2[BlockIDFlag2["BLOCK_ID_FLAG_NIL"] = 3] = "BLOCK_ID_FLAG_NIL";
        })(BlockIDFlag = types2.BlockIDFlag || (types2.BlockIDFlag = {}));
        let SignedMsgType;
        (function(SignedMsgType2) {
          SignedMsgType2[SignedMsgType2["SIGNED_MSG_TYPE_UNKNOWN"] = 0] = "SIGNED_MSG_TYPE_UNKNOWN";
          SignedMsgType2[SignedMsgType2["SIGNED_MSG_TYPE_PREVOTE"] = 1] = "SIGNED_MSG_TYPE_PREVOTE";
          SignedMsgType2[SignedMsgType2["SIGNED_MSG_TYPE_PRECOMMIT"] = 2] = "SIGNED_MSG_TYPE_PRECOMMIT";
          SignedMsgType2[SignedMsgType2["SIGNED_MSG_TYPE_PROPOSAL"] = 32] = "SIGNED_MSG_TYPE_PROPOSAL";
        })(SignedMsgType = types2.SignedMsgType || (types2.SignedMsgType = {}));
        class PartSetHeader extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("total" in data && data.total != void 0) {
                this.total = data.total;
              }
              if ("hash" in data && data.hash != void 0) {
                this.hash = data.hash;
              }
            }
          }
          get total() {
            return pb_1.Message.getField(this, 1);
          }
          set total(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get hash() {
            return pb_1.Message.getField(this, 2);
          }
          set hash(value) {
            pb_1.Message.setField(this, 2, value);
          }
          static fromObject(data) {
            const message = new PartSetHeader({});
            if (data.total != null) {
              message.total = data.total;
            }
            if (data.hash != null) {
              message.hash = data.hash;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.total != null) {
              data.total = this.total;
            }
            if (this.hash != null) {
              data.hash = this.hash;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.total !== void 0)
              writer.writeUint32(1, this.total);
            if (this.hash !== void 0)
              writer.writeBytes(2, this.hash);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PartSetHeader();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.total = reader.readUint32();
                  break;
                case 2:
                  message.hash = reader.readBytes();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return PartSetHeader.deserialize(bytes);
          }
        }
        types2.PartSetHeader = PartSetHeader;
        class Part extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("index" in data && data.index != void 0) {
                this.index = data.index;
              }
              if ("bytes" in data && data.bytes != void 0) {
                this.bytes = data.bytes;
              }
              if ("proof" in data && data.proof != void 0) {
                this.proof = data.proof;
              }
            }
          }
          get index() {
            return pb_1.Message.getField(this, 1);
          }
          set index(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get bytes() {
            return pb_1.Message.getField(this, 2);
          }
          set bytes(value) {
            pb_1.Message.setField(this, 2, value);
          }
          get proof() {
            return pb_1.Message.getWrapperField(this, dependency_3.tendermint.crypto.Proof, 3);
          }
          set proof(value) {
            pb_1.Message.setWrapperField(this, 3, value);
          }
          static fromObject(data) {
            const message = new Part({});
            if (data.index != null) {
              message.index = data.index;
            }
            if (data.bytes != null) {
              message.bytes = data.bytes;
            }
            if (data.proof != null) {
              message.proof = dependency_3.tendermint.crypto.Proof.fromObject(data.proof);
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.index != null) {
              data.index = this.index;
            }
            if (this.bytes != null) {
              data.bytes = this.bytes;
            }
            if (this.proof != null) {
              data.proof = this.proof.toObject();
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.index !== void 0)
              writer.writeUint32(1, this.index);
            if (this.bytes !== void 0)
              writer.writeBytes(2, this.bytes);
            if (this.proof !== void 0)
              writer.writeMessage(3, this.proof, () => this.proof.serialize(writer));
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Part();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.index = reader.readUint32();
                  break;
                case 2:
                  message.bytes = reader.readBytes();
                  break;
                case 3:
                  reader.readMessage(message.proof, () => message.proof = dependency_3.tendermint.crypto.Proof.deserialize(reader));
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return Part.deserialize(bytes);
          }
        }
        types2.Part = Part;
        class BlockID extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("hash" in data && data.hash != void 0) {
                this.hash = data.hash;
              }
              if ("part_set_header" in data && data.part_set_header != void 0) {
                this.part_set_header = data.part_set_header;
              }
            }
          }
          get hash() {
            return pb_1.Message.getField(this, 1);
          }
          set hash(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get part_set_header() {
            return pb_1.Message.getWrapperField(this, PartSetHeader, 2);
          }
          set part_set_header(value) {
            pb_1.Message.setWrapperField(this, 2, value);
          }
          static fromObject(data) {
            const message = new BlockID({});
            if (data.hash != null) {
              message.hash = data.hash;
            }
            if (data.part_set_header != null) {
              message.part_set_header = PartSetHeader.fromObject(data.part_set_header);
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.hash != null) {
              data.hash = this.hash;
            }
            if (this.part_set_header != null) {
              data.part_set_header = this.part_set_header.toObject();
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.hash !== void 0)
              writer.writeBytes(1, this.hash);
            if (this.part_set_header !== void 0)
              writer.writeMessage(2, this.part_set_header, () => this.part_set_header.serialize(writer));
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockID();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.hash = reader.readBytes();
                  break;
                case 2:
                  reader.readMessage(message.part_set_header, () => message.part_set_header = PartSetHeader.deserialize(reader));
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return BlockID.deserialize(bytes);
          }
        }
        types2.BlockID = BlockID;
        class Header extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("version" in data && data.version != void 0) {
                this.version = data.version;
              }
              if ("chain_id" in data && data.chain_id != void 0) {
                this.chain_id = data.chain_id;
              }
              if ("height" in data && data.height != void 0) {
                this.height = data.height;
              }
              if ("time" in data && data.time != void 0) {
                this.time = data.time;
              }
              if ("last_block_id" in data && data.last_block_id != void 0) {
                this.last_block_id = data.last_block_id;
              }
              if ("last_commit_hash" in data && data.last_commit_hash != void 0) {
                this.last_commit_hash = data.last_commit_hash;
              }
              if ("data_hash" in data && data.data_hash != void 0) {
                this.data_hash = data.data_hash;
              }
              if ("validators_hash" in data && data.validators_hash != void 0) {
                this.validators_hash = data.validators_hash;
              }
              if ("next_validators_hash" in data && data.next_validators_hash != void 0) {
                this.next_validators_hash = data.next_validators_hash;
              }
              if ("consensus_hash" in data && data.consensus_hash != void 0) {
                this.consensus_hash = data.consensus_hash;
              }
              if ("app_hash" in data && data.app_hash != void 0) {
                this.app_hash = data.app_hash;
              }
              if ("last_results_hash" in data && data.last_results_hash != void 0) {
                this.last_results_hash = data.last_results_hash;
              }
              if ("evidence_hash" in data && data.evidence_hash != void 0) {
                this.evidence_hash = data.evidence_hash;
              }
              if ("proposer_address" in data && data.proposer_address != void 0) {
                this.proposer_address = data.proposer_address;
              }
            }
          }
          get version() {
            return pb_1.Message.getWrapperField(this, dependency_4.tendermint.version.Consensus, 1);
          }
          set version(value) {
            pb_1.Message.setWrapperField(this, 1, value);
          }
          get chain_id() {
            return pb_1.Message.getField(this, 2);
          }
          set chain_id(value) {
            pb_1.Message.setField(this, 2, value);
          }
          get height() {
            return pb_1.Message.getField(this, 3);
          }
          set height(value) {
            pb_1.Message.setField(this, 3, value);
          }
          get time() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 4);
          }
          set time(value) {
            pb_1.Message.setWrapperField(this, 4, value);
          }
          get last_block_id() {
            return pb_1.Message.getWrapperField(this, BlockID, 5);
          }
          set last_block_id(value) {
            pb_1.Message.setWrapperField(this, 5, value);
          }
          get last_commit_hash() {
            return pb_1.Message.getField(this, 6);
          }
          set last_commit_hash(value) {
            pb_1.Message.setField(this, 6, value);
          }
          get data_hash() {
            return pb_1.Message.getField(this, 7);
          }
          set data_hash(value) {
            pb_1.Message.setField(this, 7, value);
          }
          get validators_hash() {
            return pb_1.Message.getField(this, 8);
          }
          set validators_hash(value) {
            pb_1.Message.setField(this, 8, value);
          }
          get next_validators_hash() {
            return pb_1.Message.getField(this, 9);
          }
          set next_validators_hash(value) {
            pb_1.Message.setField(this, 9, value);
          }
          get consensus_hash() {
            return pb_1.Message.getField(this, 10);
          }
          set consensus_hash(value) {
            pb_1.Message.setField(this, 10, value);
          }
          get app_hash() {
            return pb_1.Message.getField(this, 11);
          }
          set app_hash(value) {
            pb_1.Message.setField(this, 11, value);
          }
          get last_results_hash() {
            return pb_1.Message.getField(this, 12);
          }
          set last_results_hash(value) {
            pb_1.Message.setField(this, 12, value);
          }
          get evidence_hash() {
            return pb_1.Message.getField(this, 13);
          }
          set evidence_hash(value) {
            pb_1.Message.setField(this, 13, value);
          }
          get proposer_address() {
            return pb_1.Message.getField(this, 14);
          }
          set proposer_address(value) {
            pb_1.Message.setField(this, 14, value);
          }
          static fromObject(data) {
            const message = new Header({});
            if (data.version != null) {
              message.version = dependency_4.tendermint.version.Consensus.fromObject(data.version);
            }
            if (data.chain_id != null) {
              message.chain_id = data.chain_id;
            }
            if (data.height != null) {
              message.height = data.height;
            }
            if (data.time != null) {
              message.time = dependency_2.google.protobuf.Timestamp.fromObject(data.time);
            }
            if (data.last_block_id != null) {
              message.last_block_id = BlockID.fromObject(data.last_block_id);
            }
            if (data.last_commit_hash != null) {
              message.last_commit_hash = data.last_commit_hash;
            }
            if (data.data_hash != null) {
              message.data_hash = data.data_hash;
            }
            if (data.validators_hash != null) {
              message.validators_hash = data.validators_hash;
            }
            if (data.next_validators_hash != null) {
              message.next_validators_hash = data.next_validators_hash;
            }
            if (data.consensus_hash != null) {
              message.consensus_hash = data.consensus_hash;
            }
            if (data.app_hash != null) {
              message.app_hash = data.app_hash;
            }
            if (data.last_results_hash != null) {
              message.last_results_hash = data.last_results_hash;
            }
            if (data.evidence_hash != null) {
              message.evidence_hash = data.evidence_hash;
            }
            if (data.proposer_address != null) {
              message.proposer_address = data.proposer_address;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.version != null) {
              data.version = this.version.toObject();
            }
            if (this.chain_id != null) {
              data.chain_id = this.chain_id;
            }
            if (this.height != null) {
              data.height = this.height;
            }
            if (this.time != null) {
              data.time = this.time.toObject();
            }
            if (this.last_block_id != null) {
              data.last_block_id = this.last_block_id.toObject();
            }
            if (this.last_commit_hash != null) {
              data.last_commit_hash = this.last_commit_hash;
            }
            if (this.data_hash != null) {
              data.data_hash = this.data_hash;
            }
            if (this.validators_hash != null) {
              data.validators_hash = this.validators_hash;
            }
            if (this.next_validators_hash != null) {
              data.next_validators_hash = this.next_validators_hash;
            }
            if (this.consensus_hash != null) {
              data.consensus_hash = this.consensus_hash;
            }
            if (this.app_hash != null) {
              data.app_hash = this.app_hash;
            }
            if (this.last_results_hash != null) {
              data.last_results_hash = this.last_results_hash;
            }
            if (this.evidence_hash != null) {
              data.evidence_hash = this.evidence_hash;
            }
            if (this.proposer_address != null) {
              data.proposer_address = this.proposer_address;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.version !== void 0)
              writer.writeMessage(1, this.version, () => this.version.serialize(writer));
            if (typeof this.chain_id === "string" && this.chain_id.length)
              writer.writeString(2, this.chain_id);
            if (this.height !== void 0)
              writer.writeInt64(3, this.height);
            if (this.time !== void 0)
              writer.writeMessage(4, this.time, () => this.time.serialize(writer));
            if (this.last_block_id !== void 0)
              writer.writeMessage(5, this.last_block_id, () => this.last_block_id.serialize(writer));
            if (this.last_commit_hash !== void 0)
              writer.writeBytes(6, this.last_commit_hash);
            if (this.data_hash !== void 0)
              writer.writeBytes(7, this.data_hash);
            if (this.validators_hash !== void 0)
              writer.writeBytes(8, this.validators_hash);
            if (this.next_validators_hash !== void 0)
              writer.writeBytes(9, this.next_validators_hash);
            if (this.consensus_hash !== void 0)
              writer.writeBytes(10, this.consensus_hash);
            if (this.app_hash !== void 0)
              writer.writeBytes(11, this.app_hash);
            if (this.last_results_hash !== void 0)
              writer.writeBytes(12, this.last_results_hash);
            if (this.evidence_hash !== void 0)
              writer.writeBytes(13, this.evidence_hash);
            if (this.proposer_address !== void 0)
              writer.writeBytes(14, this.proposer_address);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Header();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  reader.readMessage(message.version, () => message.version = dependency_4.tendermint.version.Consensus.deserialize(reader));
                  break;
                case 2:
                  message.chain_id = reader.readString();
                  break;
                case 3:
                  message.height = reader.readInt64();
                  break;
                case 4:
                  reader.readMessage(message.time, () => message.time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                  break;
                case 5:
                  reader.readMessage(message.last_block_id, () => message.last_block_id = BlockID.deserialize(reader));
                  break;
                case 6:
                  message.last_commit_hash = reader.readBytes();
                  break;
                case 7:
                  message.data_hash = reader.readBytes();
                  break;
                case 8:
                  message.validators_hash = reader.readBytes();
                  break;
                case 9:
                  message.next_validators_hash = reader.readBytes();
                  break;
                case 10:
                  message.consensus_hash = reader.readBytes();
                  break;
                case 11:
                  message.app_hash = reader.readBytes();
                  break;
                case 12:
                  message.last_results_hash = reader.readBytes();
                  break;
                case 13:
                  message.evidence_hash = reader.readBytes();
                  break;
                case 14:
                  message.proposer_address = reader.readBytes();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return Header.deserialize(bytes);
          }
        }
        types2.Header = Header;
        class Data extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("txs" in data && data.txs != void 0) {
                this.txs = data.txs;
              }
            }
          }
          get txs() {
            return pb_1.Message.getField(this, 1);
          }
          set txs(value) {
            pb_1.Message.setField(this, 1, value);
          }
          static fromObject(data) {
            const message = new Data({});
            if (data.txs != null) {
              message.txs = data.txs;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.txs != null) {
              data.txs = this.txs;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.txs !== void 0)
              writer.writeRepeatedBytes(1, this.txs);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Data();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return Data.deserialize(bytes);
          }
        }
        types2.Data = Data;
        class Vote extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("type" in data && data.type != void 0) {
                this.type = data.type;
              }
              if ("height" in data && data.height != void 0) {
                this.height = data.height;
              }
              if ("round" in data && data.round != void 0) {
                this.round = data.round;
              }
              if ("block_id" in data && data.block_id != void 0) {
                this.block_id = data.block_id;
              }
              if ("timestamp" in data && data.timestamp != void 0) {
                this.timestamp = data.timestamp;
              }
              if ("validator_address" in data && data.validator_address != void 0) {
                this.validator_address = data.validator_address;
              }
              if ("validator_index" in data && data.validator_index != void 0) {
                this.validator_index = data.validator_index;
              }
              if ("signature" in data && data.signature != void 0) {
                this.signature = data.signature;
              }
            }
          }
          get type() {
            return pb_1.Message.getField(this, 1);
          }
          set type(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get height() {
            return pb_1.Message.getField(this, 2);
          }
          set height(value) {
            pb_1.Message.setField(this, 2, value);
          }
          get round() {
            return pb_1.Message.getField(this, 3);
          }
          set round(value) {
            pb_1.Message.setField(this, 3, value);
          }
          get block_id() {
            return pb_1.Message.getWrapperField(this, BlockID, 4);
          }
          set block_id(value) {
            pb_1.Message.setWrapperField(this, 4, value);
          }
          get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 5);
          }
          set timestamp(value) {
            pb_1.Message.setWrapperField(this, 5, value);
          }
          get validator_address() {
            return pb_1.Message.getField(this, 6);
          }
          set validator_address(value) {
            pb_1.Message.setField(this, 6, value);
          }
          get validator_index() {
            return pb_1.Message.getField(this, 7);
          }
          set validator_index(value) {
            pb_1.Message.setField(this, 7, value);
          }
          get signature() {
            return pb_1.Message.getField(this, 8);
          }
          set signature(value) {
            pb_1.Message.setField(this, 8, value);
          }
          static fromObject(data) {
            const message = new Vote({});
            if (data.type != null) {
              message.type = data.type;
            }
            if (data.height != null) {
              message.height = data.height;
            }
            if (data.round != null) {
              message.round = data.round;
            }
            if (data.block_id != null) {
              message.block_id = BlockID.fromObject(data.block_id);
            }
            if (data.timestamp != null) {
              message.timestamp = dependency_2.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.validator_address != null) {
              message.validator_address = data.validator_address;
            }
            if (data.validator_index != null) {
              message.validator_index = data.validator_index;
            }
            if (data.signature != null) {
              message.signature = data.signature;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.type != null) {
              data.type = this.type;
            }
            if (this.height != null) {
              data.height = this.height;
            }
            if (this.round != null) {
              data.round = this.round;
            }
            if (this.block_id != null) {
              data.block_id = this.block_id.toObject();
            }
            if (this.timestamp != null) {
              data.timestamp = this.timestamp.toObject();
            }
            if (this.validator_address != null) {
              data.validator_address = this.validator_address;
            }
            if (this.validator_index != null) {
              data.validator_index = this.validator_index;
            }
            if (this.signature != null) {
              data.signature = this.signature;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type !== void 0)
              writer.writeEnum(1, this.type);
            if (this.height !== void 0)
              writer.writeInt64(2, this.height);
            if (this.round !== void 0)
              writer.writeInt32(3, this.round);
            if (this.block_id !== void 0)
              writer.writeMessage(4, this.block_id, () => this.block_id.serialize(writer));
            if (this.timestamp !== void 0)
              writer.writeMessage(5, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.validator_address !== void 0)
              writer.writeBytes(6, this.validator_address);
            if (this.validator_index !== void 0)
              writer.writeInt32(7, this.validator_index);
            if (this.signature !== void 0)
              writer.writeBytes(8, this.signature);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vote();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.type = reader.readEnum();
                  break;
                case 2:
                  message.height = reader.readInt64();
                  break;
                case 3:
                  message.round = reader.readInt32();
                  break;
                case 4:
                  reader.readMessage(message.block_id, () => message.block_id = BlockID.deserialize(reader));
                  break;
                case 5:
                  reader.readMessage(message.timestamp, () => message.timestamp = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                  break;
                case 6:
                  message.validator_address = reader.readBytes();
                  break;
                case 7:
                  message.validator_index = reader.readInt32();
                  break;
                case 8:
                  message.signature = reader.readBytes();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return Vote.deserialize(bytes);
          }
        }
        types2.Vote = Vote;
        class Commit extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("height" in data && data.height != void 0) {
                this.height = data.height;
              }
              if ("round" in data && data.round != void 0) {
                this.round = data.round;
              }
              if ("block_id" in data && data.block_id != void 0) {
                this.block_id = data.block_id;
              }
              if ("signatures" in data && data.signatures != void 0) {
                this.signatures = data.signatures;
              }
            }
          }
          get height() {
            return pb_1.Message.getField(this, 1);
          }
          set height(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get round() {
            return pb_1.Message.getField(this, 2);
          }
          set round(value) {
            pb_1.Message.setField(this, 2, value);
          }
          get block_id() {
            return pb_1.Message.getWrapperField(this, BlockID, 3);
          }
          set block_id(value) {
            pb_1.Message.setWrapperField(this, 3, value);
          }
          get signatures() {
            return pb_1.Message.getRepeatedWrapperField(this, CommitSig, 4);
          }
          set signatures(value) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
          }
          static fromObject(data) {
            const message = new Commit({});
            if (data.height != null) {
              message.height = data.height;
            }
            if (data.round != null) {
              message.round = data.round;
            }
            if (data.block_id != null) {
              message.block_id = BlockID.fromObject(data.block_id);
            }
            if (data.signatures != null) {
              message.signatures = data.signatures.map((item) => CommitSig.fromObject(item));
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.height != null) {
              data.height = this.height;
            }
            if (this.round != null) {
              data.round = this.round;
            }
            if (this.block_id != null) {
              data.block_id = this.block_id.toObject();
            }
            if (this.signatures != null) {
              data.signatures = this.signatures.map((item) => item.toObject());
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.height !== void 0)
              writer.writeInt64(1, this.height);
            if (this.round !== void 0)
              writer.writeInt32(2, this.round);
            if (this.block_id !== void 0)
              writer.writeMessage(3, this.block_id, () => this.block_id.serialize(writer));
            if (this.signatures !== void 0)
              writer.writeRepeatedMessage(4, this.signatures, (item) => item.serialize(writer));
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Commit();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.height = reader.readInt64();
                  break;
                case 2:
                  message.round = reader.readInt32();
                  break;
                case 3:
                  reader.readMessage(message.block_id, () => message.block_id = BlockID.deserialize(reader));
                  break;
                case 4:
                  reader.readMessage(message.signatures, () => pb_1.Message.addToRepeatedWrapperField(message, 4, CommitSig.deserialize(reader), CommitSig));
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return Commit.deserialize(bytes);
          }
        }
        types2.Commit = Commit;
        class CommitSig extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("block_id_flag" in data && data.block_id_flag != void 0) {
                this.block_id_flag = data.block_id_flag;
              }
              if ("validator_address" in data && data.validator_address != void 0) {
                this.validator_address = data.validator_address;
              }
              if ("timestamp" in data && data.timestamp != void 0) {
                this.timestamp = data.timestamp;
              }
              if ("signature" in data && data.signature != void 0) {
                this.signature = data.signature;
              }
            }
          }
          get block_id_flag() {
            return pb_1.Message.getField(this, 1);
          }
          set block_id_flag(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get validator_address() {
            return pb_1.Message.getField(this, 2);
          }
          set validator_address(value) {
            pb_1.Message.setField(this, 2, value);
          }
          get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 3);
          }
          set timestamp(value) {
            pb_1.Message.setWrapperField(this, 3, value);
          }
          get signature() {
            return pb_1.Message.getField(this, 4);
          }
          set signature(value) {
            pb_1.Message.setField(this, 4, value);
          }
          static fromObject(data) {
            const message = new CommitSig({});
            if (data.block_id_flag != null) {
              message.block_id_flag = data.block_id_flag;
            }
            if (data.validator_address != null) {
              message.validator_address = data.validator_address;
            }
            if (data.timestamp != null) {
              message.timestamp = dependency_2.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.signature != null) {
              message.signature = data.signature;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.block_id_flag != null) {
              data.block_id_flag = this.block_id_flag;
            }
            if (this.validator_address != null) {
              data.validator_address = this.validator_address;
            }
            if (this.timestamp != null) {
              data.timestamp = this.timestamp.toObject();
            }
            if (this.signature != null) {
              data.signature = this.signature;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_id_flag !== void 0)
              writer.writeEnum(1, this.block_id_flag);
            if (this.validator_address !== void 0)
              writer.writeBytes(2, this.validator_address);
            if (this.timestamp !== void 0)
              writer.writeMessage(3, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.signature !== void 0)
              writer.writeBytes(4, this.signature);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommitSig();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.block_id_flag = reader.readEnum();
                  break;
                case 2:
                  message.validator_address = reader.readBytes();
                  break;
                case 3:
                  reader.readMessage(message.timestamp, () => message.timestamp = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                  break;
                case 4:
                  message.signature = reader.readBytes();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return CommitSig.deserialize(bytes);
          }
        }
        types2.CommitSig = CommitSig;
        class Proposal extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("type" in data && data.type != void 0) {
                this.type = data.type;
              }
              if ("height" in data && data.height != void 0) {
                this.height = data.height;
              }
              if ("round" in data && data.round != void 0) {
                this.round = data.round;
              }
              if ("pol_round" in data && data.pol_round != void 0) {
                this.pol_round = data.pol_round;
              }
              if ("block_id" in data && data.block_id != void 0) {
                this.block_id = data.block_id;
              }
              if ("timestamp" in data && data.timestamp != void 0) {
                this.timestamp = data.timestamp;
              }
              if ("signature" in data && data.signature != void 0) {
                this.signature = data.signature;
              }
            }
          }
          get type() {
            return pb_1.Message.getField(this, 1);
          }
          set type(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get height() {
            return pb_1.Message.getField(this, 2);
          }
          set height(value) {
            pb_1.Message.setField(this, 2, value);
          }
          get round() {
            return pb_1.Message.getField(this, 3);
          }
          set round(value) {
            pb_1.Message.setField(this, 3, value);
          }
          get pol_round() {
            return pb_1.Message.getField(this, 4);
          }
          set pol_round(value) {
            pb_1.Message.setField(this, 4, value);
          }
          get block_id() {
            return pb_1.Message.getWrapperField(this, BlockID, 5);
          }
          set block_id(value) {
            pb_1.Message.setWrapperField(this, 5, value);
          }
          get timestamp() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 6);
          }
          set timestamp(value) {
            pb_1.Message.setWrapperField(this, 6, value);
          }
          get signature() {
            return pb_1.Message.getField(this, 7);
          }
          set signature(value) {
            pb_1.Message.setField(this, 7, value);
          }
          static fromObject(data) {
            const message = new Proposal({});
            if (data.type != null) {
              message.type = data.type;
            }
            if (data.height != null) {
              message.height = data.height;
            }
            if (data.round != null) {
              message.round = data.round;
            }
            if (data.pol_round != null) {
              message.pol_round = data.pol_round;
            }
            if (data.block_id != null) {
              message.block_id = BlockID.fromObject(data.block_id);
            }
            if (data.timestamp != null) {
              message.timestamp = dependency_2.google.protobuf.Timestamp.fromObject(data.timestamp);
            }
            if (data.signature != null) {
              message.signature = data.signature;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.type != null) {
              data.type = this.type;
            }
            if (this.height != null) {
              data.height = this.height;
            }
            if (this.round != null) {
              data.round = this.round;
            }
            if (this.pol_round != null) {
              data.pol_round = this.pol_round;
            }
            if (this.block_id != null) {
              data.block_id = this.block_id.toObject();
            }
            if (this.timestamp != null) {
              data.timestamp = this.timestamp.toObject();
            }
            if (this.signature != null) {
              data.signature = this.signature;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type !== void 0)
              writer.writeEnum(1, this.type);
            if (this.height !== void 0)
              writer.writeInt64(2, this.height);
            if (this.round !== void 0)
              writer.writeInt32(3, this.round);
            if (this.pol_round !== void 0)
              writer.writeInt32(4, this.pol_round);
            if (this.block_id !== void 0)
              writer.writeMessage(5, this.block_id, () => this.block_id.serialize(writer));
            if (this.timestamp !== void 0)
              writer.writeMessage(6, this.timestamp, () => this.timestamp.serialize(writer));
            if (this.signature !== void 0)
              writer.writeBytes(7, this.signature);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Proposal();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.type = reader.readEnum();
                  break;
                case 2:
                  message.height = reader.readInt64();
                  break;
                case 3:
                  message.round = reader.readInt32();
                  break;
                case 4:
                  message.pol_round = reader.readInt32();
                  break;
                case 5:
                  reader.readMessage(message.block_id, () => message.block_id = BlockID.deserialize(reader));
                  break;
                case 6:
                  reader.readMessage(message.timestamp, () => message.timestamp = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                  break;
                case 7:
                  message.signature = reader.readBytes();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return Proposal.deserialize(bytes);
          }
        }
        types2.Proposal = Proposal;
        class SignedHeader extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("header" in data && data.header != void 0) {
                this.header = data.header;
              }
              if ("commit" in data && data.commit != void 0) {
                this.commit = data.commit;
              }
            }
          }
          get header() {
            return pb_1.Message.getWrapperField(this, Header, 1);
          }
          set header(value) {
            pb_1.Message.setWrapperField(this, 1, value);
          }
          get commit() {
            return pb_1.Message.getWrapperField(this, Commit, 2);
          }
          set commit(value) {
            pb_1.Message.setWrapperField(this, 2, value);
          }
          static fromObject(data) {
            const message = new SignedHeader({});
            if (data.header != null) {
              message.header = Header.fromObject(data.header);
            }
            if (data.commit != null) {
              message.commit = Commit.fromObject(data.commit);
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.header != null) {
              data.header = this.header.toObject();
            }
            if (this.commit != null) {
              data.commit = this.commit.toObject();
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.header !== void 0)
              writer.writeMessage(1, this.header, () => this.header.serialize(writer));
            if (this.commit !== void 0)
              writer.writeMessage(2, this.commit, () => this.commit.serialize(writer));
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignedHeader();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  reader.readMessage(message.header, () => message.header = Header.deserialize(reader));
                  break;
                case 2:
                  reader.readMessage(message.commit, () => message.commit = Commit.deserialize(reader));
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return SignedHeader.deserialize(bytes);
          }
        }
        types2.SignedHeader = SignedHeader;
        class LightBlock extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("signed_header" in data && data.signed_header != void 0) {
                this.signed_header = data.signed_header;
              }
              if ("validator_set" in data && data.validator_set != void 0) {
                this.validator_set = data.validator_set;
              }
            }
          }
          get signed_header() {
            return pb_1.Message.getWrapperField(this, SignedHeader, 1);
          }
          set signed_header(value) {
            pb_1.Message.setWrapperField(this, 1, value);
          }
          get validator_set() {
            return pb_1.Message.getWrapperField(this, dependency_5.tendermint.types.ValidatorSet, 2);
          }
          set validator_set(value) {
            pb_1.Message.setWrapperField(this, 2, value);
          }
          static fromObject(data) {
            const message = new LightBlock({});
            if (data.signed_header != null) {
              message.signed_header = SignedHeader.fromObject(data.signed_header);
            }
            if (data.validator_set != null) {
              message.validator_set = dependency_5.tendermint.types.ValidatorSet.fromObject(data.validator_set);
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.signed_header != null) {
              data.signed_header = this.signed_header.toObject();
            }
            if (this.validator_set != null) {
              data.validator_set = this.validator_set.toObject();
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.signed_header !== void 0)
              writer.writeMessage(1, this.signed_header, () => this.signed_header.serialize(writer));
            if (this.validator_set !== void 0)
              writer.writeMessage(2, this.validator_set, () => this.validator_set.serialize(writer));
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LightBlock();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  reader.readMessage(message.signed_header, () => message.signed_header = SignedHeader.deserialize(reader));
                  break;
                case 2:
                  reader.readMessage(message.validator_set, () => message.validator_set = dependency_5.tendermint.types.ValidatorSet.deserialize(reader));
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return LightBlock.deserialize(bytes);
          }
        }
        types2.LightBlock = LightBlock;
        class BlockMeta extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("block_id" in data && data.block_id != void 0) {
                this.block_id = data.block_id;
              }
              if ("block_size" in data && data.block_size != void 0) {
                this.block_size = data.block_size;
              }
              if ("header" in data && data.header != void 0) {
                this.header = data.header;
              }
              if ("num_txs" in data && data.num_txs != void 0) {
                this.num_txs = data.num_txs;
              }
            }
          }
          get block_id() {
            return pb_1.Message.getWrapperField(this, BlockID, 1);
          }
          set block_id(value) {
            pb_1.Message.setWrapperField(this, 1, value);
          }
          get block_size() {
            return pb_1.Message.getField(this, 2);
          }
          set block_size(value) {
            pb_1.Message.setField(this, 2, value);
          }
          get header() {
            return pb_1.Message.getWrapperField(this, Header, 3);
          }
          set header(value) {
            pb_1.Message.setWrapperField(this, 3, value);
          }
          get num_txs() {
            return pb_1.Message.getField(this, 4);
          }
          set num_txs(value) {
            pb_1.Message.setField(this, 4, value);
          }
          static fromObject(data) {
            const message = new BlockMeta({});
            if (data.block_id != null) {
              message.block_id = BlockID.fromObject(data.block_id);
            }
            if (data.block_size != null) {
              message.block_size = data.block_size;
            }
            if (data.header != null) {
              message.header = Header.fromObject(data.header);
            }
            if (data.num_txs != null) {
              message.num_txs = data.num_txs;
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.block_id != null) {
              data.block_id = this.block_id.toObject();
            }
            if (this.block_size != null) {
              data.block_size = this.block_size;
            }
            if (this.header != null) {
              data.header = this.header.toObject();
            }
            if (this.num_txs != null) {
              data.num_txs = this.num_txs;
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_id !== void 0)
              writer.writeMessage(1, this.block_id, () => this.block_id.serialize(writer));
            if (this.block_size !== void 0)
              writer.writeInt64(2, this.block_size);
            if (this.header !== void 0)
              writer.writeMessage(3, this.header, () => this.header.serialize(writer));
            if (this.num_txs !== void 0)
              writer.writeInt64(4, this.num_txs);
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockMeta();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  reader.readMessage(message.block_id, () => message.block_id = BlockID.deserialize(reader));
                  break;
                case 2:
                  message.block_size = reader.readInt64();
                  break;
                case 3:
                  reader.readMessage(message.header, () => message.header = Header.deserialize(reader));
                  break;
                case 4:
                  message.num_txs = reader.readInt64();
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return BlockMeta.deserialize(bytes);
          }
        }
        types2.BlockMeta = BlockMeta;
        class TxProof extends pb_1.Message {
          constructor(data) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
              if ("root_hash" in data && data.root_hash != void 0) {
                this.root_hash = data.root_hash;
              }
              if ("data" in data && data.data != void 0) {
                this.data = data.data;
              }
              if ("proof" in data && data.proof != void 0) {
                this.proof = data.proof;
              }
            }
          }
          get root_hash() {
            return pb_1.Message.getField(this, 1);
          }
          set root_hash(value) {
            pb_1.Message.setField(this, 1, value);
          }
          get data() {
            return pb_1.Message.getField(this, 2);
          }
          set data(value) {
            pb_1.Message.setField(this, 2, value);
          }
          get proof() {
            return pb_1.Message.getWrapperField(this, dependency_3.tendermint.crypto.Proof, 3);
          }
          set proof(value) {
            pb_1.Message.setWrapperField(this, 3, value);
          }
          static fromObject(data) {
            const message = new TxProof({});
            if (data.root_hash != null) {
              message.root_hash = data.root_hash;
            }
            if (data.data != null) {
              message.data = data.data;
            }
            if (data.proof != null) {
              message.proof = dependency_3.tendermint.crypto.Proof.fromObject(data.proof);
            }
            return message;
          }
          toObject() {
            const data = {};
            if (this.root_hash != null) {
              data.root_hash = this.root_hash;
            }
            if (this.data != null) {
              data.data = this.data;
            }
            if (this.proof != null) {
              data.proof = this.proof.toObject();
            }
            return data;
          }
          serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.root_hash !== void 0)
              writer.writeBytes(1, this.root_hash);
            if (this.data !== void 0)
              writer.writeBytes(2, this.data);
            if (this.proof !== void 0)
              writer.writeMessage(3, this.proof, () => this.proof.serialize(writer));
            if (!w)
              return writer.getResultBuffer();
          }
          static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TxProof();
            while (reader.nextField()) {
              if (reader.isEndGroup())
                break;
              switch (reader.getFieldNumber()) {
                case 1:
                  message.root_hash = reader.readBytes();
                  break;
                case 2:
                  message.data = reader.readBytes();
                  break;
                case 3:
                  reader.readMessage(message.proof, () => message.proof = dependency_3.tendermint.crypto.Proof.deserialize(reader));
                  break;
                default:
                  reader.skipField();
              }
            }
            return message;
          }
          serializeBinary() {
            return this.serialize();
          }
          static deserializeBinary(bytes) {
            return TxProof.deserialize(bytes);
          }
        }
        types2.TxProof = TxProof;
      })(types = tendermint2.types || (tendermint2.types = {}));
    })(tendermint = exports.tendermint || (exports.tendermint = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/cosmos/staking/v1beta1/staking.js
var require_staking = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/cosmos/staking/v1beta1/staking.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cosmos = void 0;
    var dependency_2 = __importStar(require_any());
    var dependency_3 = __importStar(require_duration());
    var dependency_4 = __importStar(require_timestamp());
    var dependency_6 = __importStar(require_coin());
    var dependency_7 = __importStar(require_types2());
    var pb_1 = __importStar(require_google_protobuf());
    var cosmos;
    (function(cosmos2) {
      var staking;
      (function(staking2) {
        var v1beta1;
        (function(v1beta12) {
          let BondStatus;
          (function(BondStatus2) {
            BondStatus2[BondStatus2["BOND_STATUS_UNSPECIFIED"] = 0] = "BOND_STATUS_UNSPECIFIED";
            BondStatus2[BondStatus2["BOND_STATUS_UNBONDED"] = 1] = "BOND_STATUS_UNBONDED";
            BondStatus2[BondStatus2["BOND_STATUS_UNBONDING"] = 2] = "BOND_STATUS_UNBONDING";
            BondStatus2[BondStatus2["BOND_STATUS_BONDED"] = 3] = "BOND_STATUS_BONDED";
          })(BondStatus = v1beta12.BondStatus || (v1beta12.BondStatus = {}));
          class HistoricalInfo extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("header" in data && data.header != void 0) {
                  this.header = data.header;
                }
                if ("valset" in data && data.valset != void 0) {
                  this.valset = data.valset;
                }
              }
            }
            get header() {
              return pb_1.Message.getWrapperField(this, dependency_7.tendermint.types.Header, 1);
            }
            set header(value) {
              pb_1.Message.setWrapperField(this, 1, value);
            }
            get valset() {
              return pb_1.Message.getRepeatedWrapperField(this, Validator, 2);
            }
            set valset(value) {
              pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data) {
              const message = new HistoricalInfo({});
              if (data.header != null) {
                message.header = dependency_7.tendermint.types.Header.fromObject(data.header);
              }
              if (data.valset != null) {
                message.valset = data.valset.map((item) => Validator.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.header != null) {
                data.header = this.header.toObject();
              }
              if (this.valset != null) {
                data.valset = this.valset.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.header !== void 0)
                writer.writeMessage(1, this.header, () => this.header.serialize(writer));
              if (this.valset !== void 0)
                writer.writeRepeatedMessage(2, this.valset, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HistoricalInfo();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.header, () => message.header = dependency_7.tendermint.types.Header.deserialize(reader));
                    break;
                  case 2:
                    reader.readMessage(message.valset, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Validator.deserialize(reader), Validator));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return HistoricalInfo.deserialize(bytes);
            }
          }
          v1beta12.HistoricalInfo = HistoricalInfo;
          class CommissionRates extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("rate" in data && data.rate != void 0) {
                  this.rate = data.rate;
                }
                if ("max_rate" in data && data.max_rate != void 0) {
                  this.max_rate = data.max_rate;
                }
                if ("max_change_rate" in data && data.max_change_rate != void 0) {
                  this.max_change_rate = data.max_change_rate;
                }
              }
            }
            get rate() {
              return pb_1.Message.getField(this, 1);
            }
            set rate(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get max_rate() {
              return pb_1.Message.getField(this, 2);
            }
            set max_rate(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get max_change_rate() {
              return pb_1.Message.getField(this, 3);
            }
            set max_change_rate(value) {
              pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data) {
              const message = new CommissionRates({});
              if (data.rate != null) {
                message.rate = data.rate;
              }
              if (data.max_rate != null) {
                message.max_rate = data.max_rate;
              }
              if (data.max_change_rate != null) {
                message.max_change_rate = data.max_change_rate;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.rate != null) {
                data.rate = this.rate;
              }
              if (this.max_rate != null) {
                data.max_rate = this.max_rate;
              }
              if (this.max_change_rate != null) {
                data.max_change_rate = this.max_change_rate;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.rate === "string" && this.rate.length)
                writer.writeString(1, this.rate);
              if (typeof this.max_rate === "string" && this.max_rate.length)
                writer.writeString(2, this.max_rate);
              if (typeof this.max_change_rate === "string" && this.max_change_rate.length)
                writer.writeString(3, this.max_change_rate);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CommissionRates();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.rate = reader.readString();
                    break;
                  case 2:
                    message.max_rate = reader.readString();
                    break;
                  case 3:
                    message.max_change_rate = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return CommissionRates.deserialize(bytes);
            }
          }
          v1beta12.CommissionRates = CommissionRates;
          class Commission extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("commission_rates" in data && data.commission_rates != void 0) {
                  this.commission_rates = data.commission_rates;
                }
                if ("update_time" in data && data.update_time != void 0) {
                  this.update_time = data.update_time;
                }
              }
            }
            get commission_rates() {
              return pb_1.Message.getWrapperField(this, CommissionRates, 1);
            }
            set commission_rates(value) {
              pb_1.Message.setWrapperField(this, 1, value);
            }
            get update_time() {
              return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 2);
            }
            set update_time(value) {
              pb_1.Message.setWrapperField(this, 2, value);
            }
            static fromObject(data) {
              const message = new Commission({});
              if (data.commission_rates != null) {
                message.commission_rates = CommissionRates.fromObject(data.commission_rates);
              }
              if (data.update_time != null) {
                message.update_time = dependency_4.google.protobuf.Timestamp.fromObject(data.update_time);
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.commission_rates != null) {
                data.commission_rates = this.commission_rates.toObject();
              }
              if (this.update_time != null) {
                data.update_time = this.update_time.toObject();
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.commission_rates !== void 0)
                writer.writeMessage(1, this.commission_rates, () => this.commission_rates.serialize(writer));
              if (this.update_time !== void 0)
                writer.writeMessage(2, this.update_time, () => this.update_time.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Commission();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.commission_rates, () => message.commission_rates = CommissionRates.deserialize(reader));
                    break;
                  case 2:
                    reader.readMessage(message.update_time, () => message.update_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Commission.deserialize(bytes);
            }
          }
          v1beta12.Commission = Commission;
          class Description extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("moniker" in data && data.moniker != void 0) {
                  this.moniker = data.moniker;
                }
                if ("identity" in data && data.identity != void 0) {
                  this.identity = data.identity;
                }
                if ("website" in data && data.website != void 0) {
                  this.website = data.website;
                }
                if ("security_contact" in data && data.security_contact != void 0) {
                  this.security_contact = data.security_contact;
                }
                if ("details" in data && data.details != void 0) {
                  this.details = data.details;
                }
              }
            }
            get moniker() {
              return pb_1.Message.getField(this, 1);
            }
            set moniker(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get identity() {
              return pb_1.Message.getField(this, 2);
            }
            set identity(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get website() {
              return pb_1.Message.getField(this, 3);
            }
            set website(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get security_contact() {
              return pb_1.Message.getField(this, 4);
            }
            set security_contact(value) {
              pb_1.Message.setField(this, 4, value);
            }
            get details() {
              return pb_1.Message.getField(this, 5);
            }
            set details(value) {
              pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data) {
              const message = new Description({});
              if (data.moniker != null) {
                message.moniker = data.moniker;
              }
              if (data.identity != null) {
                message.identity = data.identity;
              }
              if (data.website != null) {
                message.website = data.website;
              }
              if (data.security_contact != null) {
                message.security_contact = data.security_contact;
              }
              if (data.details != null) {
                message.details = data.details;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.moniker != null) {
                data.moniker = this.moniker;
              }
              if (this.identity != null) {
                data.identity = this.identity;
              }
              if (this.website != null) {
                data.website = this.website;
              }
              if (this.security_contact != null) {
                data.security_contact = this.security_contact;
              }
              if (this.details != null) {
                data.details = this.details;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.moniker === "string" && this.moniker.length)
                writer.writeString(1, this.moniker);
              if (typeof this.identity === "string" && this.identity.length)
                writer.writeString(2, this.identity);
              if (typeof this.website === "string" && this.website.length)
                writer.writeString(3, this.website);
              if (typeof this.security_contact === "string" && this.security_contact.length)
                writer.writeString(4, this.security_contact);
              if (typeof this.details === "string" && this.details.length)
                writer.writeString(5, this.details);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Description();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.moniker = reader.readString();
                    break;
                  case 2:
                    message.identity = reader.readString();
                    break;
                  case 3:
                    message.website = reader.readString();
                    break;
                  case 4:
                    message.security_contact = reader.readString();
                    break;
                  case 5:
                    message.details = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Description.deserialize(bytes);
            }
          }
          v1beta12.Description = Description;
          class Validator extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("operator_address" in data && data.operator_address != void 0) {
                  this.operator_address = data.operator_address;
                }
                if ("consensus_pubkey" in data && data.consensus_pubkey != void 0) {
                  this.consensus_pubkey = data.consensus_pubkey;
                }
                if ("jailed" in data && data.jailed != void 0) {
                  this.jailed = data.jailed;
                }
                if ("status" in data && data.status != void 0) {
                  this.status = data.status;
                }
                if ("tokens" in data && data.tokens != void 0) {
                  this.tokens = data.tokens;
                }
                if ("delegator_shares" in data && data.delegator_shares != void 0) {
                  this.delegator_shares = data.delegator_shares;
                }
                if ("description" in data && data.description != void 0) {
                  this.description = data.description;
                }
                if ("unbonding_height" in data && data.unbonding_height != void 0) {
                  this.unbonding_height = data.unbonding_height;
                }
                if ("unbonding_time" in data && data.unbonding_time != void 0) {
                  this.unbonding_time = data.unbonding_time;
                }
                if ("commission" in data && data.commission != void 0) {
                  this.commission = data.commission;
                }
                if ("min_self_delegation" in data && data.min_self_delegation != void 0) {
                  this.min_self_delegation = data.min_self_delegation;
                }
              }
            }
            get operator_address() {
              return pb_1.Message.getField(this, 1);
            }
            set operator_address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get consensus_pubkey() {
              return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Any, 2);
            }
            set consensus_pubkey(value) {
              pb_1.Message.setWrapperField(this, 2, value);
            }
            get jailed() {
              return pb_1.Message.getField(this, 3);
            }
            set jailed(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get status() {
              return pb_1.Message.getField(this, 4);
            }
            set status(value) {
              pb_1.Message.setField(this, 4, value);
            }
            get tokens() {
              return pb_1.Message.getField(this, 5);
            }
            set tokens(value) {
              pb_1.Message.setField(this, 5, value);
            }
            get delegator_shares() {
              return pb_1.Message.getField(this, 6);
            }
            set delegator_shares(value) {
              pb_1.Message.setField(this, 6, value);
            }
            get description() {
              return pb_1.Message.getWrapperField(this, Description, 7);
            }
            set description(value) {
              pb_1.Message.setWrapperField(this, 7, value);
            }
            get unbonding_height() {
              return pb_1.Message.getField(this, 8);
            }
            set unbonding_height(value) {
              pb_1.Message.setField(this, 8, value);
            }
            get unbonding_time() {
              return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 9);
            }
            set unbonding_time(value) {
              pb_1.Message.setWrapperField(this, 9, value);
            }
            get commission() {
              return pb_1.Message.getWrapperField(this, Commission, 10);
            }
            set commission(value) {
              pb_1.Message.setWrapperField(this, 10, value);
            }
            get min_self_delegation() {
              return pb_1.Message.getField(this, 11);
            }
            set min_self_delegation(value) {
              pb_1.Message.setField(this, 11, value);
            }
            static fromObject(data) {
              const message = new Validator({});
              if (data.operator_address != null) {
                message.operator_address = data.operator_address;
              }
              if (data.consensus_pubkey != null) {
                message.consensus_pubkey = dependency_2.google.protobuf.Any.fromObject(data.consensus_pubkey);
              }
              if (data.jailed != null) {
                message.jailed = data.jailed;
              }
              if (data.status != null) {
                message.status = data.status;
              }
              if (data.tokens != null) {
                message.tokens = data.tokens;
              }
              if (data.delegator_shares != null) {
                message.delegator_shares = data.delegator_shares;
              }
              if (data.description != null) {
                message.description = Description.fromObject(data.description);
              }
              if (data.unbonding_height != null) {
                message.unbonding_height = data.unbonding_height;
              }
              if (data.unbonding_time != null) {
                message.unbonding_time = dependency_4.google.protobuf.Timestamp.fromObject(data.unbonding_time);
              }
              if (data.commission != null) {
                message.commission = Commission.fromObject(data.commission);
              }
              if (data.min_self_delegation != null) {
                message.min_self_delegation = data.min_self_delegation;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.operator_address != null) {
                data.operator_address = this.operator_address;
              }
              if (this.consensus_pubkey != null) {
                data.consensus_pubkey = this.consensus_pubkey.toObject();
              }
              if (this.jailed != null) {
                data.jailed = this.jailed;
              }
              if (this.status != null) {
                data.status = this.status;
              }
              if (this.tokens != null) {
                data.tokens = this.tokens;
              }
              if (this.delegator_shares != null) {
                data.delegator_shares = this.delegator_shares;
              }
              if (this.description != null) {
                data.description = this.description.toObject();
              }
              if (this.unbonding_height != null) {
                data.unbonding_height = this.unbonding_height;
              }
              if (this.unbonding_time != null) {
                data.unbonding_time = this.unbonding_time.toObject();
              }
              if (this.commission != null) {
                data.commission = this.commission.toObject();
              }
              if (this.min_self_delegation != null) {
                data.min_self_delegation = this.min_self_delegation;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.operator_address === "string" && this.operator_address.length)
                writer.writeString(1, this.operator_address);
              if (this.consensus_pubkey !== void 0)
                writer.writeMessage(2, this.consensus_pubkey, () => this.consensus_pubkey.serialize(writer));
              if (this.jailed !== void 0)
                writer.writeBool(3, this.jailed);
              if (this.status !== void 0)
                writer.writeEnum(4, this.status);
              if (typeof this.tokens === "string" && this.tokens.length)
                writer.writeString(5, this.tokens);
              if (typeof this.delegator_shares === "string" && this.delegator_shares.length)
                writer.writeString(6, this.delegator_shares);
              if (this.description !== void 0)
                writer.writeMessage(7, this.description, () => this.description.serialize(writer));
              if (this.unbonding_height !== void 0)
                writer.writeInt64(8, this.unbonding_height);
              if (this.unbonding_time !== void 0)
                writer.writeMessage(9, this.unbonding_time, () => this.unbonding_time.serialize(writer));
              if (this.commission !== void 0)
                writer.writeMessage(10, this.commission, () => this.commission.serialize(writer));
              if (typeof this.min_self_delegation === "string" && this.min_self_delegation.length)
                writer.writeString(11, this.min_self_delegation);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Validator();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.operator_address = reader.readString();
                    break;
                  case 2:
                    reader.readMessage(message.consensus_pubkey, () => message.consensus_pubkey = dependency_2.google.protobuf.Any.deserialize(reader));
                    break;
                  case 3:
                    message.jailed = reader.readBool();
                    break;
                  case 4:
                    message.status = reader.readEnum();
                    break;
                  case 5:
                    message.tokens = reader.readString();
                    break;
                  case 6:
                    message.delegator_shares = reader.readString();
                    break;
                  case 7:
                    reader.readMessage(message.description, () => message.description = Description.deserialize(reader));
                    break;
                  case 8:
                    message.unbonding_height = reader.readInt64();
                    break;
                  case 9:
                    reader.readMessage(message.unbonding_time, () => message.unbonding_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                    break;
                  case 10:
                    reader.readMessage(message.commission, () => message.commission = Commission.deserialize(reader));
                    break;
                  case 11:
                    message.min_self_delegation = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Validator.deserialize(bytes);
            }
          }
          v1beta12.Validator = Validator;
          class ValAddresses extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("addresses" in data && data.addresses != void 0) {
                  this.addresses = data.addresses;
                }
              }
            }
            get addresses() {
              return pb_1.Message.getField(this, 1);
            }
            set addresses(value) {
              pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data) {
              const message = new ValAddresses({});
              if (data.addresses != null) {
                message.addresses = data.addresses;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.addresses != null) {
                data.addresses = this.addresses;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.addresses !== void 0)
                writer.writeRepeatedString(1, this.addresses);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ValAddresses();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return ValAddresses.deserialize(bytes);
            }
          }
          v1beta12.ValAddresses = ValAddresses;
          class DVPair extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != void 0) {
                  this.delegator_address = data.delegator_address;
                }
                if ("validator_address" in data && data.validator_address != void 0) {
                  this.validator_address = data.validator_address;
                }
              }
            }
            get delegator_address() {
              return pb_1.Message.getField(this, 1);
            }
            set delegator_address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get validator_address() {
              return pb_1.Message.getField(this, 2);
            }
            set validator_address(value) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
              const message = new DVPair({});
              if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
              }
              if (data.validator_address != null) {
                message.validator_address = data.validator_address;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
              }
              if (this.validator_address != null) {
                data.validator_address = this.validator_address;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.delegator_address === "string" && this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
              if (typeof this.validator_address === "string" && this.validator_address.length)
                writer.writeString(2, this.validator_address);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DVPair();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.delegator_address = reader.readString();
                    break;
                  case 2:
                    message.validator_address = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return DVPair.deserialize(bytes);
            }
          }
          v1beta12.DVPair = DVPair;
          class DVPairs extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("pairs" in data && data.pairs != void 0) {
                  this.pairs = data.pairs;
                }
              }
            }
            get pairs() {
              return pb_1.Message.getRepeatedWrapperField(this, DVPair, 1);
            }
            set pairs(value) {
              pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            static fromObject(data) {
              const message = new DVPairs({});
              if (data.pairs != null) {
                message.pairs = data.pairs.map((item) => DVPair.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.pairs != null) {
                data.pairs = this.pairs.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.pairs !== void 0)
                writer.writeRepeatedMessage(1, this.pairs, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DVPairs();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.pairs, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DVPair.deserialize(reader), DVPair));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return DVPairs.deserialize(bytes);
            }
          }
          v1beta12.DVPairs = DVPairs;
          class DVVTriplet extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != void 0) {
                  this.delegator_address = data.delegator_address;
                }
                if ("validator_src_address" in data && data.validator_src_address != void 0) {
                  this.validator_src_address = data.validator_src_address;
                }
                if ("validator_dst_address" in data && data.validator_dst_address != void 0) {
                  this.validator_dst_address = data.validator_dst_address;
                }
              }
            }
            get delegator_address() {
              return pb_1.Message.getField(this, 1);
            }
            set delegator_address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get validator_src_address() {
              return pb_1.Message.getField(this, 2);
            }
            set validator_src_address(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get validator_dst_address() {
              return pb_1.Message.getField(this, 3);
            }
            set validator_dst_address(value) {
              pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data) {
              const message = new DVVTriplet({});
              if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
              }
              if (data.validator_src_address != null) {
                message.validator_src_address = data.validator_src_address;
              }
              if (data.validator_dst_address != null) {
                message.validator_dst_address = data.validator_dst_address;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
              }
              if (this.validator_src_address != null) {
                data.validator_src_address = this.validator_src_address;
              }
              if (this.validator_dst_address != null) {
                data.validator_dst_address = this.validator_dst_address;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.delegator_address === "string" && this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
              if (typeof this.validator_src_address === "string" && this.validator_src_address.length)
                writer.writeString(2, this.validator_src_address);
              if (typeof this.validator_dst_address === "string" && this.validator_dst_address.length)
                writer.writeString(3, this.validator_dst_address);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DVVTriplet();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.delegator_address = reader.readString();
                    break;
                  case 2:
                    message.validator_src_address = reader.readString();
                    break;
                  case 3:
                    message.validator_dst_address = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return DVVTriplet.deserialize(bytes);
            }
          }
          v1beta12.DVVTriplet = DVVTriplet;
          class DVVTriplets extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("triplets" in data && data.triplets != void 0) {
                  this.triplets = data.triplets;
                }
              }
            }
            get triplets() {
              return pb_1.Message.getRepeatedWrapperField(this, DVVTriplet, 1);
            }
            set triplets(value) {
              pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            static fromObject(data) {
              const message = new DVVTriplets({});
              if (data.triplets != null) {
                message.triplets = data.triplets.map((item) => DVVTriplet.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.triplets != null) {
                data.triplets = this.triplets.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.triplets !== void 0)
                writer.writeRepeatedMessage(1, this.triplets, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DVVTriplets();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.triplets, () => pb_1.Message.addToRepeatedWrapperField(message, 1, DVVTriplet.deserialize(reader), DVVTriplet));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return DVVTriplets.deserialize(bytes);
            }
          }
          v1beta12.DVVTriplets = DVVTriplets;
          class Delegation extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != void 0) {
                  this.delegator_address = data.delegator_address;
                }
                if ("validator_address" in data && data.validator_address != void 0) {
                  this.validator_address = data.validator_address;
                }
                if ("shares" in data && data.shares != void 0) {
                  this.shares = data.shares;
                }
              }
            }
            get delegator_address() {
              return pb_1.Message.getField(this, 1);
            }
            set delegator_address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get validator_address() {
              return pb_1.Message.getField(this, 2);
            }
            set validator_address(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get shares() {
              return pb_1.Message.getField(this, 3);
            }
            set shares(value) {
              pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data) {
              const message = new Delegation({});
              if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
              }
              if (data.validator_address != null) {
                message.validator_address = data.validator_address;
              }
              if (data.shares != null) {
                message.shares = data.shares;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
              }
              if (this.validator_address != null) {
                data.validator_address = this.validator_address;
              }
              if (this.shares != null) {
                data.shares = this.shares;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.delegator_address === "string" && this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
              if (typeof this.validator_address === "string" && this.validator_address.length)
                writer.writeString(2, this.validator_address);
              if (typeof this.shares === "string" && this.shares.length)
                writer.writeString(3, this.shares);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Delegation();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.delegator_address = reader.readString();
                    break;
                  case 2:
                    message.validator_address = reader.readString();
                    break;
                  case 3:
                    message.shares = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Delegation.deserialize(bytes);
            }
          }
          v1beta12.Delegation = Delegation;
          class UnbondingDelegation extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != void 0) {
                  this.delegator_address = data.delegator_address;
                }
                if ("validator_address" in data && data.validator_address != void 0) {
                  this.validator_address = data.validator_address;
                }
                if ("entries" in data && data.entries != void 0) {
                  this.entries = data.entries;
                }
              }
            }
            get delegator_address() {
              return pb_1.Message.getField(this, 1);
            }
            set delegator_address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get validator_address() {
              return pb_1.Message.getField(this, 2);
            }
            set validator_address(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get entries() {
              return pb_1.Message.getRepeatedWrapperField(this, UnbondingDelegationEntry, 3);
            }
            set entries(value) {
              pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data) {
              const message = new UnbondingDelegation({});
              if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
              }
              if (data.validator_address != null) {
                message.validator_address = data.validator_address;
              }
              if (data.entries != null) {
                message.entries = data.entries.map((item) => UnbondingDelegationEntry.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
              }
              if (this.validator_address != null) {
                data.validator_address = this.validator_address;
              }
              if (this.entries != null) {
                data.entries = this.entries.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.delegator_address === "string" && this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
              if (typeof this.validator_address === "string" && this.validator_address.length)
                writer.writeString(2, this.validator_address);
              if (this.entries !== void 0)
                writer.writeRepeatedMessage(3, this.entries, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnbondingDelegation();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.delegator_address = reader.readString();
                    break;
                  case 2:
                    message.validator_address = reader.readString();
                    break;
                  case 3:
                    reader.readMessage(message.entries, () => pb_1.Message.addToRepeatedWrapperField(message, 3, UnbondingDelegationEntry.deserialize(reader), UnbondingDelegationEntry));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return UnbondingDelegation.deserialize(bytes);
            }
          }
          v1beta12.UnbondingDelegation = UnbondingDelegation;
          class UnbondingDelegationEntry extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("creation_height" in data && data.creation_height != void 0) {
                  this.creation_height = data.creation_height;
                }
                if ("completion_time" in data && data.completion_time != void 0) {
                  this.completion_time = data.completion_time;
                }
                if ("initial_balance" in data && data.initial_balance != void 0) {
                  this.initial_balance = data.initial_balance;
                }
                if ("balance" in data && data.balance != void 0) {
                  this.balance = data.balance;
                }
              }
            }
            get creation_height() {
              return pb_1.Message.getField(this, 1);
            }
            set creation_height(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get completion_time() {
              return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 2);
            }
            set completion_time(value) {
              pb_1.Message.setWrapperField(this, 2, value);
            }
            get initial_balance() {
              return pb_1.Message.getField(this, 3);
            }
            set initial_balance(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get balance() {
              return pb_1.Message.getField(this, 4);
            }
            set balance(value) {
              pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data) {
              const message = new UnbondingDelegationEntry({});
              if (data.creation_height != null) {
                message.creation_height = data.creation_height;
              }
              if (data.completion_time != null) {
                message.completion_time = dependency_4.google.protobuf.Timestamp.fromObject(data.completion_time);
              }
              if (data.initial_balance != null) {
                message.initial_balance = data.initial_balance;
              }
              if (data.balance != null) {
                message.balance = data.balance;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.creation_height != null) {
                data.creation_height = this.creation_height;
              }
              if (this.completion_time != null) {
                data.completion_time = this.completion_time.toObject();
              }
              if (this.initial_balance != null) {
                data.initial_balance = this.initial_balance;
              }
              if (this.balance != null) {
                data.balance = this.balance;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.creation_height !== void 0)
                writer.writeInt64(1, this.creation_height);
              if (this.completion_time !== void 0)
                writer.writeMessage(2, this.completion_time, () => this.completion_time.serialize(writer));
              if (typeof this.initial_balance === "string" && this.initial_balance.length)
                writer.writeString(3, this.initial_balance);
              if (typeof this.balance === "string" && this.balance.length)
                writer.writeString(4, this.balance);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UnbondingDelegationEntry();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.creation_height = reader.readInt64();
                    break;
                  case 2:
                    reader.readMessage(message.completion_time, () => message.completion_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                    break;
                  case 3:
                    message.initial_balance = reader.readString();
                    break;
                  case 4:
                    message.balance = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return UnbondingDelegationEntry.deserialize(bytes);
            }
          }
          v1beta12.UnbondingDelegationEntry = UnbondingDelegationEntry;
          class RedelegationEntry extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("creation_height" in data && data.creation_height != void 0) {
                  this.creation_height = data.creation_height;
                }
                if ("completion_time" in data && data.completion_time != void 0) {
                  this.completion_time = data.completion_time;
                }
                if ("initial_balance" in data && data.initial_balance != void 0) {
                  this.initial_balance = data.initial_balance;
                }
                if ("shares_dst" in data && data.shares_dst != void 0) {
                  this.shares_dst = data.shares_dst;
                }
              }
            }
            get creation_height() {
              return pb_1.Message.getField(this, 1);
            }
            set creation_height(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get completion_time() {
              return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 2);
            }
            set completion_time(value) {
              pb_1.Message.setWrapperField(this, 2, value);
            }
            get initial_balance() {
              return pb_1.Message.getField(this, 3);
            }
            set initial_balance(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get shares_dst() {
              return pb_1.Message.getField(this, 4);
            }
            set shares_dst(value) {
              pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data) {
              const message = new RedelegationEntry({});
              if (data.creation_height != null) {
                message.creation_height = data.creation_height;
              }
              if (data.completion_time != null) {
                message.completion_time = dependency_4.google.protobuf.Timestamp.fromObject(data.completion_time);
              }
              if (data.initial_balance != null) {
                message.initial_balance = data.initial_balance;
              }
              if (data.shares_dst != null) {
                message.shares_dst = data.shares_dst;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.creation_height != null) {
                data.creation_height = this.creation_height;
              }
              if (this.completion_time != null) {
                data.completion_time = this.completion_time.toObject();
              }
              if (this.initial_balance != null) {
                data.initial_balance = this.initial_balance;
              }
              if (this.shares_dst != null) {
                data.shares_dst = this.shares_dst;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.creation_height !== void 0)
                writer.writeInt64(1, this.creation_height);
              if (this.completion_time !== void 0)
                writer.writeMessage(2, this.completion_time, () => this.completion_time.serialize(writer));
              if (typeof this.initial_balance === "string" && this.initial_balance.length)
                writer.writeString(3, this.initial_balance);
              if (typeof this.shares_dst === "string" && this.shares_dst.length)
                writer.writeString(4, this.shares_dst);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RedelegationEntry();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.creation_height = reader.readInt64();
                    break;
                  case 2:
                    reader.readMessage(message.completion_time, () => message.completion_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                    break;
                  case 3:
                    message.initial_balance = reader.readString();
                    break;
                  case 4:
                    message.shares_dst = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return RedelegationEntry.deserialize(bytes);
            }
          }
          v1beta12.RedelegationEntry = RedelegationEntry;
          class Redelegation extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != void 0) {
                  this.delegator_address = data.delegator_address;
                }
                if ("validator_src_address" in data && data.validator_src_address != void 0) {
                  this.validator_src_address = data.validator_src_address;
                }
                if ("validator_dst_address" in data && data.validator_dst_address != void 0) {
                  this.validator_dst_address = data.validator_dst_address;
                }
                if ("entries" in data && data.entries != void 0) {
                  this.entries = data.entries;
                }
              }
            }
            get delegator_address() {
              return pb_1.Message.getField(this, 1);
            }
            set delegator_address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get validator_src_address() {
              return pb_1.Message.getField(this, 2);
            }
            set validator_src_address(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get validator_dst_address() {
              return pb_1.Message.getField(this, 3);
            }
            set validator_dst_address(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get entries() {
              return pb_1.Message.getRepeatedWrapperField(this, RedelegationEntry, 4);
            }
            set entries(value) {
              pb_1.Message.setRepeatedWrapperField(this, 4, value);
            }
            static fromObject(data) {
              const message = new Redelegation({});
              if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
              }
              if (data.validator_src_address != null) {
                message.validator_src_address = data.validator_src_address;
              }
              if (data.validator_dst_address != null) {
                message.validator_dst_address = data.validator_dst_address;
              }
              if (data.entries != null) {
                message.entries = data.entries.map((item) => RedelegationEntry.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
              }
              if (this.validator_src_address != null) {
                data.validator_src_address = this.validator_src_address;
              }
              if (this.validator_dst_address != null) {
                data.validator_dst_address = this.validator_dst_address;
              }
              if (this.entries != null) {
                data.entries = this.entries.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.delegator_address === "string" && this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
              if (typeof this.validator_src_address === "string" && this.validator_src_address.length)
                writer.writeString(2, this.validator_src_address);
              if (typeof this.validator_dst_address === "string" && this.validator_dst_address.length)
                writer.writeString(3, this.validator_dst_address);
              if (this.entries !== void 0)
                writer.writeRepeatedMessage(4, this.entries, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Redelegation();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.delegator_address = reader.readString();
                    break;
                  case 2:
                    message.validator_src_address = reader.readString();
                    break;
                  case 3:
                    message.validator_dst_address = reader.readString();
                    break;
                  case 4:
                    reader.readMessage(message.entries, () => pb_1.Message.addToRepeatedWrapperField(message, 4, RedelegationEntry.deserialize(reader), RedelegationEntry));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Redelegation.deserialize(bytes);
            }
          }
          v1beta12.Redelegation = Redelegation;
          class Params extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("unbonding_time" in data && data.unbonding_time != void 0) {
                  this.unbonding_time = data.unbonding_time;
                }
                if ("max_validators" in data && data.max_validators != void 0) {
                  this.max_validators = data.max_validators;
                }
                if ("max_entries" in data && data.max_entries != void 0) {
                  this.max_entries = data.max_entries;
                }
                if ("historical_entries" in data && data.historical_entries != void 0) {
                  this.historical_entries = data.historical_entries;
                }
                if ("bond_denom" in data && data.bond_denom != void 0) {
                  this.bond_denom = data.bond_denom;
                }
              }
            }
            get unbonding_time() {
              return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Duration, 1);
            }
            set unbonding_time(value) {
              pb_1.Message.setWrapperField(this, 1, value);
            }
            get max_validators() {
              return pb_1.Message.getField(this, 2);
            }
            set max_validators(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get max_entries() {
              return pb_1.Message.getField(this, 3);
            }
            set max_entries(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get historical_entries() {
              return pb_1.Message.getField(this, 4);
            }
            set historical_entries(value) {
              pb_1.Message.setField(this, 4, value);
            }
            get bond_denom() {
              return pb_1.Message.getField(this, 5);
            }
            set bond_denom(value) {
              pb_1.Message.setField(this, 5, value);
            }
            static fromObject(data) {
              const message = new Params({});
              if (data.unbonding_time != null) {
                message.unbonding_time = dependency_3.google.protobuf.Duration.fromObject(data.unbonding_time);
              }
              if (data.max_validators != null) {
                message.max_validators = data.max_validators;
              }
              if (data.max_entries != null) {
                message.max_entries = data.max_entries;
              }
              if (data.historical_entries != null) {
                message.historical_entries = data.historical_entries;
              }
              if (data.bond_denom != null) {
                message.bond_denom = data.bond_denom;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.unbonding_time != null) {
                data.unbonding_time = this.unbonding_time.toObject();
              }
              if (this.max_validators != null) {
                data.max_validators = this.max_validators;
              }
              if (this.max_entries != null) {
                data.max_entries = this.max_entries;
              }
              if (this.historical_entries != null) {
                data.historical_entries = this.historical_entries;
              }
              if (this.bond_denom != null) {
                data.bond_denom = this.bond_denom;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.unbonding_time !== void 0)
                writer.writeMessage(1, this.unbonding_time, () => this.unbonding_time.serialize(writer));
              if (this.max_validators !== void 0)
                writer.writeUint32(2, this.max_validators);
              if (this.max_entries !== void 0)
                writer.writeUint32(3, this.max_entries);
              if (this.historical_entries !== void 0)
                writer.writeUint32(4, this.historical_entries);
              if (typeof this.bond_denom === "string" && this.bond_denom.length)
                writer.writeString(5, this.bond_denom);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Params();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.unbonding_time, () => message.unbonding_time = dependency_3.google.protobuf.Duration.deserialize(reader));
                    break;
                  case 2:
                    message.max_validators = reader.readUint32();
                    break;
                  case 3:
                    message.max_entries = reader.readUint32();
                    break;
                  case 4:
                    message.historical_entries = reader.readUint32();
                    break;
                  case 5:
                    message.bond_denom = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Params.deserialize(bytes);
            }
          }
          v1beta12.Params = Params;
          class DelegationResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("delegation" in data && data.delegation != void 0) {
                  this.delegation = data.delegation;
                }
                if ("balance" in data && data.balance != void 0) {
                  this.balance = data.balance;
                }
              }
            }
            get delegation() {
              return pb_1.Message.getWrapperField(this, Delegation, 1);
            }
            set delegation(value) {
              pb_1.Message.setWrapperField(this, 1, value);
            }
            get balance() {
              return pb_1.Message.getWrapperField(this, dependency_6.cosmos.base.v1beta1.Coin, 2);
            }
            set balance(value) {
              pb_1.Message.setWrapperField(this, 2, value);
            }
            static fromObject(data) {
              const message = new DelegationResponse({});
              if (data.delegation != null) {
                message.delegation = Delegation.fromObject(data.delegation);
              }
              if (data.balance != null) {
                message.balance = dependency_6.cosmos.base.v1beta1.Coin.fromObject(data.balance);
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.delegation != null) {
                data.delegation = this.delegation.toObject();
              }
              if (this.balance != null) {
                data.balance = this.balance.toObject();
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.delegation !== void 0)
                writer.writeMessage(1, this.delegation, () => this.delegation.serialize(writer));
              if (this.balance !== void 0)
                writer.writeMessage(2, this.balance, () => this.balance.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DelegationResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.delegation, () => message.delegation = Delegation.deserialize(reader));
                    break;
                  case 2:
                    reader.readMessage(message.balance, () => message.balance = dependency_6.cosmos.base.v1beta1.Coin.deserialize(reader));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return DelegationResponse.deserialize(bytes);
            }
          }
          v1beta12.DelegationResponse = DelegationResponse;
          class RedelegationEntryResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("redelegation_entry" in data && data.redelegation_entry != void 0) {
                  this.redelegation_entry = data.redelegation_entry;
                }
                if ("balance" in data && data.balance != void 0) {
                  this.balance = data.balance;
                }
              }
            }
            get redelegation_entry() {
              return pb_1.Message.getWrapperField(this, RedelegationEntry, 1);
            }
            set redelegation_entry(value) {
              pb_1.Message.setWrapperField(this, 1, value);
            }
            get balance() {
              return pb_1.Message.getField(this, 4);
            }
            set balance(value) {
              pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data) {
              const message = new RedelegationEntryResponse({});
              if (data.redelegation_entry != null) {
                message.redelegation_entry = RedelegationEntry.fromObject(data.redelegation_entry);
              }
              if (data.balance != null) {
                message.balance = data.balance;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.redelegation_entry != null) {
                data.redelegation_entry = this.redelegation_entry.toObject();
              }
              if (this.balance != null) {
                data.balance = this.balance;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.redelegation_entry !== void 0)
                writer.writeMessage(1, this.redelegation_entry, () => this.redelegation_entry.serialize(writer));
              if (typeof this.balance === "string" && this.balance.length)
                writer.writeString(4, this.balance);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RedelegationEntryResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.redelegation_entry, () => message.redelegation_entry = RedelegationEntry.deserialize(reader));
                    break;
                  case 4:
                    message.balance = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return RedelegationEntryResponse.deserialize(bytes);
            }
          }
          v1beta12.RedelegationEntryResponse = RedelegationEntryResponse;
          class RedelegationResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("redelegation" in data && data.redelegation != void 0) {
                  this.redelegation = data.redelegation;
                }
                if ("entries" in data && data.entries != void 0) {
                  this.entries = data.entries;
                }
              }
            }
            get redelegation() {
              return pb_1.Message.getWrapperField(this, Redelegation, 1);
            }
            set redelegation(value) {
              pb_1.Message.setWrapperField(this, 1, value);
            }
            get entries() {
              return pb_1.Message.getRepeatedWrapperField(this, RedelegationEntryResponse, 2);
            }
            set entries(value) {
              pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            static fromObject(data) {
              const message = new RedelegationResponse({});
              if (data.redelegation != null) {
                message.redelegation = Redelegation.fromObject(data.redelegation);
              }
              if (data.entries != null) {
                message.entries = data.entries.map((item) => RedelegationEntryResponse.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.redelegation != null) {
                data.redelegation = this.redelegation.toObject();
              }
              if (this.entries != null) {
                data.entries = this.entries.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.redelegation !== void 0)
                writer.writeMessage(1, this.redelegation, () => this.redelegation.serialize(writer));
              if (this.entries !== void 0)
                writer.writeRepeatedMessage(2, this.entries, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RedelegationResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.redelegation, () => message.redelegation = Redelegation.deserialize(reader));
                    break;
                  case 2:
                    reader.readMessage(message.entries, () => pb_1.Message.addToRepeatedWrapperField(message, 2, RedelegationEntryResponse.deserialize(reader), RedelegationEntryResponse));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return RedelegationResponse.deserialize(bytes);
            }
          }
          v1beta12.RedelegationResponse = RedelegationResponse;
          class Pool extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("not_bonded_tokens" in data && data.not_bonded_tokens != void 0) {
                  this.not_bonded_tokens = data.not_bonded_tokens;
                }
                if ("bonded_tokens" in data && data.bonded_tokens != void 0) {
                  this.bonded_tokens = data.bonded_tokens;
                }
              }
            }
            get not_bonded_tokens() {
              return pb_1.Message.getField(this, 1);
            }
            set not_bonded_tokens(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get bonded_tokens() {
              return pb_1.Message.getField(this, 2);
            }
            set bonded_tokens(value) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
              const message = new Pool({});
              if (data.not_bonded_tokens != null) {
                message.not_bonded_tokens = data.not_bonded_tokens;
              }
              if (data.bonded_tokens != null) {
                message.bonded_tokens = data.bonded_tokens;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.not_bonded_tokens != null) {
                data.not_bonded_tokens = this.not_bonded_tokens;
              }
              if (this.bonded_tokens != null) {
                data.bonded_tokens = this.bonded_tokens;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.not_bonded_tokens === "string" && this.not_bonded_tokens.length)
                writer.writeString(1, this.not_bonded_tokens);
              if (typeof this.bonded_tokens === "string" && this.bonded_tokens.length)
                writer.writeString(2, this.bonded_tokens);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Pool();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.not_bonded_tokens = reader.readString();
                    break;
                  case 2:
                    message.bonded_tokens = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Pool.deserialize(bytes);
            }
          }
          v1beta12.Pool = Pool;
        })(v1beta1 = staking2.v1beta1 || (staking2.v1beta1 = {}));
      })(staking = cosmos2.staking || (cosmos2.staking = {}));
    })(cosmos = exports.cosmos || (exports.cosmos = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/cosmos/staking/v1beta1/tx.js
var require_tx5 = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/cosmos/staking/v1beta1/tx.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cosmos = void 0;
    var dependency_1 = __importStar(require_any());
    var dependency_2 = __importStar(require_timestamp());
    var dependency_5 = __importStar(require_coin());
    var dependency_6 = __importStar(require_staking());
    var pb_1 = __importStar(require_google_protobuf());
    var cosmos;
    (function(cosmos2) {
      var staking;
      (function(staking2) {
        var v1beta1;
        (function(v1beta12) {
          class MsgCreateValidator extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("description" in data && data.description != void 0) {
                  this.description = data.description;
                }
                if ("commission" in data && data.commission != void 0) {
                  this.commission = data.commission;
                }
                if ("min_self_delegation" in data && data.min_self_delegation != void 0) {
                  this.min_self_delegation = data.min_self_delegation;
                }
                if ("delegator_address" in data && data.delegator_address != void 0) {
                  this.delegator_address = data.delegator_address;
                }
                if ("validator_address" in data && data.validator_address != void 0) {
                  this.validator_address = data.validator_address;
                }
                if ("pubkey" in data && data.pubkey != void 0) {
                  this.pubkey = data.pubkey;
                }
                if ("value" in data && data.value != void 0) {
                  this.value = data.value;
                }
              }
            }
            get description() {
              return pb_1.Message.getWrapperField(this, dependency_6.cosmos.staking.v1beta1.Description, 1);
            }
            set description(value) {
              pb_1.Message.setWrapperField(this, 1, value);
            }
            get commission() {
              return pb_1.Message.getWrapperField(this, dependency_6.cosmos.staking.v1beta1.CommissionRates, 2);
            }
            set commission(value) {
              pb_1.Message.setWrapperField(this, 2, value);
            }
            get min_self_delegation() {
              return pb_1.Message.getField(this, 3);
            }
            set min_self_delegation(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get delegator_address() {
              return pb_1.Message.getField(this, 4);
            }
            set delegator_address(value) {
              pb_1.Message.setField(this, 4, value);
            }
            get validator_address() {
              return pb_1.Message.getField(this, 5);
            }
            set validator_address(value) {
              pb_1.Message.setField(this, 5, value);
            }
            get pubkey() {
              return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 6);
            }
            set pubkey(value) {
              pb_1.Message.setWrapperField(this, 6, value);
            }
            get value() {
              return pb_1.Message.getWrapperField(this, dependency_5.cosmos.base.v1beta1.Coin, 7);
            }
            set value(value) {
              pb_1.Message.setWrapperField(this, 7, value);
            }
            static fromObject(data) {
              const message = new MsgCreateValidator({});
              if (data.description != null) {
                message.description = dependency_6.cosmos.staking.v1beta1.Description.fromObject(data.description);
              }
              if (data.commission != null) {
                message.commission = dependency_6.cosmos.staking.v1beta1.CommissionRates.fromObject(data.commission);
              }
              if (data.min_self_delegation != null) {
                message.min_self_delegation = data.min_self_delegation;
              }
              if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
              }
              if (data.validator_address != null) {
                message.validator_address = data.validator_address;
              }
              if (data.pubkey != null) {
                message.pubkey = dependency_1.google.protobuf.Any.fromObject(data.pubkey);
              }
              if (data.value != null) {
                message.value = dependency_5.cosmos.base.v1beta1.Coin.fromObject(data.value);
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.description != null) {
                data.description = this.description.toObject();
              }
              if (this.commission != null) {
                data.commission = this.commission.toObject();
              }
              if (this.min_self_delegation != null) {
                data.min_self_delegation = this.min_self_delegation;
              }
              if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
              }
              if (this.validator_address != null) {
                data.validator_address = this.validator_address;
              }
              if (this.pubkey != null) {
                data.pubkey = this.pubkey.toObject();
              }
              if (this.value != null) {
                data.value = this.value.toObject();
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.description !== void 0)
                writer.writeMessage(1, this.description, () => this.description.serialize(writer));
              if (this.commission !== void 0)
                writer.writeMessage(2, this.commission, () => this.commission.serialize(writer));
              if (typeof this.min_self_delegation === "string" && this.min_self_delegation.length)
                writer.writeString(3, this.min_self_delegation);
              if (typeof this.delegator_address === "string" && this.delegator_address.length)
                writer.writeString(4, this.delegator_address);
              if (typeof this.validator_address === "string" && this.validator_address.length)
                writer.writeString(5, this.validator_address);
              if (this.pubkey !== void 0)
                writer.writeMessage(6, this.pubkey, () => this.pubkey.serialize(writer));
              if (this.value !== void 0)
                writer.writeMessage(7, this.value, () => this.value.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateValidator();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.description, () => message.description = dependency_6.cosmos.staking.v1beta1.Description.deserialize(reader));
                    break;
                  case 2:
                    reader.readMessage(message.commission, () => message.commission = dependency_6.cosmos.staking.v1beta1.CommissionRates.deserialize(reader));
                    break;
                  case 3:
                    message.min_self_delegation = reader.readString();
                    break;
                  case 4:
                    message.delegator_address = reader.readString();
                    break;
                  case 5:
                    message.validator_address = reader.readString();
                    break;
                  case 6:
                    reader.readMessage(message.pubkey, () => message.pubkey = dependency_1.google.protobuf.Any.deserialize(reader));
                    break;
                  case 7:
                    reader.readMessage(message.value, () => message.value = dependency_5.cosmos.base.v1beta1.Coin.deserialize(reader));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgCreateValidator.deserialize(bytes);
            }
          }
          v1beta12.MsgCreateValidator = MsgCreateValidator;
          class MsgCreateValidatorResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
              }
            }
            static fromObject(data) {
              const message = new MsgCreateValidatorResponse({});
              return message;
            }
            toObject() {
              const data = {};
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateValidatorResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgCreateValidatorResponse.deserialize(bytes);
            }
          }
          v1beta12.MsgCreateValidatorResponse = MsgCreateValidatorResponse;
          class MsgEditValidator extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("description" in data && data.description != void 0) {
                  this.description = data.description;
                }
                if ("validator_address" in data && data.validator_address != void 0) {
                  this.validator_address = data.validator_address;
                }
                if ("commission_rate" in data && data.commission_rate != void 0) {
                  this.commission_rate = data.commission_rate;
                }
                if ("min_self_delegation" in data && data.min_self_delegation != void 0) {
                  this.min_self_delegation = data.min_self_delegation;
                }
              }
            }
            get description() {
              return pb_1.Message.getWrapperField(this, dependency_6.cosmos.staking.v1beta1.Description, 1);
            }
            set description(value) {
              pb_1.Message.setWrapperField(this, 1, value);
            }
            get validator_address() {
              return pb_1.Message.getField(this, 2);
            }
            set validator_address(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get commission_rate() {
              return pb_1.Message.getField(this, 3);
            }
            set commission_rate(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get min_self_delegation() {
              return pb_1.Message.getField(this, 4);
            }
            set min_self_delegation(value) {
              pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data) {
              const message = new MsgEditValidator({});
              if (data.description != null) {
                message.description = dependency_6.cosmos.staking.v1beta1.Description.fromObject(data.description);
              }
              if (data.validator_address != null) {
                message.validator_address = data.validator_address;
              }
              if (data.commission_rate != null) {
                message.commission_rate = data.commission_rate;
              }
              if (data.min_self_delegation != null) {
                message.min_self_delegation = data.min_self_delegation;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.description != null) {
                data.description = this.description.toObject();
              }
              if (this.validator_address != null) {
                data.validator_address = this.validator_address;
              }
              if (this.commission_rate != null) {
                data.commission_rate = this.commission_rate;
              }
              if (this.min_self_delegation != null) {
                data.min_self_delegation = this.min_self_delegation;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.description !== void 0)
                writer.writeMessage(1, this.description, () => this.description.serialize(writer));
              if (typeof this.validator_address === "string" && this.validator_address.length)
                writer.writeString(2, this.validator_address);
              if (typeof this.commission_rate === "string" && this.commission_rate.length)
                writer.writeString(3, this.commission_rate);
              if (typeof this.min_self_delegation === "string" && this.min_self_delegation.length)
                writer.writeString(4, this.min_self_delegation);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgEditValidator();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.description, () => message.description = dependency_6.cosmos.staking.v1beta1.Description.deserialize(reader));
                    break;
                  case 2:
                    message.validator_address = reader.readString();
                    break;
                  case 3:
                    message.commission_rate = reader.readString();
                    break;
                  case 4:
                    message.min_self_delegation = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgEditValidator.deserialize(bytes);
            }
          }
          v1beta12.MsgEditValidator = MsgEditValidator;
          class MsgEditValidatorResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
              }
            }
            static fromObject(data) {
              const message = new MsgEditValidatorResponse({});
              return message;
            }
            toObject() {
              const data = {};
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgEditValidatorResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgEditValidatorResponse.deserialize(bytes);
            }
          }
          v1beta12.MsgEditValidatorResponse = MsgEditValidatorResponse;
          class MsgDelegate extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != void 0) {
                  this.delegator_address = data.delegator_address;
                }
                if ("validator_address" in data && data.validator_address != void 0) {
                  this.validator_address = data.validator_address;
                }
                if ("amount" in data && data.amount != void 0) {
                  this.amount = data.amount;
                }
              }
            }
            get delegator_address() {
              return pb_1.Message.getField(this, 1);
            }
            set delegator_address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get validator_address() {
              return pb_1.Message.getField(this, 2);
            }
            set validator_address(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get amount() {
              return pb_1.Message.getWrapperField(this, dependency_5.cosmos.base.v1beta1.Coin, 3);
            }
            set amount(value) {
              pb_1.Message.setWrapperField(this, 3, value);
            }
            static fromObject(data) {
              const message = new MsgDelegate({});
              if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
              }
              if (data.validator_address != null) {
                message.validator_address = data.validator_address;
              }
              if (data.amount != null) {
                message.amount = dependency_5.cosmos.base.v1beta1.Coin.fromObject(data.amount);
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
              }
              if (this.validator_address != null) {
                data.validator_address = this.validator_address;
              }
              if (this.amount != null) {
                data.amount = this.amount.toObject();
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.delegator_address === "string" && this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
              if (typeof this.validator_address === "string" && this.validator_address.length)
                writer.writeString(2, this.validator_address);
              if (this.amount !== void 0)
                writer.writeMessage(3, this.amount, () => this.amount.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDelegate();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.delegator_address = reader.readString();
                    break;
                  case 2:
                    message.validator_address = reader.readString();
                    break;
                  case 3:
                    reader.readMessage(message.amount, () => message.amount = dependency_5.cosmos.base.v1beta1.Coin.deserialize(reader));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgDelegate.deserialize(bytes);
            }
          }
          v1beta12.MsgDelegate = MsgDelegate;
          class MsgDelegateResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
              }
            }
            static fromObject(data) {
              const message = new MsgDelegateResponse({});
              return message;
            }
            toObject() {
              const data = {};
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDelegateResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgDelegateResponse.deserialize(bytes);
            }
          }
          v1beta12.MsgDelegateResponse = MsgDelegateResponse;
          class MsgBeginRedelegate extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != void 0) {
                  this.delegator_address = data.delegator_address;
                }
                if ("validator_src_address" in data && data.validator_src_address != void 0) {
                  this.validator_src_address = data.validator_src_address;
                }
                if ("validator_dst_address" in data && data.validator_dst_address != void 0) {
                  this.validator_dst_address = data.validator_dst_address;
                }
                if ("amount" in data && data.amount != void 0) {
                  this.amount = data.amount;
                }
              }
            }
            get delegator_address() {
              return pb_1.Message.getField(this, 1);
            }
            set delegator_address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get validator_src_address() {
              return pb_1.Message.getField(this, 2);
            }
            set validator_src_address(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get validator_dst_address() {
              return pb_1.Message.getField(this, 3);
            }
            set validator_dst_address(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get amount() {
              return pb_1.Message.getWrapperField(this, dependency_5.cosmos.base.v1beta1.Coin, 4);
            }
            set amount(value) {
              pb_1.Message.setWrapperField(this, 4, value);
            }
            static fromObject(data) {
              const message = new MsgBeginRedelegate({});
              if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
              }
              if (data.validator_src_address != null) {
                message.validator_src_address = data.validator_src_address;
              }
              if (data.validator_dst_address != null) {
                message.validator_dst_address = data.validator_dst_address;
              }
              if (data.amount != null) {
                message.amount = dependency_5.cosmos.base.v1beta1.Coin.fromObject(data.amount);
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
              }
              if (this.validator_src_address != null) {
                data.validator_src_address = this.validator_src_address;
              }
              if (this.validator_dst_address != null) {
                data.validator_dst_address = this.validator_dst_address;
              }
              if (this.amount != null) {
                data.amount = this.amount.toObject();
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.delegator_address === "string" && this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
              if (typeof this.validator_src_address === "string" && this.validator_src_address.length)
                writer.writeString(2, this.validator_src_address);
              if (typeof this.validator_dst_address === "string" && this.validator_dst_address.length)
                writer.writeString(3, this.validator_dst_address);
              if (this.amount !== void 0)
                writer.writeMessage(4, this.amount, () => this.amount.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgBeginRedelegate();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.delegator_address = reader.readString();
                    break;
                  case 2:
                    message.validator_src_address = reader.readString();
                    break;
                  case 3:
                    message.validator_dst_address = reader.readString();
                    break;
                  case 4:
                    reader.readMessage(message.amount, () => message.amount = dependency_5.cosmos.base.v1beta1.Coin.deserialize(reader));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgBeginRedelegate.deserialize(bytes);
            }
          }
          v1beta12.MsgBeginRedelegate = MsgBeginRedelegate;
          class MsgBeginRedelegateResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("completion_time" in data && data.completion_time != void 0) {
                  this.completion_time = data.completion_time;
                }
              }
            }
            get completion_time() {
              return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 1);
            }
            set completion_time(value) {
              pb_1.Message.setWrapperField(this, 1, value);
            }
            static fromObject(data) {
              const message = new MsgBeginRedelegateResponse({});
              if (data.completion_time != null) {
                message.completion_time = dependency_2.google.protobuf.Timestamp.fromObject(data.completion_time);
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.completion_time != null) {
                data.completion_time = this.completion_time.toObject();
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.completion_time !== void 0)
                writer.writeMessage(1, this.completion_time, () => this.completion_time.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgBeginRedelegateResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.completion_time, () => message.completion_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgBeginRedelegateResponse.deserialize(bytes);
            }
          }
          v1beta12.MsgBeginRedelegateResponse = MsgBeginRedelegateResponse;
          class MsgUndelegate extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != void 0) {
                  this.delegator_address = data.delegator_address;
                }
                if ("validator_address" in data && data.validator_address != void 0) {
                  this.validator_address = data.validator_address;
                }
                if ("amount" in data && data.amount != void 0) {
                  this.amount = data.amount;
                }
              }
            }
            get delegator_address() {
              return pb_1.Message.getField(this, 1);
            }
            set delegator_address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get validator_address() {
              return pb_1.Message.getField(this, 2);
            }
            set validator_address(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get amount() {
              return pb_1.Message.getWrapperField(this, dependency_5.cosmos.base.v1beta1.Coin, 3);
            }
            set amount(value) {
              pb_1.Message.setWrapperField(this, 3, value);
            }
            static fromObject(data) {
              const message = new MsgUndelegate({});
              if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
              }
              if (data.validator_address != null) {
                message.validator_address = data.validator_address;
              }
              if (data.amount != null) {
                message.amount = dependency_5.cosmos.base.v1beta1.Coin.fromObject(data.amount);
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
              }
              if (this.validator_address != null) {
                data.validator_address = this.validator_address;
              }
              if (this.amount != null) {
                data.amount = this.amount.toObject();
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.delegator_address === "string" && this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
              if (typeof this.validator_address === "string" && this.validator_address.length)
                writer.writeString(2, this.validator_address);
              if (this.amount !== void 0)
                writer.writeMessage(3, this.amount, () => this.amount.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUndelegate();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.delegator_address = reader.readString();
                    break;
                  case 2:
                    message.validator_address = reader.readString();
                    break;
                  case 3:
                    reader.readMessage(message.amount, () => message.amount = dependency_5.cosmos.base.v1beta1.Coin.deserialize(reader));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgUndelegate.deserialize(bytes);
            }
          }
          v1beta12.MsgUndelegate = MsgUndelegate;
          class MsgUndelegateResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("completion_time" in data && data.completion_time != void 0) {
                  this.completion_time = data.completion_time;
                }
              }
            }
            get completion_time() {
              return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Timestamp, 1);
            }
            set completion_time(value) {
              pb_1.Message.setWrapperField(this, 1, value);
            }
            static fromObject(data) {
              const message = new MsgUndelegateResponse({});
              if (data.completion_time != null) {
                message.completion_time = dependency_2.google.protobuf.Timestamp.fromObject(data.completion_time);
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.completion_time != null) {
                data.completion_time = this.completion_time.toObject();
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.completion_time !== void 0)
                writer.writeMessage(1, this.completion_time, () => this.completion_time.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUndelegateResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.completion_time, () => message.completion_time = dependency_2.google.protobuf.Timestamp.deserialize(reader));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgUndelegateResponse.deserialize(bytes);
            }
          }
          v1beta12.MsgUndelegateResponse = MsgUndelegateResponse;
        })(v1beta1 = staking2.v1beta1 || (staking2.v1beta1 = {}));
      })(staking = cosmos2.staking || (cosmos2.staking = {}));
    })(cosmos = exports.cosmos || (exports.cosmos = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/cosmos/distribution/v1beta1/tx.js
var require_tx6 = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/cosmos/distribution/v1beta1/tx.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cosmos = void 0;
    var dependency_2 = __importStar(require_coin());
    var pb_1 = __importStar(require_google_protobuf());
    var cosmos;
    (function(cosmos2) {
      var distribution;
      (function(distribution2) {
        var v1beta1;
        (function(v1beta12) {
          class MsgSetWithdrawAddress extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != void 0) {
                  this.delegator_address = data.delegator_address;
                }
                if ("withdraw_address" in data && data.withdraw_address != void 0) {
                  this.withdraw_address = data.withdraw_address;
                }
              }
            }
            get delegator_address() {
              return pb_1.Message.getField(this, 1);
            }
            set delegator_address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get withdraw_address() {
              return pb_1.Message.getField(this, 2);
            }
            set withdraw_address(value) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
              const message = new MsgSetWithdrawAddress({});
              if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
              }
              if (data.withdraw_address != null) {
                message.withdraw_address = data.withdraw_address;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
              }
              if (this.withdraw_address != null) {
                data.withdraw_address = this.withdraw_address;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.delegator_address === "string" && this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
              if (typeof this.withdraw_address === "string" && this.withdraw_address.length)
                writer.writeString(2, this.withdraw_address);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSetWithdrawAddress();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.delegator_address = reader.readString();
                    break;
                  case 2:
                    message.withdraw_address = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgSetWithdrawAddress.deserialize(bytes);
            }
          }
          v1beta12.MsgSetWithdrawAddress = MsgSetWithdrawAddress;
          class MsgSetWithdrawAddressResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
              }
            }
            static fromObject(data) {
              const message = new MsgSetWithdrawAddressResponse({});
              return message;
            }
            toObject() {
              const data = {};
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSetWithdrawAddressResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgSetWithdrawAddressResponse.deserialize(bytes);
            }
          }
          v1beta12.MsgSetWithdrawAddressResponse = MsgSetWithdrawAddressResponse;
          class MsgWithdrawDelegatorReward extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("delegator_address" in data && data.delegator_address != void 0) {
                  this.delegator_address = data.delegator_address;
                }
                if ("validator_address" in data && data.validator_address != void 0) {
                  this.validator_address = data.validator_address;
                }
              }
            }
            get delegator_address() {
              return pb_1.Message.getField(this, 1);
            }
            set delegator_address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get validator_address() {
              return pb_1.Message.getField(this, 2);
            }
            set validator_address(value) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
              const message = new MsgWithdrawDelegatorReward({});
              if (data.delegator_address != null) {
                message.delegator_address = data.delegator_address;
              }
              if (data.validator_address != null) {
                message.validator_address = data.validator_address;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.delegator_address != null) {
                data.delegator_address = this.delegator_address;
              }
              if (this.validator_address != null) {
                data.validator_address = this.validator_address;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.delegator_address === "string" && this.delegator_address.length)
                writer.writeString(1, this.delegator_address);
              if (typeof this.validator_address === "string" && this.validator_address.length)
                writer.writeString(2, this.validator_address);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgWithdrawDelegatorReward();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.delegator_address = reader.readString();
                    break;
                  case 2:
                    message.validator_address = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgWithdrawDelegatorReward.deserialize(bytes);
            }
          }
          v1beta12.MsgWithdrawDelegatorReward = MsgWithdrawDelegatorReward;
          class MsgWithdrawDelegatorRewardResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
              }
            }
            static fromObject(data) {
              const message = new MsgWithdrawDelegatorRewardResponse({});
              return message;
            }
            toObject() {
              const data = {};
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgWithdrawDelegatorRewardResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgWithdrawDelegatorRewardResponse.deserialize(bytes);
            }
          }
          v1beta12.MsgWithdrawDelegatorRewardResponse = MsgWithdrawDelegatorRewardResponse;
          class MsgWithdrawValidatorCommission extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("validator_address" in data && data.validator_address != void 0) {
                  this.validator_address = data.validator_address;
                }
              }
            }
            get validator_address() {
              return pb_1.Message.getField(this, 1);
            }
            set validator_address(value) {
              pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data) {
              const message = new MsgWithdrawValidatorCommission({});
              if (data.validator_address != null) {
                message.validator_address = data.validator_address;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.validator_address != null) {
                data.validator_address = this.validator_address;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.validator_address === "string" && this.validator_address.length)
                writer.writeString(1, this.validator_address);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgWithdrawValidatorCommission();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.validator_address = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgWithdrawValidatorCommission.deserialize(bytes);
            }
          }
          v1beta12.MsgWithdrawValidatorCommission = MsgWithdrawValidatorCommission;
          class MsgWithdrawValidatorCommissionResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
              }
            }
            static fromObject(data) {
              const message = new MsgWithdrawValidatorCommissionResponse({});
              return message;
            }
            toObject() {
              const data = {};
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgWithdrawValidatorCommissionResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgWithdrawValidatorCommissionResponse.deserialize(bytes);
            }
          }
          v1beta12.MsgWithdrawValidatorCommissionResponse = MsgWithdrawValidatorCommissionResponse;
          class MsgFundCommunityPool extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != void 0) {
                  this.amount = data.amount;
                }
                if ("depositor" in data && data.depositor != void 0) {
                  this.depositor = data.depositor;
                }
              }
            }
            get amount() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.base.v1beta1.Coin, 1);
            }
            set amount(value) {
              pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get depositor() {
              return pb_1.Message.getField(this, 2);
            }
            set depositor(value) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
              const message = new MsgFundCommunityPool({});
              if (data.amount != null) {
                message.amount = data.amount.map((item) => dependency_2.cosmos.base.v1beta1.Coin.fromObject(item));
              }
              if (data.depositor != null) {
                message.depositor = data.depositor;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.amount != null) {
                data.amount = this.amount.map((item) => item.toObject());
              }
              if (this.depositor != null) {
                data.depositor = this.depositor;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.amount !== void 0)
                writer.writeRepeatedMessage(1, this.amount, (item) => item.serialize(writer));
              if (typeof this.depositor === "string" && this.depositor.length)
                writer.writeString(2, this.depositor);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgFundCommunityPool();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.amount, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_2.cosmos.base.v1beta1.Coin));
                    break;
                  case 2:
                    message.depositor = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgFundCommunityPool.deserialize(bytes);
            }
          }
          v1beta12.MsgFundCommunityPool = MsgFundCommunityPool;
          class MsgFundCommunityPoolResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
              }
            }
            static fromObject(data) {
              const message = new MsgFundCommunityPoolResponse({});
              return message;
            }
            toObject() {
              const data = {};
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgFundCommunityPoolResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgFundCommunityPoolResponse.deserialize(bytes);
            }
          }
          v1beta12.MsgFundCommunityPoolResponse = MsgFundCommunityPoolResponse;
        })(v1beta1 = distribution2.v1beta1 || (distribution2.v1beta1 = {}));
      })(distribution = cosmos2.distribution || (cosmos2.distribution = {}));
    })(cosmos = exports.cosmos || (exports.cosmos = {}));
  }
});

// node_modules/@tharsis/proto/dist/messages/staking.js
var require_staking2 = __commonJS({
  "node_modules/@tharsis/proto/dist/messages/staking.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMsgWithdrawValidatorCommission = exports.createMsgWithdrawDelegatorReward = exports.createMsgUndelegate = exports.createMsgBeginRedelegate = exports.createMsgDelegate = void 0;
    var staking = __importStar(require_tx5());
    var coin = __importStar(require_coin());
    var dist = __importStar(require_tx6());
    function createMsgDelegate(delegatorAddress, validatorAddress, amount, denom) {
      const value = new coin.cosmos.base.v1beta1.Coin({
        denom,
        amount
      });
      const message = new staking.cosmos.staking.v1beta1.MsgDelegate({
        delegator_address: delegatorAddress,
        validator_address: validatorAddress,
        amount: value
      });
      return {
        message,
        path: "cosmos.staking.v1beta1.MsgDelegate"
      };
    }
    exports.createMsgDelegate = createMsgDelegate;
    function createMsgBeginRedelegate(delegatorAddress, validatorSrcAddress, validatorDstAddress, amount, denom) {
      const value = new coin.cosmos.base.v1beta1.Coin({
        denom,
        amount
      });
      const message = new staking.cosmos.staking.v1beta1.MsgBeginRedelegate({
        delegator_address: delegatorAddress,
        validator_src_address: validatorSrcAddress,
        validator_dst_address: validatorDstAddress,
        amount: value
      });
      return {
        message,
        path: "cosmos.staking.v1beta1.MsgBeginRedelegate"
      };
    }
    exports.createMsgBeginRedelegate = createMsgBeginRedelegate;
    function createMsgUndelegate(delegatorAddress, validatorAddress, amount, denom) {
      const value = new coin.cosmos.base.v1beta1.Coin({
        denom,
        amount
      });
      const message = new staking.cosmos.staking.v1beta1.MsgUndelegate({
        delegator_address: delegatorAddress,
        validator_address: validatorAddress,
        amount: value
      });
      return {
        message,
        path: "cosmos.staking.v1beta1.MsgUndelegate"
      };
    }
    exports.createMsgUndelegate = createMsgUndelegate;
    function createMsgWithdrawDelegatorReward(delegatorAddress, validatorAddress) {
      const message = new dist.cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward({
        delegator_address: delegatorAddress,
        validator_address: validatorAddress
      });
      return {
        message,
        path: "cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward"
      };
    }
    exports.createMsgWithdrawDelegatorReward = createMsgWithdrawDelegatorReward;
    function createMsgWithdrawValidatorCommission(validatorAddress) {
      const message = new dist.cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission({
        validator_address: validatorAddress
      });
      return {
        message,
        path: "cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission"
      };
    }
    exports.createMsgWithdrawValidatorCommission = createMsgWithdrawValidatorCommission;
  }
});

// node_modules/@tharsis/proto/dist/proto/cosmos/crypto/multisig/v1beta1/multisig.js
var require_multisig = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/cosmos/crypto/multisig/v1beta1/multisig.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cosmos = void 0;
    var pb_1 = __importStar(require_google_protobuf());
    var cosmos;
    (function(cosmos2) {
      var crypto;
      (function(crypto2) {
        var multisig;
        (function(multisig2) {
          var v1beta1;
          (function(v1beta12) {
            class MultiSignature extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
                if (!Array.isArray(data) && typeof data == "object") {
                  if ("signatures" in data && data.signatures != void 0) {
                    this.signatures = data.signatures;
                  }
                }
              }
              get signatures() {
                return pb_1.Message.getField(this, 1);
              }
              set signatures(value) {
                pb_1.Message.setField(this, 1, value);
              }
              static fromObject(data) {
                const message = new MultiSignature({});
                if (data.signatures != null) {
                  message.signatures = data.signatures;
                }
                return message;
              }
              toObject() {
                const data = {};
                if (this.signatures != null) {
                  data.signatures = this.signatures;
                }
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.signatures !== void 0)
                  writer.writeRepeatedBytes(1, this.signatures);
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultiSignature();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    case 1:
                      pb_1.Message.addToRepeatedField(message, 1, reader.readBytes());
                      break;
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return MultiSignature.deserialize(bytes);
              }
            }
            v1beta12.MultiSignature = MultiSignature;
            class CompactBitArray extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                  if ("extra_bits_stored" in data && data.extra_bits_stored != void 0) {
                    this.extra_bits_stored = data.extra_bits_stored;
                  }
                  if ("elems" in data && data.elems != void 0) {
                    this.elems = data.elems;
                  }
                }
              }
              get extra_bits_stored() {
                return pb_1.Message.getField(this, 1);
              }
              set extra_bits_stored(value) {
                pb_1.Message.setField(this, 1, value);
              }
              get elems() {
                return pb_1.Message.getField(this, 2);
              }
              set elems(value) {
                pb_1.Message.setField(this, 2, value);
              }
              static fromObject(data) {
                const message = new CompactBitArray({});
                if (data.extra_bits_stored != null) {
                  message.extra_bits_stored = data.extra_bits_stored;
                }
                if (data.elems != null) {
                  message.elems = data.elems;
                }
                return message;
              }
              toObject() {
                const data = {};
                if (this.extra_bits_stored != null) {
                  data.extra_bits_stored = this.extra_bits_stored;
                }
                if (this.elems != null) {
                  data.elems = this.elems;
                }
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.extra_bits_stored !== void 0)
                  writer.writeUint32(1, this.extra_bits_stored);
                if (this.elems !== void 0)
                  writer.writeBytes(2, this.elems);
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CompactBitArray();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    case 1:
                      message.extra_bits_stored = reader.readUint32();
                      break;
                    case 2:
                      message.elems = reader.readBytes();
                      break;
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return CompactBitArray.deserialize(bytes);
              }
            }
            v1beta12.CompactBitArray = CompactBitArray;
          })(v1beta1 = multisig2.v1beta1 || (multisig2.v1beta1 = {}));
        })(multisig = crypto2.multisig || (crypto2.multisig = {}));
      })(crypto = cosmos2.crypto || (cosmos2.crypto = {}));
    })(cosmos = exports.cosmos || (exports.cosmos = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/cosmos/tx/v1beta1/tx.js
var require_tx7 = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/cosmos/tx/v1beta1/tx.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cosmos = void 0;
    var dependency_2 = __importStar(require_multisig());
    var dependency_3 = __importStar(require_coin());
    var dependency_5 = __importStar(require_any());
    var pb_1 = __importStar(require_google_protobuf());
    var cosmos;
    (function(cosmos2) {
      var tx;
      (function(tx2) {
        var v1beta1;
        (function(v1beta12) {
          class Tx extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("body" in data && data.body != void 0) {
                  this.body = data.body;
                }
                if ("auth_info" in data && data.auth_info != void 0) {
                  this.auth_info = data.auth_info;
                }
                if ("signatures" in data && data.signatures != void 0) {
                  this.signatures = data.signatures;
                }
              }
            }
            get body() {
              return pb_1.Message.getWrapperField(this, TxBody, 1);
            }
            set body(value) {
              pb_1.Message.setWrapperField(this, 1, value);
            }
            get auth_info() {
              return pb_1.Message.getWrapperField(this, AuthInfo, 2);
            }
            set auth_info(value) {
              pb_1.Message.setWrapperField(this, 2, value);
            }
            get signatures() {
              return pb_1.Message.getField(this, 3);
            }
            set signatures(value) {
              pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data) {
              const message = new Tx({});
              if (data.body != null) {
                message.body = TxBody.fromObject(data.body);
              }
              if (data.auth_info != null) {
                message.auth_info = AuthInfo.fromObject(data.auth_info);
              }
              if (data.signatures != null) {
                message.signatures = data.signatures;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.body != null) {
                data.body = this.body.toObject();
              }
              if (this.auth_info != null) {
                data.auth_info = this.auth_info.toObject();
              }
              if (this.signatures != null) {
                data.signatures = this.signatures;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.body !== void 0)
                writer.writeMessage(1, this.body, () => this.body.serialize(writer));
              if (this.auth_info !== void 0)
                writer.writeMessage(2, this.auth_info, () => this.auth_info.serialize(writer));
              if (this.signatures !== void 0)
                writer.writeRepeatedBytes(3, this.signatures);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Tx();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.body, () => message.body = TxBody.deserialize(reader));
                    break;
                  case 2:
                    reader.readMessage(message.auth_info, () => message.auth_info = AuthInfo.deserialize(reader));
                    break;
                  case 3:
                    pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Tx.deserialize(bytes);
            }
          }
          v1beta12.Tx = Tx;
          class TxRaw extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("body_bytes" in data && data.body_bytes != void 0) {
                  this.body_bytes = data.body_bytes;
                }
                if ("auth_info_bytes" in data && data.auth_info_bytes != void 0) {
                  this.auth_info_bytes = data.auth_info_bytes;
                }
                if ("signatures" in data && data.signatures != void 0) {
                  this.signatures = data.signatures;
                }
              }
            }
            get body_bytes() {
              return pb_1.Message.getField(this, 1);
            }
            set body_bytes(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get auth_info_bytes() {
              return pb_1.Message.getField(this, 2);
            }
            set auth_info_bytes(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get signatures() {
              return pb_1.Message.getField(this, 3);
            }
            set signatures(value) {
              pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data) {
              const message = new TxRaw({});
              if (data.body_bytes != null) {
                message.body_bytes = data.body_bytes;
              }
              if (data.auth_info_bytes != null) {
                message.auth_info_bytes = data.auth_info_bytes;
              }
              if (data.signatures != null) {
                message.signatures = data.signatures;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.body_bytes != null) {
                data.body_bytes = this.body_bytes;
              }
              if (this.auth_info_bytes != null) {
                data.auth_info_bytes = this.auth_info_bytes;
              }
              if (this.signatures != null) {
                data.signatures = this.signatures;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.body_bytes !== void 0)
                writer.writeBytes(1, this.body_bytes);
              if (this.auth_info_bytes !== void 0)
                writer.writeBytes(2, this.auth_info_bytes);
              if (this.signatures !== void 0)
                writer.writeRepeatedBytes(3, this.signatures);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TxRaw();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.body_bytes = reader.readBytes();
                    break;
                  case 2:
                    message.auth_info_bytes = reader.readBytes();
                    break;
                  case 3:
                    pb_1.Message.addToRepeatedField(message, 3, reader.readBytes());
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return TxRaw.deserialize(bytes);
            }
          }
          v1beta12.TxRaw = TxRaw;
          class SignDoc extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("body_bytes" in data && data.body_bytes != void 0) {
                  this.body_bytes = data.body_bytes;
                }
                if ("auth_info_bytes" in data && data.auth_info_bytes != void 0) {
                  this.auth_info_bytes = data.auth_info_bytes;
                }
                if ("chain_id" in data && data.chain_id != void 0) {
                  this.chain_id = data.chain_id;
                }
                if ("account_number" in data && data.account_number != void 0) {
                  this.account_number = data.account_number;
                }
              }
            }
            get body_bytes() {
              return pb_1.Message.getField(this, 1);
            }
            set body_bytes(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get auth_info_bytes() {
              return pb_1.Message.getField(this, 2);
            }
            set auth_info_bytes(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get chain_id() {
              return pb_1.Message.getField(this, 3);
            }
            set chain_id(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get account_number() {
              return pb_1.Message.getField(this, 4);
            }
            set account_number(value) {
              pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data) {
              const message = new SignDoc({});
              if (data.body_bytes != null) {
                message.body_bytes = data.body_bytes;
              }
              if (data.auth_info_bytes != null) {
                message.auth_info_bytes = data.auth_info_bytes;
              }
              if (data.chain_id != null) {
                message.chain_id = data.chain_id;
              }
              if (data.account_number != null) {
                message.account_number = data.account_number;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.body_bytes != null) {
                data.body_bytes = this.body_bytes;
              }
              if (this.auth_info_bytes != null) {
                data.auth_info_bytes = this.auth_info_bytes;
              }
              if (this.chain_id != null) {
                data.chain_id = this.chain_id;
              }
              if (this.account_number != null) {
                data.account_number = this.account_number;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.body_bytes !== void 0)
                writer.writeBytes(1, this.body_bytes);
              if (this.auth_info_bytes !== void 0)
                writer.writeBytes(2, this.auth_info_bytes);
              if (typeof this.chain_id === "string" && this.chain_id.length)
                writer.writeString(3, this.chain_id);
              if (this.account_number !== void 0)
                writer.writeUint64(4, this.account_number);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignDoc();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.body_bytes = reader.readBytes();
                    break;
                  case 2:
                    message.auth_info_bytes = reader.readBytes();
                    break;
                  case 3:
                    message.chain_id = reader.readString();
                    break;
                  case 4:
                    message.account_number = reader.readUint64();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return SignDoc.deserialize(bytes);
            }
          }
          v1beta12.SignDoc = SignDoc;
          class TxBody extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 1023, 2047], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("messages" in data && data.messages != void 0) {
                  this.messages = data.messages;
                }
                if ("memo" in data && data.memo != void 0) {
                  this.memo = data.memo;
                }
                if ("timeout_height" in data && data.timeout_height != void 0) {
                  this.timeout_height = data.timeout_height;
                }
                if ("extension_options" in data && data.extension_options != void 0) {
                  this.extension_options = data.extension_options;
                }
                if ("non_critical_extension_options" in data && data.non_critical_extension_options != void 0) {
                  this.non_critical_extension_options = data.non_critical_extension_options;
                }
              }
            }
            get messages() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_5.google.protobuf.Any, 1);
            }
            set messages(value) {
              pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get memo() {
              return pb_1.Message.getField(this, 2);
            }
            set memo(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get timeout_height() {
              return pb_1.Message.getField(this, 3);
            }
            set timeout_height(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get extension_options() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_5.google.protobuf.Any, 1023);
            }
            set extension_options(value) {
              pb_1.Message.setRepeatedWrapperField(this, 1023, value);
            }
            get non_critical_extension_options() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_5.google.protobuf.Any, 2047);
            }
            set non_critical_extension_options(value) {
              pb_1.Message.setRepeatedWrapperField(this, 2047, value);
            }
            static fromObject(data) {
              const message = new TxBody({});
              if (data.messages != null) {
                message.messages = data.messages.map((item) => dependency_5.google.protobuf.Any.fromObject(item));
              }
              if (data.memo != null) {
                message.memo = data.memo;
              }
              if (data.timeout_height != null) {
                message.timeout_height = data.timeout_height;
              }
              if (data.extension_options != null) {
                message.extension_options = data.extension_options.map((item) => dependency_5.google.protobuf.Any.fromObject(item));
              }
              if (data.non_critical_extension_options != null) {
                message.non_critical_extension_options = data.non_critical_extension_options.map((item) => dependency_5.google.protobuf.Any.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.messages != null) {
                data.messages = this.messages.map((item) => item.toObject());
              }
              if (this.memo != null) {
                data.memo = this.memo;
              }
              if (this.timeout_height != null) {
                data.timeout_height = this.timeout_height;
              }
              if (this.extension_options != null) {
                data.extension_options = this.extension_options.map((item) => item.toObject());
              }
              if (this.non_critical_extension_options != null) {
                data.non_critical_extension_options = this.non_critical_extension_options.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.messages !== void 0)
                writer.writeRepeatedMessage(1, this.messages, (item) => item.serialize(writer));
              if (typeof this.memo === "string" && this.memo.length)
                writer.writeString(2, this.memo);
              if (this.timeout_height !== void 0)
                writer.writeUint64(3, this.timeout_height);
              if (this.extension_options !== void 0)
                writer.writeRepeatedMessage(1023, this.extension_options, (item) => item.serialize(writer));
              if (this.non_critical_extension_options !== void 0)
                writer.writeRepeatedMessage(2047, this.non_critical_extension_options, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TxBody();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.messages, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.google.protobuf.Any.deserialize(reader), dependency_5.google.protobuf.Any));
                    break;
                  case 2:
                    message.memo = reader.readString();
                    break;
                  case 3:
                    message.timeout_height = reader.readUint64();
                    break;
                  case 1023:
                    reader.readMessage(message.extension_options, () => pb_1.Message.addToRepeatedWrapperField(message, 1023, dependency_5.google.protobuf.Any.deserialize(reader), dependency_5.google.protobuf.Any));
                    break;
                  case 2047:
                    reader.readMessage(message.non_critical_extension_options, () => pb_1.Message.addToRepeatedWrapperField(message, 2047, dependency_5.google.protobuf.Any.deserialize(reader), dependency_5.google.protobuf.Any));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return TxBody.deserialize(bytes);
            }
          }
          v1beta12.TxBody = TxBody;
          class AuthInfo extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("signer_infos" in data && data.signer_infos != void 0) {
                  this.signer_infos = data.signer_infos;
                }
                if ("fee" in data && data.fee != void 0) {
                  this.fee = data.fee;
                }
              }
            }
            get signer_infos() {
              return pb_1.Message.getRepeatedWrapperField(this, SignerInfo, 1);
            }
            set signer_infos(value) {
              pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get fee() {
              return pb_1.Message.getWrapperField(this, Fee, 2);
            }
            set fee(value) {
              pb_1.Message.setWrapperField(this, 2, value);
            }
            static fromObject(data) {
              const message = new AuthInfo({});
              if (data.signer_infos != null) {
                message.signer_infos = data.signer_infos.map((item) => SignerInfo.fromObject(item));
              }
              if (data.fee != null) {
                message.fee = Fee.fromObject(data.fee);
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.signer_infos != null) {
                data.signer_infos = this.signer_infos.map((item) => item.toObject());
              }
              if (this.fee != null) {
                data.fee = this.fee.toObject();
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.signer_infos !== void 0)
                writer.writeRepeatedMessage(1, this.signer_infos, (item) => item.serialize(writer));
              if (this.fee !== void 0)
                writer.writeMessage(2, this.fee, () => this.fee.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthInfo();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.signer_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SignerInfo.deserialize(reader), SignerInfo));
                    break;
                  case 2:
                    reader.readMessage(message.fee, () => message.fee = Fee.deserialize(reader));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return AuthInfo.deserialize(bytes);
            }
          }
          v1beta12.AuthInfo = AuthInfo;
          class SignerInfo extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("public_key" in data && data.public_key != void 0) {
                  this.public_key = data.public_key;
                }
                if ("mode_info" in data && data.mode_info != void 0) {
                  this.mode_info = data.mode_info;
                }
                if ("sequence" in data && data.sequence != void 0) {
                  this.sequence = data.sequence;
                }
              }
            }
            get public_key() {
              return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Any, 1);
            }
            set public_key(value) {
              pb_1.Message.setWrapperField(this, 1, value);
            }
            get mode_info() {
              return pb_1.Message.getWrapperField(this, ModeInfo, 2);
            }
            set mode_info(value) {
              pb_1.Message.setWrapperField(this, 2, value);
            }
            get sequence() {
              return pb_1.Message.getField(this, 3);
            }
            set sequence(value) {
              pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data) {
              const message = new SignerInfo({});
              if (data.public_key != null) {
                message.public_key = dependency_5.google.protobuf.Any.fromObject(data.public_key);
              }
              if (data.mode_info != null) {
                message.mode_info = ModeInfo.fromObject(data.mode_info);
              }
              if (data.sequence != null) {
                message.sequence = data.sequence;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.public_key != null) {
                data.public_key = this.public_key.toObject();
              }
              if (this.mode_info != null) {
                data.mode_info = this.mode_info.toObject();
              }
              if (this.sequence != null) {
                data.sequence = this.sequence;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.public_key !== void 0)
                writer.writeMessage(1, this.public_key, () => this.public_key.serialize(writer));
              if (this.mode_info !== void 0)
                writer.writeMessage(2, this.mode_info, () => this.mode_info.serialize(writer));
              if (this.sequence !== void 0)
                writer.writeUint64(3, this.sequence);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignerInfo();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.public_key, () => message.public_key = dependency_5.google.protobuf.Any.deserialize(reader));
                    break;
                  case 2:
                    reader.readMessage(message.mode_info, () => message.mode_info = ModeInfo.deserialize(reader));
                    break;
                  case 3:
                    message.sequence = reader.readUint64();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return SignerInfo.deserialize(bytes);
            }
          }
          v1beta12.SignerInfo = SignerInfo;
          class ModeInfo extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1, 2]]);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("single" in data && data.single != void 0) {
                  this.single = data.single;
                }
                if ("multi" in data && data.multi != void 0) {
                  this.multi = data.multi;
                }
              }
            }
            get single() {
              return pb_1.Message.getWrapperField(this, ModeInfo.Single, 1);
            }
            set single(value) {
              pb_1.Message.setOneofWrapperField(this, 1, [1, 2], value);
            }
            get multi() {
              return pb_1.Message.getWrapperField(this, ModeInfo.Multi, 2);
            }
            set multi(value) {
              pb_1.Message.setOneofWrapperField(this, 2, [1, 2], value);
            }
            get sum() {
              const cases = {
                0: "none",
                1: "single",
                2: "multi"
              };
              return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
            }
            static fromObject(data) {
              const message = new ModeInfo({});
              if (data.single != null) {
                message.single = ModeInfo.Single.fromObject(data.single);
              }
              if (data.multi != null) {
                message.multi = ModeInfo.Multi.fromObject(data.multi);
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.single != null) {
                data.single = this.single.toObject();
              }
              if (this.multi != null) {
                data.multi = this.multi.toObject();
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.single !== void 0)
                writer.writeMessage(1, this.single, () => this.single.serialize(writer));
              if (this.multi !== void 0)
                writer.writeMessage(2, this.multi, () => this.multi.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ModeInfo();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.single, () => message.single = ModeInfo.Single.deserialize(reader));
                    break;
                  case 2:
                    reader.readMessage(message.multi, () => message.multi = ModeInfo.Multi.deserialize(reader));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return ModeInfo.deserialize(bytes);
            }
          }
          v1beta12.ModeInfo = ModeInfo;
          (function(ModeInfo2) {
            class Single extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                  if ("mode" in data && data.mode != void 0) {
                    this.mode = data.mode;
                  }
                }
              }
              get mode() {
                return pb_1.Message.getField(this, 1);
              }
              set mode(value) {
                pb_1.Message.setField(this, 1, value);
              }
              static fromObject(data) {
                const message = new Single({});
                if (data.mode != null) {
                  message.mode = data.mode;
                }
                return message;
              }
              toObject() {
                const data = {};
                if (this.mode != null) {
                  data.mode = this.mode;
                }
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.mode !== void 0)
                  writer.writeEnum(1, this.mode);
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Single();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    case 1:
                      message.mode = reader.readEnum();
                      break;
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return Single.deserialize(bytes);
              }
            }
            ModeInfo2.Single = Single;
            class Multi extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
                if (!Array.isArray(data) && typeof data == "object") {
                  if ("bitarray" in data && data.bitarray != void 0) {
                    this.bitarray = data.bitarray;
                  }
                  if ("mode_infos" in data && data.mode_infos != void 0) {
                    this.mode_infos = data.mode_infos;
                  }
                }
              }
              get bitarray() {
                return pb_1.Message.getWrapperField(this, dependency_2.cosmos.crypto.multisig.v1beta1.CompactBitArray, 1);
              }
              set bitarray(value) {
                pb_1.Message.setWrapperField(this, 1, value);
              }
              get mode_infos() {
                return pb_1.Message.getRepeatedWrapperField(this, ModeInfo2, 2);
              }
              set mode_infos(value) {
                pb_1.Message.setRepeatedWrapperField(this, 2, value);
              }
              static fromObject(data) {
                const message = new Multi({});
                if (data.bitarray != null) {
                  message.bitarray = dependency_2.cosmos.crypto.multisig.v1beta1.CompactBitArray.fromObject(data.bitarray);
                }
                if (data.mode_infos != null) {
                  message.mode_infos = data.mode_infos.map((item) => ModeInfo2.fromObject(item));
                }
                return message;
              }
              toObject() {
                const data = {};
                if (this.bitarray != null) {
                  data.bitarray = this.bitarray.toObject();
                }
                if (this.mode_infos != null) {
                  data.mode_infos = this.mode_infos.map((item) => item.toObject());
                }
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.bitarray !== void 0)
                  writer.writeMessage(1, this.bitarray, () => this.bitarray.serialize(writer));
                if (this.mode_infos !== void 0)
                  writer.writeRepeatedMessage(2, this.mode_infos, (item) => item.serialize(writer));
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Multi();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    case 1:
                      reader.readMessage(message.bitarray, () => message.bitarray = dependency_2.cosmos.crypto.multisig.v1beta1.CompactBitArray.deserialize(reader));
                      break;
                    case 2:
                      reader.readMessage(message.mode_infos, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ModeInfo2.deserialize(reader), ModeInfo2));
                      break;
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return Multi.deserialize(bytes);
              }
            }
            ModeInfo2.Multi = Multi;
          })(ModeInfo = v1beta12.ModeInfo || (v1beta12.ModeInfo = {}));
          class Fee extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != void 0) {
                  this.amount = data.amount;
                }
                if ("gas_limit" in data && data.gas_limit != void 0) {
                  this.gas_limit = data.gas_limit;
                }
                if ("payer" in data && data.payer != void 0) {
                  this.payer = data.payer;
                }
                if ("granter" in data && data.granter != void 0) {
                  this.granter = data.granter;
                }
              }
            }
            get amount() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_3.cosmos.base.v1beta1.Coin, 1);
            }
            set amount(value) {
              pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get gas_limit() {
              return pb_1.Message.getField(this, 2);
            }
            set gas_limit(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get payer() {
              return pb_1.Message.getField(this, 3);
            }
            set payer(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get granter() {
              return pb_1.Message.getField(this, 4);
            }
            set granter(value) {
              pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data) {
              const message = new Fee({});
              if (data.amount != null) {
                message.amount = data.amount.map((item) => dependency_3.cosmos.base.v1beta1.Coin.fromObject(item));
              }
              if (data.gas_limit != null) {
                message.gas_limit = data.gas_limit;
              }
              if (data.payer != null) {
                message.payer = data.payer;
              }
              if (data.granter != null) {
                message.granter = data.granter;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.amount != null) {
                data.amount = this.amount.map((item) => item.toObject());
              }
              if (this.gas_limit != null) {
                data.gas_limit = this.gas_limit;
              }
              if (this.payer != null) {
                data.payer = this.payer;
              }
              if (this.granter != null) {
                data.granter = this.granter;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.amount !== void 0)
                writer.writeRepeatedMessage(1, this.amount, (item) => item.serialize(writer));
              if (this.gas_limit !== void 0)
                writer.writeUint64(2, this.gas_limit);
              if (typeof this.payer === "string" && this.payer.length)
                writer.writeString(3, this.payer);
              if (typeof this.granter === "string" && this.granter.length)
                writer.writeString(4, this.granter);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Fee();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.amount, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_3.cosmos.base.v1beta1.Coin));
                    break;
                  case 2:
                    message.gas_limit = reader.readUint64();
                    break;
                  case 3:
                    message.payer = reader.readString();
                    break;
                  case 4:
                    message.granter = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Fee.deserialize(bytes);
            }
          }
          v1beta12.Fee = Fee;
        })(v1beta1 = tx2.v1beta1 || (tx2.v1beta1 = {}));
      })(tx = cosmos2.tx || (cosmos2.tx = {}));
    })(cosmos = exports.cosmos || (exports.cosmos = {}));
  }
});

// node_modules/@tharsis/proto/dist/messages/txRaw.js
var require_txRaw = __commonJS({
  "node_modules/@tharsis/proto/dist/messages/txRaw.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTxRaw = exports.bytesToAuthInfo = exports.bytesToTxBody = exports.bytesToTxRaw = void 0;
    var tx = __importStar(require_tx7());
    function bytesToTxRaw(bytes) {
      return tx.cosmos.tx.v1beta1.TxRaw.deserialize(bytes);
    }
    exports.bytesToTxRaw = bytesToTxRaw;
    function bytesToTxBody(bytes) {
      return tx.cosmos.tx.v1beta1.TxBody.deserialize(bytes);
    }
    exports.bytesToTxBody = bytesToTxBody;
    function bytesToAuthInfo(bytes) {
      return tx.cosmos.tx.v1beta1.AuthInfo.deserialize(bytes);
    }
    exports.bytesToAuthInfo = bytesToAuthInfo;
    function createTxRaw(bodyBytes, authInfoBytes, signatures) {
      const message = new tx.cosmos.tx.v1beta1.TxRaw({
        body_bytes: bodyBytes,
        auth_info_bytes: authInfoBytes,
        signatures
      });
      return {
        message,
        path: "cosmos.tx.v1beta1.TxRaw"
      };
    }
    exports.createTxRaw = createTxRaw;
  }
});

// node_modules/@tharsis/proto/dist/messages/utils.js
var require_utils = __commonJS({
  "node_modules/@tharsis/proto/dist/messages/utils.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createAnyMessage = void 0;
    var google = __importStar(require_any());
    function createAnyMessage(msg) {
      return new google.google.protobuf.Any({
        type_url: `/${msg.path}`,
        value: msg.message.serializeBinary()
      });
    }
    exports.createAnyMessage = createAnyMessage;
  }
});

// node_modules/@tharsis/proto/dist/messages/validator.js
var require_validator2 = __commonJS({
  "node_modules/@tharsis/proto/dist/messages/validator.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMsgEditValidator = void 0;
    var stakingTypes = __importStar(require_staking());
    var staking = __importStar(require_tx5());
    var NOT_MODIFY = "[do-not-modify]";
    function createMsgEditValidator(moniker, identity, website, securityContact, details, validatorAddress, commissionRate, minSelfDelegation) {
      const message = new staking.cosmos.staking.v1beta1.MsgEditValidator({
        description: new stakingTypes.cosmos.staking.v1beta1.Description({
          moniker: moniker || NOT_MODIFY,
          identity: identity || NOT_MODIFY,
          website: website || NOT_MODIFY,
          security_contact: securityContact || NOT_MODIFY,
          details: details || NOT_MODIFY
        }),
        validator_address: validatorAddress,
        commission_rate: commissionRate,
        min_self_delegation: minSelfDelegation
      });
      return {
        message,
        path: "cosmos.staking.v1beta1.MsgEditValidator"
      };
    }
    exports.createMsgEditValidator = createMsgEditValidator;
  }
});

// node_modules/@tharsis/proto/dist/proto/cosmos/gov/v1beta1/gov.js
var require_gov = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/cosmos/gov/v1beta1/gov.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cosmos = void 0;
    var dependency_1 = __importStar(require_coin());
    var dependency_4 = __importStar(require_timestamp());
    var dependency_5 = __importStar(require_any());
    var dependency_6 = __importStar(require_duration());
    var pb_1 = __importStar(require_google_protobuf());
    var cosmos;
    (function(cosmos2) {
      var gov;
      (function(gov2) {
        var v1beta1;
        (function(v1beta12) {
          let VoteOption;
          (function(VoteOption2) {
            VoteOption2[VoteOption2["VOTE_OPTION_UNSPECIFIED"] = 0] = "VOTE_OPTION_UNSPECIFIED";
            VoteOption2[VoteOption2["VOTE_OPTION_YES"] = 1] = "VOTE_OPTION_YES";
            VoteOption2[VoteOption2["VOTE_OPTION_ABSTAIN"] = 2] = "VOTE_OPTION_ABSTAIN";
            VoteOption2[VoteOption2["VOTE_OPTION_NO"] = 3] = "VOTE_OPTION_NO";
            VoteOption2[VoteOption2["VOTE_OPTION_NO_WITH_VETO"] = 4] = "VOTE_OPTION_NO_WITH_VETO";
          })(VoteOption = v1beta12.VoteOption || (v1beta12.VoteOption = {}));
          let ProposalStatus;
          (function(ProposalStatus2) {
            ProposalStatus2[ProposalStatus2["PROPOSAL_STATUS_UNSPECIFIED"] = 0] = "PROPOSAL_STATUS_UNSPECIFIED";
            ProposalStatus2[ProposalStatus2["PROPOSAL_STATUS_DEPOSIT_PERIOD"] = 1] = "PROPOSAL_STATUS_DEPOSIT_PERIOD";
            ProposalStatus2[ProposalStatus2["PROPOSAL_STATUS_VOTING_PERIOD"] = 2] = "PROPOSAL_STATUS_VOTING_PERIOD";
            ProposalStatus2[ProposalStatus2["PROPOSAL_STATUS_PASSED"] = 3] = "PROPOSAL_STATUS_PASSED";
            ProposalStatus2[ProposalStatus2["PROPOSAL_STATUS_REJECTED"] = 4] = "PROPOSAL_STATUS_REJECTED";
            ProposalStatus2[ProposalStatus2["PROPOSAL_STATUS_FAILED"] = 5] = "PROPOSAL_STATUS_FAILED";
          })(ProposalStatus = v1beta12.ProposalStatus || (v1beta12.ProposalStatus = {}));
          class WeightedVoteOption extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("option" in data && data.option != void 0) {
                  this.option = data.option;
                }
                if ("weight" in data && data.weight != void 0) {
                  this.weight = data.weight;
                }
              }
            }
            get option() {
              return pb_1.Message.getField(this, 1);
            }
            set option(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get weight() {
              return pb_1.Message.getField(this, 2);
            }
            set weight(value) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
              const message = new WeightedVoteOption({});
              if (data.option != null) {
                message.option = data.option;
              }
              if (data.weight != null) {
                message.weight = data.weight;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.option != null) {
                data.option = this.option;
              }
              if (this.weight != null) {
                data.weight = this.weight;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.option !== void 0)
                writer.writeEnum(1, this.option);
              if (typeof this.weight === "string" && this.weight.length)
                writer.writeString(2, this.weight);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WeightedVoteOption();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.option = reader.readEnum();
                    break;
                  case 2:
                    message.weight = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return WeightedVoteOption.deserialize(bytes);
            }
          }
          v1beta12.WeightedVoteOption = WeightedVoteOption;
          class TextProposal extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("title" in data && data.title != void 0) {
                  this.title = data.title;
                }
                if ("description" in data && data.description != void 0) {
                  this.description = data.description;
                }
              }
            }
            get title() {
              return pb_1.Message.getField(this, 1);
            }
            set title(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get description() {
              return pb_1.Message.getField(this, 2);
            }
            set description(value) {
              pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data) {
              const message = new TextProposal({});
              if (data.title != null) {
                message.title = data.title;
              }
              if (data.description != null) {
                message.description = data.description;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.title != null) {
                data.title = this.title;
              }
              if (this.description != null) {
                data.description = this.description;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.title === "string" && this.title.length)
                writer.writeString(1, this.title);
              if (typeof this.description === "string" && this.description.length)
                writer.writeString(2, this.description);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TextProposal();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.title = reader.readString();
                    break;
                  case 2:
                    message.description = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return TextProposal.deserialize(bytes);
            }
          }
          v1beta12.TextProposal = TextProposal;
          class Deposit extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != void 0) {
                  this.proposal_id = data.proposal_id;
                }
                if ("depositor" in data && data.depositor != void 0) {
                  this.depositor = data.depositor;
                }
                if ("amount" in data && data.amount != void 0) {
                  this.amount = data.amount;
                }
              }
            }
            get proposal_id() {
              return pb_1.Message.getField(this, 1);
            }
            set proposal_id(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get depositor() {
              return pb_1.Message.getField(this, 2);
            }
            set depositor(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get amount() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 3);
            }
            set amount(value) {
              pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data) {
              const message = new Deposit({});
              if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
              }
              if (data.depositor != null) {
                message.depositor = data.depositor;
              }
              if (data.amount != null) {
                message.amount = data.amount.map((item) => dependency_1.cosmos.base.v1beta1.Coin.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
              }
              if (this.depositor != null) {
                data.depositor = this.depositor;
              }
              if (this.amount != null) {
                data.amount = this.amount.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.proposal_id !== void 0)
                writer.writeUint64(1, this.proposal_id);
              if (typeof this.depositor === "string" && this.depositor.length)
                writer.writeString(2, this.depositor);
              if (this.amount !== void 0)
                writer.writeRepeatedMessage(3, this.amount, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Deposit();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.proposal_id = reader.readUint64();
                    break;
                  case 2:
                    message.depositor = reader.readString();
                    break;
                  case 3:
                    reader.readMessage(message.amount, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_1.cosmos.base.v1beta1.Coin));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Deposit.deserialize(bytes);
            }
          }
          v1beta12.Deposit = Deposit;
          class Proposal extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != void 0) {
                  this.proposal_id = data.proposal_id;
                }
                if ("content" in data && data.content != void 0) {
                  this.content = data.content;
                }
                if ("status" in data && data.status != void 0) {
                  this.status = data.status;
                }
                if ("final_tally_result" in data && data.final_tally_result != void 0) {
                  this.final_tally_result = data.final_tally_result;
                }
                if ("submit_time" in data && data.submit_time != void 0) {
                  this.submit_time = data.submit_time;
                }
                if ("deposit_end_time" in data && data.deposit_end_time != void 0) {
                  this.deposit_end_time = data.deposit_end_time;
                }
                if ("total_deposit" in data && data.total_deposit != void 0) {
                  this.total_deposit = data.total_deposit;
                }
                if ("voting_start_time" in data && data.voting_start_time != void 0) {
                  this.voting_start_time = data.voting_start_time;
                }
                if ("voting_end_time" in data && data.voting_end_time != void 0) {
                  this.voting_end_time = data.voting_end_time;
                }
              }
            }
            get proposal_id() {
              return pb_1.Message.getField(this, 1);
            }
            set proposal_id(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get content() {
              return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Any, 2);
            }
            set content(value) {
              pb_1.Message.setWrapperField(this, 2, value);
            }
            get status() {
              return pb_1.Message.getField(this, 3);
            }
            set status(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get final_tally_result() {
              return pb_1.Message.getWrapperField(this, TallyResult, 4);
            }
            set final_tally_result(value) {
              pb_1.Message.setWrapperField(this, 4, value);
            }
            get submit_time() {
              return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 5);
            }
            set submit_time(value) {
              pb_1.Message.setWrapperField(this, 5, value);
            }
            get deposit_end_time() {
              return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 6);
            }
            set deposit_end_time(value) {
              pb_1.Message.setWrapperField(this, 6, value);
            }
            get total_deposit() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 7);
            }
            set total_deposit(value) {
              pb_1.Message.setRepeatedWrapperField(this, 7, value);
            }
            get voting_start_time() {
              return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 8);
            }
            set voting_start_time(value) {
              pb_1.Message.setWrapperField(this, 8, value);
            }
            get voting_end_time() {
              return pb_1.Message.getWrapperField(this, dependency_4.google.protobuf.Timestamp, 9);
            }
            set voting_end_time(value) {
              pb_1.Message.setWrapperField(this, 9, value);
            }
            static fromObject(data) {
              const message = new Proposal({});
              if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
              }
              if (data.content != null) {
                message.content = dependency_5.google.protobuf.Any.fromObject(data.content);
              }
              if (data.status != null) {
                message.status = data.status;
              }
              if (data.final_tally_result != null) {
                message.final_tally_result = TallyResult.fromObject(data.final_tally_result);
              }
              if (data.submit_time != null) {
                message.submit_time = dependency_4.google.protobuf.Timestamp.fromObject(data.submit_time);
              }
              if (data.deposit_end_time != null) {
                message.deposit_end_time = dependency_4.google.protobuf.Timestamp.fromObject(data.deposit_end_time);
              }
              if (data.total_deposit != null) {
                message.total_deposit = data.total_deposit.map((item) => dependency_1.cosmos.base.v1beta1.Coin.fromObject(item));
              }
              if (data.voting_start_time != null) {
                message.voting_start_time = dependency_4.google.protobuf.Timestamp.fromObject(data.voting_start_time);
              }
              if (data.voting_end_time != null) {
                message.voting_end_time = dependency_4.google.protobuf.Timestamp.fromObject(data.voting_end_time);
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
              }
              if (this.content != null) {
                data.content = this.content.toObject();
              }
              if (this.status != null) {
                data.status = this.status;
              }
              if (this.final_tally_result != null) {
                data.final_tally_result = this.final_tally_result.toObject();
              }
              if (this.submit_time != null) {
                data.submit_time = this.submit_time.toObject();
              }
              if (this.deposit_end_time != null) {
                data.deposit_end_time = this.deposit_end_time.toObject();
              }
              if (this.total_deposit != null) {
                data.total_deposit = this.total_deposit.map((item) => item.toObject());
              }
              if (this.voting_start_time != null) {
                data.voting_start_time = this.voting_start_time.toObject();
              }
              if (this.voting_end_time != null) {
                data.voting_end_time = this.voting_end_time.toObject();
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.proposal_id !== void 0)
                writer.writeUint64(1, this.proposal_id);
              if (this.content !== void 0)
                writer.writeMessage(2, this.content, () => this.content.serialize(writer));
              if (this.status !== void 0)
                writer.writeEnum(3, this.status);
              if (this.final_tally_result !== void 0)
                writer.writeMessage(4, this.final_tally_result, () => this.final_tally_result.serialize(writer));
              if (this.submit_time !== void 0)
                writer.writeMessage(5, this.submit_time, () => this.submit_time.serialize(writer));
              if (this.deposit_end_time !== void 0)
                writer.writeMessage(6, this.deposit_end_time, () => this.deposit_end_time.serialize(writer));
              if (this.total_deposit !== void 0)
                writer.writeRepeatedMessage(7, this.total_deposit, (item) => item.serialize(writer));
              if (this.voting_start_time !== void 0)
                writer.writeMessage(8, this.voting_start_time, () => this.voting_start_time.serialize(writer));
              if (this.voting_end_time !== void 0)
                writer.writeMessage(9, this.voting_end_time, () => this.voting_end_time.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Proposal();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.proposal_id = reader.readUint64();
                    break;
                  case 2:
                    reader.readMessage(message.content, () => message.content = dependency_5.google.protobuf.Any.deserialize(reader));
                    break;
                  case 3:
                    message.status = reader.readEnum();
                    break;
                  case 4:
                    reader.readMessage(message.final_tally_result, () => message.final_tally_result = TallyResult.deserialize(reader));
                    break;
                  case 5:
                    reader.readMessage(message.submit_time, () => message.submit_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                    break;
                  case 6:
                    reader.readMessage(message.deposit_end_time, () => message.deposit_end_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                    break;
                  case 7:
                    reader.readMessage(message.total_deposit, () => pb_1.Message.addToRepeatedWrapperField(message, 7, dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_1.cosmos.base.v1beta1.Coin));
                    break;
                  case 8:
                    reader.readMessage(message.voting_start_time, () => message.voting_start_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                    break;
                  case 9:
                    reader.readMessage(message.voting_end_time, () => message.voting_end_time = dependency_4.google.protobuf.Timestamp.deserialize(reader));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Proposal.deserialize(bytes);
            }
          }
          v1beta12.Proposal = Proposal;
          class TallyResult extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("yes" in data && data.yes != void 0) {
                  this.yes = data.yes;
                }
                if ("abstain" in data && data.abstain != void 0) {
                  this.abstain = data.abstain;
                }
                if ("no" in data && data.no != void 0) {
                  this.no = data.no;
                }
                if ("no_with_veto" in data && data.no_with_veto != void 0) {
                  this.no_with_veto = data.no_with_veto;
                }
              }
            }
            get yes() {
              return pb_1.Message.getField(this, 1);
            }
            set yes(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get abstain() {
              return pb_1.Message.getField(this, 2);
            }
            set abstain(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get no() {
              return pb_1.Message.getField(this, 3);
            }
            set no(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get no_with_veto() {
              return pb_1.Message.getField(this, 4);
            }
            set no_with_veto(value) {
              pb_1.Message.setField(this, 4, value);
            }
            static fromObject(data) {
              const message = new TallyResult({});
              if (data.yes != null) {
                message.yes = data.yes;
              }
              if (data.abstain != null) {
                message.abstain = data.abstain;
              }
              if (data.no != null) {
                message.no = data.no;
              }
              if (data.no_with_veto != null) {
                message.no_with_veto = data.no_with_veto;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.yes != null) {
                data.yes = this.yes;
              }
              if (this.abstain != null) {
                data.abstain = this.abstain;
              }
              if (this.no != null) {
                data.no = this.no;
              }
              if (this.no_with_veto != null) {
                data.no_with_veto = this.no_with_veto;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (typeof this.yes === "string" && this.yes.length)
                writer.writeString(1, this.yes);
              if (typeof this.abstain === "string" && this.abstain.length)
                writer.writeString(2, this.abstain);
              if (typeof this.no === "string" && this.no.length)
                writer.writeString(3, this.no);
              if (typeof this.no_with_veto === "string" && this.no_with_veto.length)
                writer.writeString(4, this.no_with_veto);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TallyResult();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.yes = reader.readString();
                    break;
                  case 2:
                    message.abstain = reader.readString();
                    break;
                  case 3:
                    message.no = reader.readString();
                    break;
                  case 4:
                    message.no_with_veto = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return TallyResult.deserialize(bytes);
            }
          }
          v1beta12.TallyResult = TallyResult;
          class Vote extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != void 0) {
                  this.proposal_id = data.proposal_id;
                }
                if ("voter" in data && data.voter != void 0) {
                  this.voter = data.voter;
                }
                if ("option" in data && data.option != void 0) {
                  this.option = data.option;
                }
                if ("options" in data && data.options != void 0) {
                  this.options = data.options;
                }
              }
            }
            get proposal_id() {
              return pb_1.Message.getField(this, 1);
            }
            set proposal_id(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get voter() {
              return pb_1.Message.getField(this, 2);
            }
            set voter(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get option() {
              return pb_1.Message.getField(this, 3);
            }
            set option(value) {
              pb_1.Message.setField(this, 3, value);
            }
            get options() {
              return pb_1.Message.getRepeatedWrapperField(this, WeightedVoteOption, 4);
            }
            set options(value) {
              pb_1.Message.setRepeatedWrapperField(this, 4, value);
            }
            static fromObject(data) {
              const message = new Vote({});
              if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
              }
              if (data.voter != null) {
                message.voter = data.voter;
              }
              if (data.option != null) {
                message.option = data.option;
              }
              if (data.options != null) {
                message.options = data.options.map((item) => WeightedVoteOption.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
              }
              if (this.voter != null) {
                data.voter = this.voter;
              }
              if (this.option != null) {
                data.option = this.option;
              }
              if (this.options != null) {
                data.options = this.options.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.proposal_id !== void 0)
                writer.writeUint64(1, this.proposal_id);
              if (typeof this.voter === "string" && this.voter.length)
                writer.writeString(2, this.voter);
              if (this.option !== void 0)
                writer.writeEnum(3, this.option);
              if (this.options !== void 0)
                writer.writeRepeatedMessage(4, this.options, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Vote();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.proposal_id = reader.readUint64();
                    break;
                  case 2:
                    message.voter = reader.readString();
                    break;
                  case 3:
                    message.option = reader.readEnum();
                    break;
                  case 4:
                    reader.readMessage(message.options, () => pb_1.Message.addToRepeatedWrapperField(message, 4, WeightedVoteOption.deserialize(reader), WeightedVoteOption));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return Vote.deserialize(bytes);
            }
          }
          v1beta12.Vote = Vote;
          class DepositParams extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("min_deposit" in data && data.min_deposit != void 0) {
                  this.min_deposit = data.min_deposit;
                }
                if ("max_deposit_period" in data && data.max_deposit_period != void 0) {
                  this.max_deposit_period = data.max_deposit_period;
                }
              }
            }
            get min_deposit() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 1);
            }
            set min_deposit(value) {
              pb_1.Message.setRepeatedWrapperField(this, 1, value);
            }
            get max_deposit_period() {
              return pb_1.Message.getWrapperField(this, dependency_6.google.protobuf.Duration, 2);
            }
            set max_deposit_period(value) {
              pb_1.Message.setWrapperField(this, 2, value);
            }
            static fromObject(data) {
              const message = new DepositParams({});
              if (data.min_deposit != null) {
                message.min_deposit = data.min_deposit.map((item) => dependency_1.cosmos.base.v1beta1.Coin.fromObject(item));
              }
              if (data.max_deposit_period != null) {
                message.max_deposit_period = dependency_6.google.protobuf.Duration.fromObject(data.max_deposit_period);
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.min_deposit != null) {
                data.min_deposit = this.min_deposit.map((item) => item.toObject());
              }
              if (this.max_deposit_period != null) {
                data.max_deposit_period = this.max_deposit_period.toObject();
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.min_deposit !== void 0)
                writer.writeRepeatedMessage(1, this.min_deposit, (item) => item.serialize(writer));
              if (this.max_deposit_period !== void 0)
                writer.writeMessage(2, this.max_deposit_period, () => this.max_deposit_period.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DepositParams();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.min_deposit, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_1.cosmos.base.v1beta1.Coin));
                    break;
                  case 2:
                    reader.readMessage(message.max_deposit_period, () => message.max_deposit_period = dependency_6.google.protobuf.Duration.deserialize(reader));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return DepositParams.deserialize(bytes);
            }
          }
          v1beta12.DepositParams = DepositParams;
          class VotingParams extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("voting_period" in data && data.voting_period != void 0) {
                  this.voting_period = data.voting_period;
                }
              }
            }
            get voting_period() {
              return pb_1.Message.getWrapperField(this, dependency_6.google.protobuf.Duration, 1);
            }
            set voting_period(value) {
              pb_1.Message.setWrapperField(this, 1, value);
            }
            static fromObject(data) {
              const message = new VotingParams({});
              if (data.voting_period != null) {
                message.voting_period = dependency_6.google.protobuf.Duration.fromObject(data.voting_period);
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.voting_period != null) {
                data.voting_period = this.voting_period.toObject();
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.voting_period !== void 0)
                writer.writeMessage(1, this.voting_period, () => this.voting_period.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VotingParams();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.voting_period, () => message.voting_period = dependency_6.google.protobuf.Duration.deserialize(reader));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return VotingParams.deserialize(bytes);
            }
          }
          v1beta12.VotingParams = VotingParams;
          class TallyParams extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("quorum" in data && data.quorum != void 0) {
                  this.quorum = data.quorum;
                }
                if ("threshold" in data && data.threshold != void 0) {
                  this.threshold = data.threshold;
                }
                if ("veto_threshold" in data && data.veto_threshold != void 0) {
                  this.veto_threshold = data.veto_threshold;
                }
              }
            }
            get quorum() {
              return pb_1.Message.getField(this, 1);
            }
            set quorum(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get threshold() {
              return pb_1.Message.getField(this, 2);
            }
            set threshold(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get veto_threshold() {
              return pb_1.Message.getField(this, 3);
            }
            set veto_threshold(value) {
              pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data) {
              const message = new TallyParams({});
              if (data.quorum != null) {
                message.quorum = data.quorum;
              }
              if (data.threshold != null) {
                message.threshold = data.threshold;
              }
              if (data.veto_threshold != null) {
                message.veto_threshold = data.veto_threshold;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.quorum != null) {
                data.quorum = this.quorum;
              }
              if (this.threshold != null) {
                data.threshold = this.threshold;
              }
              if (this.veto_threshold != null) {
                data.veto_threshold = this.veto_threshold;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.quorum !== void 0)
                writer.writeBytes(1, this.quorum);
              if (this.threshold !== void 0)
                writer.writeBytes(2, this.threshold);
              if (this.veto_threshold !== void 0)
                writer.writeBytes(3, this.veto_threshold);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TallyParams();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.quorum = reader.readBytes();
                    break;
                  case 2:
                    message.threshold = reader.readBytes();
                    break;
                  case 3:
                    message.veto_threshold = reader.readBytes();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return TallyParams.deserialize(bytes);
            }
          }
          v1beta12.TallyParams = TallyParams;
        })(v1beta1 = gov2.v1beta1 || (gov2.v1beta1 = {}));
      })(gov = cosmos2.gov || (cosmos2.gov = {}));
    })(cosmos = exports.cosmos || (exports.cosmos = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/cosmos/gov/v1beta1/tx.js
var require_tx8 = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/cosmos/gov/v1beta1/tx.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cosmos = void 0;
    var dependency_1 = __importStar(require_coin());
    var dependency_2 = __importStar(require_gov());
    var dependency_5 = __importStar(require_any());
    var pb_1 = __importStar(require_google_protobuf());
    var cosmos;
    (function(cosmos2) {
      var gov;
      (function(gov2) {
        var v1beta1;
        (function(v1beta12) {
          class MsgSubmitProposal extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("content" in data && data.content != void 0) {
                  this.content = data.content;
                }
                if ("initial_deposit" in data && data.initial_deposit != void 0) {
                  this.initial_deposit = data.initial_deposit;
                }
                if ("proposer" in data && data.proposer != void 0) {
                  this.proposer = data.proposer;
                }
              }
            }
            get content() {
              return pb_1.Message.getWrapperField(this, dependency_5.google.protobuf.Any, 1);
            }
            set content(value) {
              pb_1.Message.setWrapperField(this, 1, value);
            }
            get initial_deposit() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 2);
            }
            set initial_deposit(value) {
              pb_1.Message.setRepeatedWrapperField(this, 2, value);
            }
            get proposer() {
              return pb_1.Message.getField(this, 3);
            }
            set proposer(value) {
              pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data) {
              const message = new MsgSubmitProposal({});
              if (data.content != null) {
                message.content = dependency_5.google.protobuf.Any.fromObject(data.content);
              }
              if (data.initial_deposit != null) {
                message.initial_deposit = data.initial_deposit.map((item) => dependency_1.cosmos.base.v1beta1.Coin.fromObject(item));
              }
              if (data.proposer != null) {
                message.proposer = data.proposer;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.content != null) {
                data.content = this.content.toObject();
              }
              if (this.initial_deposit != null) {
                data.initial_deposit = this.initial_deposit.map((item) => item.toObject());
              }
              if (this.proposer != null) {
                data.proposer = this.proposer;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.content !== void 0)
                writer.writeMessage(1, this.content, () => this.content.serialize(writer));
              if (this.initial_deposit !== void 0)
                writer.writeRepeatedMessage(2, this.initial_deposit, (item) => item.serialize(writer));
              if (typeof this.proposer === "string" && this.proposer.length)
                writer.writeString(3, this.proposer);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSubmitProposal();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    reader.readMessage(message.content, () => message.content = dependency_5.google.protobuf.Any.deserialize(reader));
                    break;
                  case 2:
                    reader.readMessage(message.initial_deposit, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_1.cosmos.base.v1beta1.Coin));
                    break;
                  case 3:
                    message.proposer = reader.readString();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgSubmitProposal.deserialize(bytes);
            }
          }
          v1beta12.MsgSubmitProposal = MsgSubmitProposal;
          class MsgSubmitProposalResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != void 0) {
                  this.proposal_id = data.proposal_id;
                }
              }
            }
            get proposal_id() {
              return pb_1.Message.getField(this, 1);
            }
            set proposal_id(value) {
              pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data) {
              const message = new MsgSubmitProposalResponse({});
              if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.proposal_id !== void 0)
                writer.writeUint64(1, this.proposal_id);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSubmitProposalResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.proposal_id = reader.readUint64();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgSubmitProposalResponse.deserialize(bytes);
            }
          }
          v1beta12.MsgSubmitProposalResponse = MsgSubmitProposalResponse;
          class MsgVote extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != void 0) {
                  this.proposal_id = data.proposal_id;
                }
                if ("voter" in data && data.voter != void 0) {
                  this.voter = data.voter;
                }
                if ("option" in data && data.option != void 0) {
                  this.option = data.option;
                }
              }
            }
            get proposal_id() {
              return pb_1.Message.getField(this, 1);
            }
            set proposal_id(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get voter() {
              return pb_1.Message.getField(this, 2);
            }
            set voter(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get option() {
              return pb_1.Message.getField(this, 3);
            }
            set option(value) {
              pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data) {
              const message = new MsgVote({});
              if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
              }
              if (data.voter != null) {
                message.voter = data.voter;
              }
              if (data.option != null) {
                message.option = data.option;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
              }
              if (this.voter != null) {
                data.voter = this.voter;
              }
              if (this.option != null) {
                data.option = this.option;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.proposal_id !== void 0)
                writer.writeUint64(1, this.proposal_id);
              if (typeof this.voter === "string" && this.voter.length)
                writer.writeString(2, this.voter);
              if (this.option !== void 0)
                writer.writeEnum(3, this.option);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgVote();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.proposal_id = reader.readUint64();
                    break;
                  case 2:
                    message.voter = reader.readString();
                    break;
                  case 3:
                    message.option = reader.readEnum();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgVote.deserialize(bytes);
            }
          }
          v1beta12.MsgVote = MsgVote;
          class MsgVoteResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
              }
            }
            static fromObject(data) {
              const message = new MsgVoteResponse({});
              return message;
            }
            toObject() {
              const data = {};
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgVoteResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgVoteResponse.deserialize(bytes);
            }
          }
          v1beta12.MsgVoteResponse = MsgVoteResponse;
          class MsgVoteWeighted extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != void 0) {
                  this.proposal_id = data.proposal_id;
                }
                if ("voter" in data && data.voter != void 0) {
                  this.voter = data.voter;
                }
                if ("options" in data && data.options != void 0) {
                  this.options = data.options;
                }
              }
            }
            get proposal_id() {
              return pb_1.Message.getField(this, 1);
            }
            set proposal_id(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get voter() {
              return pb_1.Message.getField(this, 2);
            }
            set voter(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get options() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_2.cosmos.gov.v1beta1.WeightedVoteOption, 3);
            }
            set options(value) {
              pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data) {
              const message = new MsgVoteWeighted({});
              if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
              }
              if (data.voter != null) {
                message.voter = data.voter;
              }
              if (data.options != null) {
                message.options = data.options.map((item) => dependency_2.cosmos.gov.v1beta1.WeightedVoteOption.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
              }
              if (this.voter != null) {
                data.voter = this.voter;
              }
              if (this.options != null) {
                data.options = this.options.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.proposal_id !== void 0)
                writer.writeUint64(1, this.proposal_id);
              if (typeof this.voter === "string" && this.voter.length)
                writer.writeString(2, this.voter);
              if (this.options !== void 0)
                writer.writeRepeatedMessage(3, this.options, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgVoteWeighted();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.proposal_id = reader.readUint64();
                    break;
                  case 2:
                    message.voter = reader.readString();
                    break;
                  case 3:
                    reader.readMessage(message.options, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.cosmos.gov.v1beta1.WeightedVoteOption.deserialize(reader), dependency_2.cosmos.gov.v1beta1.WeightedVoteOption));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgVoteWeighted.deserialize(bytes);
            }
          }
          v1beta12.MsgVoteWeighted = MsgVoteWeighted;
          class MsgVoteWeightedResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
              }
            }
            static fromObject(data) {
              const message = new MsgVoteWeightedResponse({});
              return message;
            }
            toObject() {
              const data = {};
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgVoteWeightedResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgVoteWeightedResponse.deserialize(bytes);
            }
          }
          v1beta12.MsgVoteWeightedResponse = MsgVoteWeightedResponse;
          class MsgDeposit extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("proposal_id" in data && data.proposal_id != void 0) {
                  this.proposal_id = data.proposal_id;
                }
                if ("depositor" in data && data.depositor != void 0) {
                  this.depositor = data.depositor;
                }
                if ("amount" in data && data.amount != void 0) {
                  this.amount = data.amount;
                }
              }
            }
            get proposal_id() {
              return pb_1.Message.getField(this, 1);
            }
            set proposal_id(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get depositor() {
              return pb_1.Message.getField(this, 2);
            }
            set depositor(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get amount() {
              return pb_1.Message.getRepeatedWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 3);
            }
            set amount(value) {
              pb_1.Message.setRepeatedWrapperField(this, 3, value);
            }
            static fromObject(data) {
              const message = new MsgDeposit({});
              if (data.proposal_id != null) {
                message.proposal_id = data.proposal_id;
              }
              if (data.depositor != null) {
                message.depositor = data.depositor;
              }
              if (data.amount != null) {
                message.amount = data.amount.map((item) => dependency_1.cosmos.base.v1beta1.Coin.fromObject(item));
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.proposal_id != null) {
                data.proposal_id = this.proposal_id;
              }
              if (this.depositor != null) {
                data.depositor = this.depositor;
              }
              if (this.amount != null) {
                data.amount = this.amount.map((item) => item.toObject());
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.proposal_id !== void 0)
                writer.writeUint64(1, this.proposal_id);
              if (typeof this.depositor === "string" && this.depositor.length)
                writer.writeString(2, this.depositor);
              if (this.amount !== void 0)
                writer.writeRepeatedMessage(3, this.amount, (item) => item.serialize(writer));
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDeposit();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.proposal_id = reader.readUint64();
                    break;
                  case 2:
                    message.depositor = reader.readString();
                    break;
                  case 3:
                    reader.readMessage(message.amount, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_1.cosmos.base.v1beta1.Coin));
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgDeposit.deserialize(bytes);
            }
          }
          v1beta12.MsgDeposit = MsgDeposit;
          class MsgDepositResponse extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
              }
            }
            static fromObject(data) {
              const message = new MsgDepositResponse({});
              return message;
            }
            toObject() {
              const data = {};
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDepositResponse();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return MsgDepositResponse.deserialize(bytes);
            }
          }
          v1beta12.MsgDepositResponse = MsgDepositResponse;
        })(v1beta1 = gov2.v1beta1 || (gov2.v1beta1 = {}));
      })(gov = cosmos2.gov || (cosmos2.gov = {}));
    })(cosmos = exports.cosmos || (exports.cosmos = {}));
  }
});

// node_modules/@tharsis/proto/dist/messages/vote.js
var require_vote = __commonJS({
  "node_modules/@tharsis/proto/dist/messages/vote.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMsgVote = void 0;
    var govTx = __importStar(require_tx8());
    function createMsgVote(proposalId, option, sender) {
      const voteMessage = new govTx.cosmos.gov.v1beta1.MsgVote({
        proposal_id: proposalId,
        voter: sender,
        option
      });
      return {
        message: voteMessage,
        path: "cosmos.gov.v1beta1.MsgVote"
      };
    }
    exports.createMsgVote = createMsgVote;
  }
});

// node_modules/@tharsis/proto/dist/proto/ethermint/types/v1/web3.js
var require_web3 = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/ethermint/types/v1/web3.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ethermint = void 0;
    var pb_1 = __importStar(require_google_protobuf());
    var ethermint;
    (function(ethermint2) {
      var types;
      (function(types2) {
        var v1;
        (function(v12) {
          class ExtensionOptionsWeb3Tx extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("typed_data_chain_id" in data && data.typed_data_chain_id != void 0) {
                  this.typed_data_chain_id = data.typed_data_chain_id;
                }
                if ("fee_payer" in data && data.fee_payer != void 0) {
                  this.fee_payer = data.fee_payer;
                }
                if ("fee_payer_sig" in data && data.fee_payer_sig != void 0) {
                  this.fee_payer_sig = data.fee_payer_sig;
                }
              }
            }
            get typed_data_chain_id() {
              return pb_1.Message.getField(this, 1);
            }
            set typed_data_chain_id(value) {
              pb_1.Message.setField(this, 1, value);
            }
            get fee_payer() {
              return pb_1.Message.getField(this, 2);
            }
            set fee_payer(value) {
              pb_1.Message.setField(this, 2, value);
            }
            get fee_payer_sig() {
              return pb_1.Message.getField(this, 3);
            }
            set fee_payer_sig(value) {
              pb_1.Message.setField(this, 3, value);
            }
            static fromObject(data) {
              const message = new ExtensionOptionsWeb3Tx({});
              if (data.typed_data_chain_id != null) {
                message.typed_data_chain_id = data.typed_data_chain_id;
              }
              if (data.fee_payer != null) {
                message.fee_payer = data.fee_payer;
              }
              if (data.fee_payer_sig != null) {
                message.fee_payer_sig = data.fee_payer_sig;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.typed_data_chain_id != null) {
                data.typed_data_chain_id = this.typed_data_chain_id;
              }
              if (this.fee_payer != null) {
                data.fee_payer = this.fee_payer;
              }
              if (this.fee_payer_sig != null) {
                data.fee_payer_sig = this.fee_payer_sig;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.typed_data_chain_id !== void 0)
                writer.writeUint64(1, this.typed_data_chain_id);
              if (typeof this.fee_payer === "string" && this.fee_payer.length)
                writer.writeString(2, this.fee_payer);
              if (this.fee_payer_sig !== void 0)
                writer.writeBytes(3, this.fee_payer_sig);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ExtensionOptionsWeb3Tx();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.typed_data_chain_id = reader.readUint64();
                    break;
                  case 2:
                    message.fee_payer = reader.readString();
                    break;
                  case 3:
                    message.fee_payer_sig = reader.readBytes();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return ExtensionOptionsWeb3Tx.deserialize(bytes);
            }
          }
          v12.ExtensionOptionsWeb3Tx = ExtensionOptionsWeb3Tx;
        })(v1 = types2.v1 || (types2.v1 = {}));
      })(types = ethermint2.types || (ethermint2.types = {}));
    })(ethermint = exports.ethermint || (exports.ethermint = {}));
  }
});

// node_modules/@tharsis/proto/dist/messages/web3Extension.js
var require_web3Extension = __commonJS({
  "node_modules/@tharsis/proto/dist/messages/web3Extension.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createWeb3Extension = void 0;
    var web3 = __importStar(require_web3());
    function createWeb3Extension(chainId, feePayer, feePayerSig) {
      const message = new web3.ethermint.types.v1.ExtensionOptionsWeb3Tx({
        typed_data_chain_id: chainId,
        fee_payer: feePayer,
        fee_payer_sig: feePayerSig
      });
      return {
        message,
        path: "ethermint.types.v1.ExtensionOptionsWeb3Tx"
      };
    }
    exports.createWeb3Extension = createWeb3Extension;
  }
});

// node_modules/sha3/sponge/permute/copy/index.js
var require_copy = __commonJS({
  "node_modules/sha3/sponge/permute/copy/index.js"(exports, module) {
    "use strict";
    var copy = function copy2(I, i) {
      return function(O, o) {
        var oi = o * 2;
        var ii = i * 2;
        O[oi] = I[ii];
        O[oi + 1] = I[ii + 1];
      };
    };
    module.exports = copy;
  }
});

// node_modules/sha3/sponge/permute/chi/index.js
var require_chi = __commonJS({
  "node_modules/sha3/sponge/permute/chi/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _copy = _interopRequireDefault(require_copy());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var chi = function chi2(_ref) {
      var A = _ref.A, C = _ref.C;
      for (var y = 0; y < 25; y += 5) {
        for (var x = 0; x < 5; x++) {
          (0, _copy["default"])(A, y + x)(C, x);
        }
        for (var _x = 0; _x < 5; _x++) {
          var xy = (y + _x) * 2;
          var x1 = (_x + 1) % 5 * 2;
          var x2 = (_x + 2) % 5 * 2;
          A[xy] ^= ~C[x1] & C[x2];
          A[xy + 1] ^= ~C[x1 + 1] & C[x2 + 1];
        }
      }
    };
    var _default = chi;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/iota/round-constants/index.js
var require_round_constants = __commonJS({
  "node_modules/sha3/sponge/permute/iota/round-constants/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var ROUND_CONSTANTS = new Uint32Array([0, 1, 0, 32898, 2147483648, 32906, 2147483648, 2147516416, 0, 32907, 0, 2147483649, 2147483648, 2147516545, 2147483648, 32777, 0, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 2147483648, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 0, 32778, 2147483648, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 0, 2147483649, 2147483648, 2147516424]);
    var _default = ROUND_CONSTANTS;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/iota/index.js
var require_iota = __commonJS({
  "node_modules/sha3/sponge/permute/iota/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _roundConstants = _interopRequireDefault(require_round_constants());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var iota = function iota2(_ref) {
      var A = _ref.A, roundIndex = _ref.roundIndex;
      var i = roundIndex * 2;
      A[0] ^= _roundConstants["default"][i];
      A[1] ^= _roundConstants["default"][i + 1];
    };
    var _default = iota;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/rho-pi/pi-shuffles/index.js
var require_pi_shuffles = __commonJS({
  "node_modules/sha3/sponge/permute/rho-pi/pi-shuffles/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var PI_SHUFFLES = [10, 7, 11, 17, 18, 3, 5, 16, 8, 21, 24, 4, 15, 23, 19, 13, 12, 2, 20, 14, 22, 9, 6, 1];
    var _default = PI_SHUFFLES;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/rho-pi/rho-offsets/index.js
var require_rho_offsets = __commonJS({
  "node_modules/sha3/sponge/permute/rho-pi/rho-offsets/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var RHO_OFFSETS = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 2, 14, 27, 41, 56, 8, 25, 43, 62, 18, 39, 61, 20, 44];
    var _default = RHO_OFFSETS;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/rho-pi/index.js
var require_rho_pi = __commonJS({
  "node_modules/sha3/sponge/permute/rho-pi/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _piShuffles = _interopRequireDefault(require_pi_shuffles());
    var _rhoOffsets = _interopRequireDefault(require_rho_offsets());
    var _copy = _interopRequireDefault(require_copy());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var rhoPi = function rhoPi2(_ref) {
      var A = _ref.A, C = _ref.C, W = _ref.W;
      (0, _copy["default"])(A, 1)(W, 0);
      var H = 0;
      var L = 0;
      var Wi = 0;
      var ri = 32;
      for (var i = 0; i < 24; i++) {
        var j = _piShuffles["default"][i];
        var r = _rhoOffsets["default"][i];
        (0, _copy["default"])(A, j)(C, 0);
        H = W[0];
        L = W[1];
        ri = 32 - r;
        Wi = r < 32 ? 0 : 1;
        W[Wi] = H << r | L >>> ri;
        W[(Wi + 1) % 2] = L << r | H >>> ri;
        (0, _copy["default"])(W, 0)(A, j);
        (0, _copy["default"])(C, 0)(W, 0);
      }
    };
    var _default = rhoPi;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/theta/index.js
var require_theta = __commonJS({
  "node_modules/sha3/sponge/permute/theta/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _copy = _interopRequireDefault(require_copy());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var theta = function theta2(_ref) {
      var A = _ref.A, C = _ref.C, D = _ref.D, W = _ref.W;
      var H = 0;
      var L = 0;
      for (var x = 0; x < 5; x++) {
        var x20 = x * 2;
        var x21 = (x + 5) * 2;
        var x22 = (x + 10) * 2;
        var x23 = (x + 15) * 2;
        var x24 = (x + 20) * 2;
        C[x20] = A[x20] ^ A[x21] ^ A[x22] ^ A[x23] ^ A[x24];
        C[x20 + 1] = A[x20 + 1] ^ A[x21 + 1] ^ A[x22 + 1] ^ A[x23 + 1] ^ A[x24 + 1];
      }
      for (var _x = 0; _x < 5; _x++) {
        (0, _copy["default"])(C, (_x + 1) % 5)(W, 0);
        H = W[0];
        L = W[1];
        W[0] = H << 1 | L >>> 31;
        W[1] = L << 1 | H >>> 31;
        D[_x * 2] = C[(_x + 4) % 5 * 2] ^ W[0];
        D[_x * 2 + 1] = C[(_x + 4) % 5 * 2 + 1] ^ W[1];
        for (var y = 0; y < 25; y += 5) {
          A[(y + _x) * 2] ^= D[_x * 2];
          A[(y + _x) * 2 + 1] ^= D[_x * 2 + 1];
        }
      }
    };
    var _default = theta;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/permute/index.js
var require_permute = __commonJS({
  "node_modules/sha3/sponge/permute/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _chi = _interopRequireDefault(require_chi());
    var _iota = _interopRequireDefault(require_iota());
    var _rhoPi = _interopRequireDefault(require_rho_pi());
    var _theta = _interopRequireDefault(require_theta());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var permute = function permute2() {
      var C = new Uint32Array(10);
      var D = new Uint32Array(10);
      var W = new Uint32Array(2);
      return function(A) {
        for (var roundIndex = 0; roundIndex < 24; roundIndex++) {
          (0, _theta["default"])({ A, C, D, W });
          (0, _rhoPi["default"])({ A, C, W });
          (0, _chi["default"])({ A, C });
          (0, _iota["default"])({ A, roundIndex });
        }
        C.fill(0);
        D.fill(0);
        W.fill(0);
      };
    };
    var _default = permute;
    exports["default"] = _default;
  }
});

// node_modules/sha3/sponge/index.js
var require_sponge = __commonJS({
  "node_modules/sha3/sponge/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = void 0;
    var _buffer = require_buffer();
    var _permute = _interopRequireDefault(require_permute());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var xorWords = function xorWords2(I, O) {
      for (var i = 0; i < I.length; i += 8) {
        var o = i / 4;
        O[o] ^= I[i + 7] << 24 | I[i + 6] << 16 | I[i + 5] << 8 | I[i + 4];
        O[o + 1] ^= I[i + 3] << 24 | I[i + 2] << 16 | I[i + 1] << 8 | I[i];
      }
      return O;
    };
    var readWords = function readWords2(I, O) {
      for (var o = 0; o < O.length; o += 8) {
        var i = o / 4;
        O[o] = I[i + 1];
        O[o + 1] = I[i + 1] >>> 8;
        O[o + 2] = I[i + 1] >>> 16;
        O[o + 3] = I[i + 1] >>> 24;
        O[o + 4] = I[i];
        O[o + 5] = I[i] >>> 8;
        O[o + 6] = I[i] >>> 16;
        O[o + 7] = I[i] >>> 24;
      }
      return O;
    };
    var Sponge = function Sponge2(_ref) {
      var _this = this;
      var capacity = _ref.capacity, padding = _ref.padding;
      var keccak = (0, _permute["default"])();
      var stateSize = 200;
      var blockSize = capacity / 8;
      var queueSize = stateSize - capacity / 4;
      var queueOffset = 0;
      var state = new Uint32Array(stateSize / 4);
      var queue = _buffer.Buffer.allocUnsafe(queueSize);
      this.absorb = function(buffer) {
        for (var i = 0; i < buffer.length; i++) {
          queue[queueOffset] = buffer[i];
          queueOffset += 1;
          if (queueOffset >= queueSize) {
            xorWords(queue, state);
            keccak(state);
            queueOffset = 0;
          }
        }
        return _this;
      };
      this.squeeze = function() {
        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
        var output = { buffer: options.buffer || _buffer.Buffer.allocUnsafe(blockSize), padding: options.padding || padding, queue: _buffer.Buffer.allocUnsafe(queue.length), state: new Uint32Array(state.length) };
        queue.copy(output.queue);
        for (var i = 0; i < state.length; i++) {
          output.state[i] = state[i];
        }
        output.queue.fill(0, queueOffset);
        output.queue[queueOffset] |= output.padding;
        output.queue[queueSize - 1] |= 128;
        xorWords(output.queue, output.state);
        for (var offset = 0; offset < output.buffer.length; offset += queueSize) {
          keccak(output.state);
          readWords(output.state, output.buffer.slice(offset, offset + queueSize));
        }
        return output.buffer;
      };
      this.reset = function() {
        queue.fill(0);
        state.fill(0);
        queueOffset = 0;
        return _this;
      };
      return this;
    };
    var _default = Sponge;
    exports["default"] = _default;
  }
});

// node_modules/sha3/index.js
var require_sha3 = __commonJS({
  "node_modules/sha3/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports["default"] = exports.SHAKE = exports.SHA3Hash = exports.SHA3 = exports.Keccak = void 0;
    var _buffer = require_buffer();
    var _sponge = _interopRequireDefault(require_sponge());
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var createHash = function createHash2(_ref) {
      var allowedSizes = _ref.allowedSizes, defaultSize = _ref.defaultSize, padding = _ref.padding;
      return function Hash() {
        var _this = this;
        var size = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : defaultSize;
        if (!this || this.constructor !== Hash) {
          return new Hash(size);
        }
        if (allowedSizes && !allowedSizes.includes(size)) {
          throw new Error("Unsupported hash length");
        }
        var sponge = new _sponge["default"]({ capacity: size });
        this.update = function(input) {
          var encoding = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "utf8";
          if (_buffer.Buffer.isBuffer(input)) {
            sponge.absorb(input);
            return _this;
          }
          if (typeof input === "string") {
            return _this.update(_buffer.Buffer.from(input, encoding));
          }
          throw new TypeError("Not a string or buffer");
        };
        this.digest = function() {
          var formatOrOptions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "binary";
          var options = typeof formatOrOptions === "string" ? { format: formatOrOptions } : formatOrOptions;
          var buffer = sponge.squeeze({ buffer: options.buffer, padding: options.padding || padding });
          if (options.format && options.format !== "binary") {
            return buffer.toString(options.format);
          }
          return buffer;
        };
        this.reset = function() {
          sponge.reset();
          return _this;
        };
        return this;
      };
    };
    var Keccak = createHash({ allowedSizes: [224, 256, 384, 512], defaultSize: 512, padding: 1 });
    exports.Keccak = Keccak;
    var SHA3 = createHash({ allowedSizes: [224, 256, 384, 512], defaultSize: 512, padding: 6 });
    exports.SHA3 = SHA3;
    var SHAKE = createHash({ allowedSizes: [128, 256], defaultSize: 256, padding: 31 });
    exports.SHAKE = SHAKE;
    var SHA3Hash = Keccak;
    exports.SHA3Hash = SHA3Hash;
    SHA3.SHA3Hash = SHA3Hash;
    var _default = SHA3;
    exports["default"] = _default;
  }
});

// node_modules/@tharsis/proto/dist/proto/cosmos/tx/signing/v1beta1/signing.js
var require_signing = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/cosmos/tx/signing/v1beta1/signing.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cosmos = void 0;
    var dependency_1 = __importStar(require_multisig());
    var dependency_2 = __importStar(require_any());
    var pb_1 = __importStar(require_google_protobuf());
    var cosmos;
    (function(cosmos2) {
      var tx;
      (function(tx2) {
        var signing;
        (function(signing2) {
          var v1beta1;
          (function(v1beta12) {
            let SignMode;
            (function(SignMode2) {
              SignMode2[SignMode2["SIGN_MODE_UNSPECIFIED"] = 0] = "SIGN_MODE_UNSPECIFIED";
              SignMode2[SignMode2["SIGN_MODE_DIRECT"] = 1] = "SIGN_MODE_DIRECT";
              SignMode2[SignMode2["SIGN_MODE_TEXTUAL"] = 2] = "SIGN_MODE_TEXTUAL";
              SignMode2[SignMode2["SIGN_MODE_LEGACY_AMINO_JSON"] = 127] = "SIGN_MODE_LEGACY_AMINO_JSON";
            })(SignMode = v1beta12.SignMode || (v1beta12.SignMode = {}));
            class SignatureDescriptors extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
                if (!Array.isArray(data) && typeof data == "object") {
                  if ("signatures" in data && data.signatures != void 0) {
                    this.signatures = data.signatures;
                  }
                }
              }
              get signatures() {
                return pb_1.Message.getRepeatedWrapperField(this, SignatureDescriptor, 1);
              }
              set signatures(value) {
                pb_1.Message.setRepeatedWrapperField(this, 1, value);
              }
              static fromObject(data) {
                const message = new SignatureDescriptors({});
                if (data.signatures != null) {
                  message.signatures = data.signatures.map((item) => SignatureDescriptor.fromObject(item));
                }
                return message;
              }
              toObject() {
                const data = {};
                if (this.signatures != null) {
                  data.signatures = this.signatures.map((item) => item.toObject());
                }
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.signatures !== void 0)
                  writer.writeRepeatedMessage(1, this.signatures, (item) => item.serialize(writer));
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignatureDescriptors();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    case 1:
                      reader.readMessage(message.signatures, () => pb_1.Message.addToRepeatedWrapperField(message, 1, SignatureDescriptor.deserialize(reader), SignatureDescriptor));
                      break;
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return SignatureDescriptors.deserialize(bytes);
              }
            }
            v1beta12.SignatureDescriptors = SignatureDescriptors;
            class SignatureDescriptor extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                  if ("public_key" in data && data.public_key != void 0) {
                    this.public_key = data.public_key;
                  }
                  if ("data" in data && data.data != void 0) {
                    this.data = data.data;
                  }
                  if ("sequence" in data && data.sequence != void 0) {
                    this.sequence = data.sequence;
                  }
                }
              }
              get public_key() {
                return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Any, 1);
              }
              set public_key(value) {
                pb_1.Message.setWrapperField(this, 1, value);
              }
              get data() {
                return pb_1.Message.getWrapperField(this, SignatureDescriptor.Data, 2);
              }
              set data(value) {
                pb_1.Message.setWrapperField(this, 2, value);
              }
              get sequence() {
                return pb_1.Message.getField(this, 3);
              }
              set sequence(value) {
                pb_1.Message.setField(this, 3, value);
              }
              static fromObject(data) {
                const message = new SignatureDescriptor({});
                if (data.public_key != null) {
                  message.public_key = dependency_2.google.protobuf.Any.fromObject(data.public_key);
                }
                if (data.data != null) {
                  message.data = SignatureDescriptor.Data.fromObject(data.data);
                }
                if (data.sequence != null) {
                  message.sequence = data.sequence;
                }
                return message;
              }
              toObject() {
                const data = {};
                if (this.public_key != null) {
                  data.public_key = this.public_key.toObject();
                }
                if (this.data != null) {
                  data.data = this.data.toObject();
                }
                if (this.sequence != null) {
                  data.sequence = this.sequence;
                }
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.public_key !== void 0)
                  writer.writeMessage(1, this.public_key, () => this.public_key.serialize(writer));
                if (this.data !== void 0)
                  writer.writeMessage(2, this.data, () => this.data.serialize(writer));
                if (this.sequence !== void 0)
                  writer.writeUint64(3, this.sequence);
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignatureDescriptor();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    case 1:
                      reader.readMessage(message.public_key, () => message.public_key = dependency_2.google.protobuf.Any.deserialize(reader));
                      break;
                    case 2:
                      reader.readMessage(message.data, () => message.data = SignatureDescriptor.Data.deserialize(reader));
                      break;
                    case 3:
                      message.sequence = reader.readUint64();
                      break;
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return SignatureDescriptor.deserialize(bytes);
              }
            }
            v1beta12.SignatureDescriptor = SignatureDescriptor;
            (function(SignatureDescriptor2) {
              class Data extends pb_1.Message {
                constructor(data) {
                  super();
                  pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], [[1, 2]]);
                  if (!Array.isArray(data) && typeof data == "object") {
                    if ("single" in data && data.single != void 0) {
                      this.single = data.single;
                    }
                    if ("multi" in data && data.multi != void 0) {
                      this.multi = data.multi;
                    }
                  }
                }
                get single() {
                  return pb_1.Message.getWrapperField(this, SignatureDescriptor2.Data.Single, 1);
                }
                set single(value) {
                  pb_1.Message.setOneofWrapperField(this, 1, [1, 2], value);
                }
                get multi() {
                  return pb_1.Message.getWrapperField(this, SignatureDescriptor2.Data.Multi, 2);
                }
                set multi(value) {
                  pb_1.Message.setOneofWrapperField(this, 2, [1, 2], value);
                }
                get sum() {
                  const cases = {
                    0: "none",
                    1: "single",
                    2: "multi"
                  };
                  return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
                }
                static fromObject(data) {
                  const message = new Data({});
                  if (data.single != null) {
                    message.single = SignatureDescriptor2.Data.Single.fromObject(data.single);
                  }
                  if (data.multi != null) {
                    message.multi = SignatureDescriptor2.Data.Multi.fromObject(data.multi);
                  }
                  return message;
                }
                toObject() {
                  const data = {};
                  if (this.single != null) {
                    data.single = this.single.toObject();
                  }
                  if (this.multi != null) {
                    data.multi = this.multi.toObject();
                  }
                  return data;
                }
                serialize(w) {
                  const writer = w || new pb_1.BinaryWriter();
                  if (this.single !== void 0)
                    writer.writeMessage(1, this.single, () => this.single.serialize(writer));
                  if (this.multi !== void 0)
                    writer.writeMessage(2, this.multi, () => this.multi.serialize(writer));
                  if (!w)
                    return writer.getResultBuffer();
                }
                static deserialize(bytes) {
                  const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Data();
                  while (reader.nextField()) {
                    if (reader.isEndGroup())
                      break;
                    switch (reader.getFieldNumber()) {
                      case 1:
                        reader.readMessage(message.single, () => message.single = SignatureDescriptor2.Data.Single.deserialize(reader));
                        break;
                      case 2:
                        reader.readMessage(message.multi, () => message.multi = SignatureDescriptor2.Data.Multi.deserialize(reader));
                        break;
                      default:
                        reader.skipField();
                    }
                  }
                  return message;
                }
                serializeBinary() {
                  return this.serialize();
                }
                static deserializeBinary(bytes) {
                  return Data.deserialize(bytes);
                }
              }
              SignatureDescriptor2.Data = Data;
              (function(Data2) {
                class Single extends pb_1.Message {
                  constructor(data) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                    if (!Array.isArray(data) && typeof data == "object") {
                      if ("mode" in data && data.mode != void 0) {
                        this.mode = data.mode;
                      }
                      if ("signature" in data && data.signature != void 0) {
                        this.signature = data.signature;
                      }
                    }
                  }
                  get mode() {
                    return pb_1.Message.getField(this, 1);
                  }
                  set mode(value) {
                    pb_1.Message.setField(this, 1, value);
                  }
                  get signature() {
                    return pb_1.Message.getField(this, 2);
                  }
                  set signature(value) {
                    pb_1.Message.setField(this, 2, value);
                  }
                  static fromObject(data) {
                    const message = new Single({});
                    if (data.mode != null) {
                      message.mode = data.mode;
                    }
                    if (data.signature != null) {
                      message.signature = data.signature;
                    }
                    return message;
                  }
                  toObject() {
                    const data = {};
                    if (this.mode != null) {
                      data.mode = this.mode;
                    }
                    if (this.signature != null) {
                      data.signature = this.signature;
                    }
                    return data;
                  }
                  serialize(w) {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.mode !== void 0)
                      writer.writeEnum(1, this.mode);
                    if (this.signature !== void 0)
                      writer.writeBytes(2, this.signature);
                    if (!w)
                      return writer.getResultBuffer();
                  }
                  static deserialize(bytes) {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Single();
                    while (reader.nextField()) {
                      if (reader.isEndGroup())
                        break;
                      switch (reader.getFieldNumber()) {
                        case 1:
                          message.mode = reader.readEnum();
                          break;
                        case 2:
                          message.signature = reader.readBytes();
                          break;
                        default:
                          reader.skipField();
                      }
                    }
                    return message;
                  }
                  serializeBinary() {
                    return this.serialize();
                  }
                  static deserializeBinary(bytes) {
                    return Single.deserialize(bytes);
                  }
                }
                Data2.Single = Single;
                class Multi extends pb_1.Message {
                  constructor(data) {
                    super();
                    pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], []);
                    if (!Array.isArray(data) && typeof data == "object") {
                      if ("bitarray" in data && data.bitarray != void 0) {
                        this.bitarray = data.bitarray;
                      }
                      if ("signatures" in data && data.signatures != void 0) {
                        this.signatures = data.signatures;
                      }
                    }
                  }
                  get bitarray() {
                    return pb_1.Message.getWrapperField(this, dependency_1.cosmos.crypto.multisig.v1beta1.CompactBitArray, 1);
                  }
                  set bitarray(value) {
                    pb_1.Message.setWrapperField(this, 1, value);
                  }
                  get signatures() {
                    return pb_1.Message.getRepeatedWrapperField(this, SignatureDescriptor2.Data, 2);
                  }
                  set signatures(value) {
                    pb_1.Message.setRepeatedWrapperField(this, 2, value);
                  }
                  static fromObject(data) {
                    const message = new Multi({});
                    if (data.bitarray != null) {
                      message.bitarray = dependency_1.cosmos.crypto.multisig.v1beta1.CompactBitArray.fromObject(data.bitarray);
                    }
                    if (data.signatures != null) {
                      message.signatures = data.signatures.map((item) => SignatureDescriptor2.Data.fromObject(item));
                    }
                    return message;
                  }
                  toObject() {
                    const data = {};
                    if (this.bitarray != null) {
                      data.bitarray = this.bitarray.toObject();
                    }
                    if (this.signatures != null) {
                      data.signatures = this.signatures.map((item) => item.toObject());
                    }
                    return data;
                  }
                  serialize(w) {
                    const writer = w || new pb_1.BinaryWriter();
                    if (this.bitarray !== void 0)
                      writer.writeMessage(1, this.bitarray, () => this.bitarray.serialize(writer));
                    if (this.signatures !== void 0)
                      writer.writeRepeatedMessage(2, this.signatures, (item) => item.serialize(writer));
                    if (!w)
                      return writer.getResultBuffer();
                  }
                  static deserialize(bytes) {
                    const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Multi();
                    while (reader.nextField()) {
                      if (reader.isEndGroup())
                        break;
                      switch (reader.getFieldNumber()) {
                        case 1:
                          reader.readMessage(message.bitarray, () => message.bitarray = dependency_1.cosmos.crypto.multisig.v1beta1.CompactBitArray.deserialize(reader));
                          break;
                        case 2:
                          reader.readMessage(message.signatures, () => pb_1.Message.addToRepeatedWrapperField(message, 2, SignatureDescriptor2.Data.deserialize(reader), SignatureDescriptor2.Data));
                          break;
                        default:
                          reader.skipField();
                      }
                    }
                    return message;
                  }
                  serializeBinary() {
                    return this.serialize();
                  }
                  static deserializeBinary(bytes) {
                    return Multi.deserialize(bytes);
                  }
                }
                Data2.Multi = Multi;
              })(Data = SignatureDescriptor2.Data || (SignatureDescriptor2.Data = {}));
            })(SignatureDescriptor = v1beta12.SignatureDescriptor || (v1beta12.SignatureDescriptor = {}));
          })(v1beta1 = signing2.v1beta1 || (signing2.v1beta1 = {}));
        })(signing = tx2.signing || (tx2.signing = {}));
      })(tx = cosmos2.tx || (cosmos2.tx = {}));
    })(cosmos = exports.cosmos || (exports.cosmos = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/ethermint/crypto/v1/ethsecp256k1/keys.js
var require_keys2 = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/ethermint/crypto/v1/ethsecp256k1/keys.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ethermint = void 0;
    var pb_1 = __importStar(require_google_protobuf());
    var ethermint;
    (function(ethermint2) {
      var crypto;
      (function(crypto2) {
        var v1;
        (function(v12) {
          var ethsecp256k1;
          (function(ethsecp256k12) {
            class PubKey extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                  if ("key" in data && data.key != void 0) {
                    this.key = data.key;
                  }
                }
              }
              get key() {
                return pb_1.Message.getField(this, 1);
              }
              set key(value) {
                pb_1.Message.setField(this, 1, value);
              }
              static fromObject(data) {
                const message = new PubKey({});
                if (data.key != null) {
                  message.key = data.key;
                }
                return message;
              }
              toObject() {
                const data = {};
                if (this.key != null) {
                  data.key = this.key;
                }
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.key !== void 0)
                  writer.writeBytes(1, this.key);
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PubKey();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    case 1:
                      message.key = reader.readBytes();
                      break;
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return PubKey.deserialize(bytes);
              }
            }
            ethsecp256k12.PubKey = PubKey;
            class PrivKey extends pb_1.Message {
              constructor(data) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
                if (!Array.isArray(data) && typeof data == "object") {
                  if ("key" in data && data.key != void 0) {
                    this.key = data.key;
                  }
                }
              }
              get key() {
                return pb_1.Message.getField(this, 1);
              }
              set key(value) {
                pb_1.Message.setField(this, 1, value);
              }
              static fromObject(data) {
                const message = new PrivKey({});
                if (data.key != null) {
                  message.key = data.key;
                }
                return message;
              }
              toObject() {
                const data = {};
                if (this.key != null) {
                  data.key = this.key;
                }
                return data;
              }
              serialize(w) {
                const writer = w || new pb_1.BinaryWriter();
                if (this.key !== void 0)
                  writer.writeBytes(1, this.key);
                if (!w)
                  return writer.getResultBuffer();
              }
              static deserialize(bytes) {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrivKey();
                while (reader.nextField()) {
                  if (reader.isEndGroup())
                    break;
                  switch (reader.getFieldNumber()) {
                    case 1:
                      message.key = reader.readBytes();
                      break;
                    default:
                      reader.skipField();
                  }
                }
                return message;
              }
              serializeBinary() {
                return this.serialize();
              }
              static deserializeBinary(bytes) {
                return PrivKey.deserialize(bytes);
              }
            }
            ethsecp256k12.PrivKey = PrivKey;
          })(ethsecp256k1 = v12.ethsecp256k1 || (v12.ethsecp256k1 = {}));
        })(v1 = crypto2.v1 || (crypto2.v1 = {}));
      })(crypto = ethermint2.crypto || (ethermint2.crypto = {}));
    })(ethermint = exports.ethermint || (exports.ethermint = {}));
  }
});

// node_modules/@tharsis/proto/dist/proto/cosmos/crypto/secp256k1/keys.js
var require_keys3 = __commonJS({
  "node_modules/@tharsis/proto/dist/proto/cosmos/crypto/secp256k1/keys.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.cosmos = void 0;
    var pb_1 = __importStar(require_google_protobuf());
    var cosmos;
    (function(cosmos2) {
      var crypto;
      (function(crypto2) {
        var secp256k1;
        (function(secp256k12) {
          class PubKey extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != void 0) {
                  this.key = data.key;
                }
              }
            }
            get key() {
              return pb_1.Message.getField(this, 1);
            }
            set key(value) {
              pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data) {
              const message = new PubKey({});
              if (data.key != null) {
                message.key = data.key;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.key != null) {
                data.key = this.key;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.key !== void 0)
                writer.writeBytes(1, this.key);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PubKey();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.key = reader.readBytes();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return PubKey.deserialize(bytes);
            }
          }
          secp256k12.PubKey = PubKey;
          class PrivKey extends pb_1.Message {
            constructor(data) {
              super();
              pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
              if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != void 0) {
                  this.key = data.key;
                }
              }
            }
            get key() {
              return pb_1.Message.getField(this, 1);
            }
            set key(value) {
              pb_1.Message.setField(this, 1, value);
            }
            static fromObject(data) {
              const message = new PrivKey({});
              if (data.key != null) {
                message.key = data.key;
              }
              return message;
            }
            toObject() {
              const data = {};
              if (this.key != null) {
                data.key = this.key;
              }
              return data;
            }
            serialize(w) {
              const writer = w || new pb_1.BinaryWriter();
              if (this.key !== void 0)
                writer.writeBytes(1, this.key);
              if (!w)
                return writer.getResultBuffer();
            }
            static deserialize(bytes) {
              const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PrivKey();
              while (reader.nextField()) {
                if (reader.isEndGroup())
                  break;
                switch (reader.getFieldNumber()) {
                  case 1:
                    message.key = reader.readBytes();
                    break;
                  default:
                    reader.skipField();
                }
              }
              return message;
            }
            serializeBinary() {
              return this.serialize();
            }
            static deserializeBinary(bytes) {
              return PrivKey.deserialize(bytes);
            }
          }
          secp256k12.PrivKey = PrivKey;
        })(secp256k1 = crypto2.secp256k1 || (crypto2.secp256k1 = {}));
      })(crypto = cosmos2.crypto || (cosmos2.crypto = {}));
    })(cosmos = exports.cosmos || (exports.cosmos = {}));
  }
});

// node_modules/@tharsis/proto/dist/transaction/transaction.js
var require_transaction = __commonJS({
  "node_modules/@tharsis/proto/dist/transaction/transaction.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTransaction = exports.createTransactionWithMultipleMessages = exports.createSigDoc = exports.createAuthInfo = exports.createSignerInfo = exports.createFee = exports.createBody = exports.createBodyWithMultipleMessages = exports.protoTxNamespace = exports.LEGACY_AMINO = exports.SIGN_DIRECT = void 0;
    var sha3_1 = require_sha3();
    var tx = __importStar(require_tx7());
    var signing = __importStar(require_signing());
    var coin = __importStar(require_coin());
    var eth = __importStar(require_keys2());
    var secp = __importStar(require_keys3());
    var utils_1 = require_utils();
    exports.SIGN_DIRECT = signing.cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_DIRECT;
    exports.LEGACY_AMINO = signing.cosmos.tx.signing.v1beta1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;
    var protoTxNamespace;
    (function(protoTxNamespace2) {
      protoTxNamespace2.txn = tx.cosmos.tx.v1beta1;
    })(protoTxNamespace = exports.protoTxNamespace || (exports.protoTxNamespace = {}));
    function createBodyWithMultipleMessages(messages, memo) {
      const content = [];
      messages.forEach((message) => {
        content.push((0, utils_1.createAnyMessage)(message));
      });
      return new tx.cosmos.tx.v1beta1.TxBody({
        messages: content,
        memo
      });
    }
    exports.createBodyWithMultipleMessages = createBodyWithMultipleMessages;
    function createBody(message, memo) {
      return createBodyWithMultipleMessages([message], memo);
    }
    exports.createBody = createBody;
    function createFee(fee, denom, gasLimit) {
      return new tx.cosmos.tx.v1beta1.Fee({
        amount: [
          new coin.cosmos.base.v1beta1.Coin({
            denom,
            amount: fee
          })
        ],
        gas_limit: gasLimit
      });
    }
    exports.createFee = createFee;
    function createSignerInfo(algo, publicKey, sequence, mode) {
      let pubkey;
      if (algo === "secp256k1") {
        pubkey = {
          message: new secp.cosmos.crypto.secp256k1.PubKey({
            key: publicKey
          }),
          path: "cosmos.crypto.secp256k1.PubKey"
        };
      } else {
        pubkey = {
          message: new eth.ethermint.crypto.v1.ethsecp256k1.PubKey({
            key: publicKey
          }),
          path: "ethermint.crypto.v1.ethsecp256k1.PubKey"
        };
      }
      const signerInfo = new tx.cosmos.tx.v1beta1.SignerInfo({
        public_key: (0, utils_1.createAnyMessage)(pubkey),
        mode_info: new tx.cosmos.tx.v1beta1.ModeInfo({
          single: new tx.cosmos.tx.v1beta1.ModeInfo.Single({
            mode
          })
        }),
        sequence
      });
      return signerInfo;
    }
    exports.createSignerInfo = createSignerInfo;
    function createAuthInfo(signerInfo, fee) {
      return new tx.cosmos.tx.v1beta1.AuthInfo({
        signer_infos: [signerInfo],
        fee
      });
    }
    exports.createAuthInfo = createAuthInfo;
    function createSigDoc(bodyBytes, authInfoBytes, chainId, accountNumber) {
      return new tx.cosmos.tx.v1beta1.SignDoc({
        body_bytes: bodyBytes,
        auth_info_bytes: authInfoBytes,
        chain_id: chainId,
        account_number: accountNumber
      });
    }
    exports.createSigDoc = createSigDoc;
    function createTransactionWithMultipleMessages(messages, memo, fee, denom, gasLimit, algo, pubKey, sequence, accountNumber, chainId) {
      const body = createBodyWithMultipleMessages(messages, memo);
      const feeMessage = createFee(fee, denom, gasLimit);
      const pubKeyDecoded = Buffer.from(pubKey, "base64");
      const signInfoAmino = createSignerInfo(algo, new Uint8Array(pubKeyDecoded), sequence, exports.LEGACY_AMINO);
      const authInfoAmino = createAuthInfo(signInfoAmino, feeMessage);
      const signDocAmino = createSigDoc(body.serializeBinary(), authInfoAmino.serializeBinary(), chainId, accountNumber);
      const hashAmino = new sha3_1.Keccak(256);
      hashAmino.update(Buffer.from(signDocAmino.serializeBinary()));
      const toSignAmino = hashAmino.digest("binary");
      const signInfoDirect = createSignerInfo(algo, new Uint8Array(pubKeyDecoded), sequence, exports.SIGN_DIRECT);
      const authInfoDirect = createAuthInfo(signInfoDirect, feeMessage);
      const signDocDirect = createSigDoc(body.serializeBinary(), authInfoDirect.serializeBinary(), chainId, accountNumber);
      const hashDirect = new sha3_1.Keccak(256);
      hashDirect.update(Buffer.from(signDocDirect.serializeBinary()));
      const toSignDirect = hashDirect.digest("binary");
      return {
        legacyAmino: {
          body,
          authInfo: authInfoAmino,
          signBytes: toSignAmino.toString("base64")
        },
        signDirect: {
          body,
          authInfo: authInfoDirect,
          signBytes: toSignDirect.toString("base64")
        }
      };
    }
    exports.createTransactionWithMultipleMessages = createTransactionWithMultipleMessages;
    function createTransaction(message, memo, fee, denom, gasLimit, algo, pubKey, sequence, accountNumber, chainId) {
      return createTransactionWithMultipleMessages([message], memo, fee, denom, gasLimit, algo, pubKey, sequence, accountNumber, chainId);
    }
    exports.createTransaction = createTransaction;
  }
});

// node_modules/@tharsis/proto/dist/index.js
var require_dist = __commonJS({
  "node_modules/@tharsis/proto/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_msgConvertCoin(), exports);
    __exportStar(require_msgConvertERC20(), exports);
    __exportStar(require_ibcMsgTransfer(), exports);
    __exportStar(require_msgEthereumTx(), exports);
    __exportStar(require_msgSend(), exports);
    __exportStar(require_staking2(), exports);
    __exportStar(require_txRaw(), exports);
    __exportStar(require_utils(), exports);
    __exportStar(require_validator2(), exports);
    __exportStar(require_vote(), exports);
    __exportStar(require_web3Extension(), exports);
    __exportStar(require_transaction(), exports);
  }
});

export {
  require_dist
};
//# sourceMappingURL=chunk-SWQC3LOQ.js.map
