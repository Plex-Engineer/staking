import {
  require_prop_types
} from "./chunk-XMJUKMNP.js";
import "./chunk-ARSMAAK5.js";
import {
  clsx_m_default,
  init_clsx_m
} from "./chunk-Y5DX3XXA.js";
import {
  require_react
} from "./chunk-FKHXVQ5A.js";
import {
  __toESM
} from "./chunk-ACCAMVX6.js";

// node_modules/react-tabs/esm/components/Tabs.js
var import_prop_types2 = __toESM(require_prop_types());
var import_react3 = __toESM(require_react());

// node_modules/react-tabs/esm/helpers/childrenDeepMap.js
var import_react = __toESM(require_react());

// node_modules/react-tabs/esm/helpers/elementTypes.js
function makeTypeChecker(tabsRole) {
  return function(element) {
    return !!element.type && element.type.tabsRole === tabsRole;
  };
}
var isTab = makeTypeChecker("Tab");
var isTabList = makeTypeChecker("TabList");
var isTabPanel = makeTypeChecker("TabPanel");

// node_modules/react-tabs/esm/helpers/childrenDeepMap.js
function isTabChild(child) {
  return isTab(child) || isTabList(child) || isTabPanel(child);
}
function deepMap(children, callback) {
  return import_react.Children.map(children, function(child) {
    if (child === null)
      return null;
    if (isTabChild(child)) {
      return callback(child);
    }
    if (child.props && child.props.children && typeof child.props.children === "object") {
      return (0, import_react.cloneElement)(child, Object.assign({}, child.props, { children: deepMap(child.props.children, callback) }));
    }
    return child;
  });
}
function deepForEach(children, callback) {
  return import_react.Children.forEach(children, function(child) {
    if (child === null)
      return;
    if (isTab(child) || isTabPanel(child)) {
      callback(child);
    } else if (child.props && child.props.children && typeof child.props.children === "object") {
      if (isTabList(child))
        callback(child);
      deepForEach(child.props.children, callback);
    }
  });
}

// node_modules/react-tabs/esm/helpers/propTypes.js
function childrenPropType(props, propName, componentName) {
  var error;
  var tabsCount = 0;
  var panelsCount = 0;
  var tabListFound = false;
  var listTabs = [];
  var children = props[propName];
  deepForEach(children, function(child) {
    if (isTabList(child)) {
      if (child.props && child.props.children && typeof child.props.children === "object") {
        deepForEach(child.props.children, function(listChild) {
          return listTabs.push(listChild);
        });
      }
      if (tabListFound) {
        error = new Error("Found multiple 'TabList' components inside 'Tabs'. Only one is allowed.");
      }
      tabListFound = true;
    }
    if (isTab(child)) {
      if (!tabListFound || listTabs.indexOf(child) === -1) {
        error = new Error("Found a 'Tab' component outside of the 'TabList' component. 'Tab' components have to be inside the 'TabList' component.");
      }
      tabsCount++;
    } else if (isTabPanel(child)) {
      panelsCount++;
    }
  });
  if (!error && tabsCount !== panelsCount) {
    error = new Error("There should be an equal number of 'Tab' and 'TabPanel' in `" + componentName + "`. " + ("Received " + tabsCount + " 'Tab' and " + panelsCount + " 'TabPanel'."));
  }
  return error;
}
function onSelectPropType(props, propName, componentName, location, propFullName) {
  var prop = props[propName];
  var name = propFullName || propName;
  var error = null;
  if (prop && typeof prop !== "function") {
    error = new Error("Invalid " + location + " `" + name + "` of type `" + typeof prop + "` supplied " + ("to `" + componentName + "`, expected `function`."));
  } else if (props.selectedIndex != null && prop == null) {
    error = new Error("The " + location + " `" + name + "` is marked as required in `" + componentName + "`, but its value is `undefined` or `null`.\n`onSelect` is required when `selectedIndex` is also set. Not doing so will make the tabs not do anything, as `selectedIndex` indicates that you want to handle the selected tab yourself.\nIf you only want to set the inital tab replace `selectedIndex` with `defaultIndex`.");
  }
  return error;
}
function selectedIndexPropType(props, propName, componentName, location, propFullName) {
  var prop = props[propName];
  var name = propFullName || propName;
  var error = null;
  if (prop != null && typeof prop !== "number") {
    error = new Error("Invalid " + location + " `" + name + "` of type `" + typeof prop + "` supplied to " + ("`" + componentName + "`, expected `number`."));
  } else if (props.defaultIndex != null && prop != null) {
    return new Error("The " + location + " `" + name + "` cannot be used together with `defaultIndex` " + ("in `" + componentName + "`.\n") + ("Either remove `" + name + "` to let `" + componentName + "` handle the selected ") + "tab internally or remove `defaultIndex` to handle it yourself.");
  }
  return error;
}

// node_modules/react-tabs/esm/components/UncontrolledTabs.js
var import_prop_types = __toESM(require_prop_types());
var import_react2 = __toESM(require_react());
init_clsx_m();

// node_modules/react-tabs/esm/helpers/count.js
function getTabsCount(children) {
  var tabCount = 0;
  deepForEach(children, function(child) {
    if (isTab(child))
      tabCount++;
  });
  return tabCount;
}

// node_modules/react-tabs/esm/components/UncontrolledTabs.js
var _excluded = ["children", "className", "disabledTabClassName", "domRef", "focus", "forceRenderTabPanel", "onSelect", "selectedIndex", "selectedTabClassName", "selectedTabPanelClassName", "environment", "disableUpDownKeys"];
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function isNode(node) {
  return node && "getAttribute" in node;
}
function isTabNode(node) {
  return isNode(node) && node.getAttribute("data-rttab");
}
function isTabDisabled(node) {
  return isNode(node) && node.getAttribute("aria-disabled") === "true";
}
var canUseActiveElement;
function determineCanUseActiveElement(environment) {
  var env = environment || (typeof window !== "undefined" ? window : void 0);
  try {
    canUseActiveElement = !!(typeof env !== "undefined" && env.document && env.document.activeElement);
  } catch (e) {
    canUseActiveElement = false;
  }
}
var defaultProps = { className: "react-tabs", focus: false };
var propTypes = true ? { children: childrenPropType, direction: import_prop_types.default.oneOf(["rtl", "ltr"]), className: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.array, import_prop_types.default.object]), disabledTabClassName: import_prop_types.default.string, disableUpDownKeys: import_prop_types.default.bool, domRef: import_prop_types.default.func, focus: import_prop_types.default.bool, forceRenderTabPanel: import_prop_types.default.bool, onSelect: import_prop_types.default.func.isRequired, selectedIndex: import_prop_types.default.number.isRequired, selectedTabClassName: import_prop_types.default.string, selectedTabPanelClassName: import_prop_types.default.string, environment: import_prop_types.default.object } : {};
var UncontrolledTabs = function UncontrolledTabs2(props) {
  var tabNodes = (0, import_react2.useRef)([]);
  var tabIds = (0, import_react2.useRef)([]);
  var _ref = (0, import_react2.useRef)();
  function setSelected(index, event) {
    if (index < 0 || index >= getTabsCount2())
      return;
    var onSelect2 = props.onSelect, selectedIndex2 = props.selectedIndex;
    onSelect2(index, selectedIndex2, event);
  }
  function getNextTab(index) {
    var count = getTabsCount2();
    for (var i = index + 1; i < count; i++) {
      if (!isTabDisabled(getTab(i))) {
        return i;
      }
    }
    for (var _i = 0; _i < index; _i++) {
      if (!isTabDisabled(getTab(_i))) {
        return _i;
      }
    }
    return index;
  }
  function getPrevTab(index) {
    var i = index;
    while (i--) {
      if (!isTabDisabled(getTab(i))) {
        return i;
      }
    }
    i = getTabsCount2();
    while (i-- > index) {
      if (!isTabDisabled(getTab(i))) {
        return i;
      }
    }
    return index;
  }
  function getFirstTab() {
    var count = getTabsCount2();
    for (var i = 0; i < count; i++) {
      if (!isTabDisabled(getTab(i))) {
        return i;
      }
    }
    return null;
  }
  function getLastTab() {
    var i = getTabsCount2();
    while (i--) {
      if (!isTabDisabled(getTab(i))) {
        return i;
      }
    }
    return null;
  }
  function getTabsCount2() {
    var children2 = props.children;
    return getTabsCount(children2);
  }
  function getTab(index) {
    return tabNodes.current["tabs-" + index];
  }
  function getChildren() {
    var index = 0;
    var children2 = props.children, disabledTabClassName2 = props.disabledTabClassName, focus2 = props.focus, forceRenderTabPanel2 = props.forceRenderTabPanel, selectedIndex2 = props.selectedIndex, selectedTabClassName2 = props.selectedTabClassName, selectedTabPanelClassName2 = props.selectedTabPanelClassName, environment2 = props.environment;
    tabIds.current = tabIds.current || [];
    var diff = tabIds.current.length - getTabsCount2();
    var id = (0, import_react2.useId)();
    while (diff++ < 0) {
      tabIds.current.push("" + id + tabIds.current.length);
    }
    return deepMap(children2, function(child) {
      var result = child;
      if (isTabList(child)) {
        var listIndex = 0;
        var wasTabFocused = false;
        if (canUseActiveElement == null) {
          determineCanUseActiveElement(environment2);
        }
        var env = environment2 || (typeof window !== "undefined" ? window : void 0);
        if (canUseActiveElement && env) {
          wasTabFocused = import_react2.default.Children.toArray(child.props.children).filter(isTab).some(function(tab, i) {
            return env.document.activeElement === getTab(i);
          });
        }
        result = (0, import_react2.cloneElement)(child, { children: deepMap(child.props.children, function(tab) {
          var key = "tabs-" + listIndex;
          var selected = selectedIndex2 === listIndex;
          var props2 = { tabRef: function tabRef(node) {
            tabNodes.current[key] = node;
          }, id: tabIds.current[listIndex], selected, focus: selected && (focus2 || wasTabFocused) };
          if (selectedTabClassName2)
            props2.selectedClassName = selectedTabClassName2;
          if (disabledTabClassName2)
            props2.disabledClassName = disabledTabClassName2;
          listIndex++;
          return (0, import_react2.cloneElement)(tab, props2);
        }) });
      } else if (isTabPanel(child)) {
        var _props = { id: tabIds.current[index], selected: selectedIndex2 === index };
        if (forceRenderTabPanel2)
          _props.forceRender = forceRenderTabPanel2;
        if (selectedTabPanelClassName2)
          _props.selectedClassName = selectedTabPanelClassName2;
        index++;
        result = (0, import_react2.cloneElement)(child, _props);
      }
      return result;
    });
  }
  function handleKeyDown(e) {
    var direction = props.direction, disableUpDownKeys2 = props.disableUpDownKeys;
    if (isTabFromContainer(e.target)) {
      var index = props.selectedIndex;
      var preventDefault = false;
      var useSelectedIndex = false;
      if (e.code === "Space" || e.keyCode === 32 || e.code === "Enter" || e.keyCode === 13) {
        preventDefault = true;
        useSelectedIndex = false;
        handleClick(e);
      }
      if (e.code === "ArrowLeft" || e.keyCode === 37 || !disableUpDownKeys2 && (e.keyCode === 38 || e.code === "ArrowUp")) {
        if (direction === "rtl") {
          index = getNextTab(index);
        } else {
          index = getPrevTab(index);
        }
        preventDefault = true;
        useSelectedIndex = true;
      } else if (e.code === "ArrowRight" || e.keyCode === 39 || !disableUpDownKeys2 && (e.keyCode === 40 || e.code === "ArrowDown")) {
        if (direction === "rtl") {
          index = getPrevTab(index);
        } else {
          index = getNextTab(index);
        }
        preventDefault = true;
        useSelectedIndex = true;
      } else if (e.keyCode === 35 || e.code === "End") {
        index = getLastTab();
        preventDefault = true;
        useSelectedIndex = true;
      } else if (e.keyCode === 36 || e.code === "Home") {
        index = getFirstTab();
        preventDefault = true;
        useSelectedIndex = true;
      }
      if (preventDefault) {
        e.preventDefault();
      }
      if (useSelectedIndex) {
        setSelected(index, e);
      }
    }
  }
  function handleClick(e) {
    var node = e.target;
    do {
      if (isTabFromContainer(node)) {
        if (isTabDisabled(node)) {
          return;
        }
        var index = [].slice.call(node.parentNode.children).filter(isTabNode).indexOf(node);
        setSelected(index, e);
        return;
      }
    } while ((node = node.parentNode) != null);
  }
  function isTabFromContainer(node) {
    if (!isTabNode(node)) {
      return false;
    }
    var nodeAncestor = node.parentElement;
    do {
      if (nodeAncestor === _ref.current)
        return true;
      if (nodeAncestor.getAttribute("data-rttabs"))
        break;
      nodeAncestor = nodeAncestor.parentElement;
    } while (nodeAncestor);
    return false;
  }
  var children = props.children, className = props.className, disabledTabClassName = props.disabledTabClassName, domRef = props.domRef, focus = props.focus, forceRenderTabPanel = props.forceRenderTabPanel, onSelect = props.onSelect, selectedIndex = props.selectedIndex, selectedTabClassName = props.selectedTabClassName, selectedTabPanelClassName = props.selectedTabPanelClassName, environment = props.environment, disableUpDownKeys = props.disableUpDownKeys, attributes = _objectWithoutPropertiesLoose(props, _excluded);
  return import_react2.default.createElement("div", Object.assign({}, attributes, { className: clsx_m_default(className), onClick: handleClick, onKeyDown: handleKeyDown, ref: function ref(node) {
    _ref.current = node;
    if (domRef)
      domRef(node);
  }, "data-rttabs": true }), getChildren());
};
UncontrolledTabs.defaultProps = defaultProps;
UncontrolledTabs.propTypes = true ? propTypes : {};
var UncontrolledTabs_default = UncontrolledTabs;

// node_modules/react-tabs/esm/components/Tabs.js
var MODE_CONTROLLED = 0;
var MODE_UNCONTROLLED = 1;
var propTypes2 = true ? { children: childrenPropType, className: import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.array, import_prop_types2.default.object]), defaultFocus: import_prop_types2.default.bool, defaultIndex: import_prop_types2.default.number, direction: import_prop_types2.default.oneOf(["rtl", "ltr"]), disabledTabClassName: import_prop_types2.default.string, disableUpDownKeys: import_prop_types2.default.bool, domRef: import_prop_types2.default.func, environment: import_prop_types2.default.object, focusTabOnClick: import_prop_types2.default.bool, forceRenderTabPanel: import_prop_types2.default.bool, onSelect: onSelectPropType, selectedIndex: selectedIndexPropType, selectedTabClassName: import_prop_types2.default.string, selectedTabPanelClassName: import_prop_types2.default.string } : {};
var defaultProps2 = { defaultFocus: false, focusTabOnClick: true, forceRenderTabPanel: false, selectedIndex: null, defaultIndex: null, environment: null, disableUpDownKeys: false };
var getModeFromProps = function getModeFromProps2(props) {
  return props.selectedIndex === null ? MODE_UNCONTROLLED : MODE_CONTROLLED;
};
var checkForIllegalModeChange = function checkForIllegalModeChange2(props, mode) {
  if (mode != void 0 && mode !== getModeFromProps(props)) {
    throw new Error("Switching between controlled mode (by using `selectedIndex`) and uncontrolled mode is not supported in `Tabs`.\nFor more information about controlled and uncontrolled mode of react-tabs see https://github.com/reactjs/react-tabs#controlled-vs-uncontrolled-mode.");
  }
};
var Tabs = function Tabs2(props) {
  var children = props.children, defaultFocus = props.defaultFocus, defaultIndex = props.defaultIndex, focusTabOnClick = props.focusTabOnClick, onSelect = props.onSelect;
  var _useState = (0, import_react3.useState)(defaultFocus), focus = _useState[0], setFocus = _useState[1];
  var _useState2 = (0, import_react3.useState)(getModeFromProps(props)), mode = _useState2[0];
  var _useState3 = (0, import_react3.useState)(mode === MODE_UNCONTROLLED ? defaultIndex || 0 : null), selectedIndex = _useState3[0], setSelectedIndex = _useState3[1];
  (0, import_react3.useEffect)(function() {
    setFocus(false);
  }, []);
  if (mode === MODE_UNCONTROLLED) {
    var tabsCount = getTabsCount(children);
    (0, import_react3.useEffect)(function() {
      if (selectedIndex != null) {
        var maxTabIndex = Math.max(0, tabsCount - 1);
        setSelectedIndex(Math.min(selectedIndex, maxTabIndex));
      }
    }, [tabsCount]);
  }
  checkForIllegalModeChange(props, mode);
  var handleSelected = function handleSelected2(index, last, event) {
    if (typeof onSelect === "function") {
      if (onSelect(index, last, event) === false)
        return;
    }
    if (focusTabOnClick) {
      setFocus(true);
    }
    if (mode === MODE_UNCONTROLLED) {
      setSelectedIndex(index);
    }
  };
  var subProps = Object.assign({}, props);
  subProps.focus = focus;
  subProps.onSelect = handleSelected;
  if (selectedIndex != null) {
    subProps.selectedIndex = selectedIndex;
  }
  delete subProps.defaultFocus;
  delete subProps.defaultIndex;
  delete subProps.focusTabOnClick;
  return import_react3.default.createElement(UncontrolledTabs_default, subProps, children);
};
Tabs.propTypes = true ? propTypes2 : {};
Tabs.defaultProps = defaultProps2;
Tabs.tabsRole = "Tabs";
var Tabs_default = Tabs;

// node_modules/react-tabs/esm/components/TabList.js
var import_prop_types3 = __toESM(require_prop_types());
var import_react4 = __toESM(require_react());
init_clsx_m();
var _excluded2 = ["children", "className"];
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var defaultProps3 = { className: "react-tabs__tab-list" };
var propTypes3 = true ? { children: import_prop_types3.default.oneOfType([import_prop_types3.default.object, import_prop_types3.default.array]), className: import_prop_types3.default.oneOfType([import_prop_types3.default.string, import_prop_types3.default.array, import_prop_types3.default.object]) } : {};
var TabList = function TabList2(props) {
  var children = props.children, className = props.className, attributes = _objectWithoutPropertiesLoose2(props, _excluded2);
  return import_react4.default.createElement("ul", Object.assign({}, attributes, { className: clsx_m_default(className), role: "tablist" }), children);
};
TabList.tabsRole = "TabList";
TabList.propTypes = true ? propTypes3 : {};
TabList.defaultProps = defaultProps3;
var TabList_default = TabList;

// node_modules/react-tabs/esm/components/Tab.js
var import_prop_types4 = __toESM(require_prop_types());
var import_react5 = __toESM(require_react());
init_clsx_m();
var _excluded3 = ["children", "className", "disabled", "disabledClassName", "focus", "id", "selected", "selectedClassName", "tabIndex", "tabRef"];
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var DEFAULT_CLASS = "react-tabs__tab";
var defaultProps4 = { className: DEFAULT_CLASS, disabledClassName: DEFAULT_CLASS + "--disabled", focus: false, id: null, selected: false, selectedClassName: DEFAULT_CLASS + "--selected" };
var propTypes4 = true ? { children: import_prop_types4.default.oneOfType([import_prop_types4.default.array, import_prop_types4.default.object, import_prop_types4.default.string]), className: import_prop_types4.default.oneOfType([import_prop_types4.default.string, import_prop_types4.default.array, import_prop_types4.default.object]), disabled: import_prop_types4.default.bool, disabledClassName: import_prop_types4.default.string, focus: import_prop_types4.default.bool, id: import_prop_types4.default.string, selected: import_prop_types4.default.bool, selectedClassName: import_prop_types4.default.string, tabIndex: import_prop_types4.default.string, tabRef: import_prop_types4.default.func } : {};
var Tab = function Tab2(props) {
  var _cx;
  var nodeRef = (0, import_react5.useRef)();
  var children = props.children, className = props.className, disabled = props.disabled, disabledClassName = props.disabledClassName, focus = props.focus, id = props.id, selected = props.selected, selectedClassName = props.selectedClassName, tabIndex = props.tabIndex, tabRef = props.tabRef, attributes = _objectWithoutPropertiesLoose3(props, _excluded3);
  (0, import_react5.useEffect)(function() {
    if (selected && focus) {
      nodeRef.current.focus();
    }
  }, [selected, focus]);
  return import_react5.default.createElement("li", Object.assign({}, attributes, { className: clsx_m_default(className, (_cx = {}, _cx[selectedClassName] = selected, _cx[disabledClassName] = disabled, _cx)), ref: function ref(node) {
    nodeRef.current = node;
    if (tabRef)
      tabRef(node);
  }, role: "tab", id: "tab" + id, "aria-selected": selected ? "true" : "false", "aria-disabled": disabled ? "true" : "false", "aria-controls": "panel" + id, tabIndex: tabIndex || (selected ? "0" : null), "data-rttab": true }), children);
};
Tab.propTypes = true ? propTypes4 : {};
Tab.tabsRole = "Tab";
Tab.defaultProps = defaultProps4;
var Tab_default = Tab;

// node_modules/react-tabs/esm/components/TabPanel.js
var import_prop_types5 = __toESM(require_prop_types());
var import_react6 = __toESM(require_react());
init_clsx_m();
var _excluded4 = ["children", "className", "forceRender", "id", "selected", "selectedClassName"];
function _objectWithoutPropertiesLoose4(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var DEFAULT_CLASS2 = "react-tabs__tab-panel";
var defaultProps5 = { className: DEFAULT_CLASS2, forceRender: false, selectedClassName: DEFAULT_CLASS2 + "--selected" };
var propTypes5 = true ? { children: import_prop_types5.default.node, className: import_prop_types5.default.oneOfType([import_prop_types5.default.string, import_prop_types5.default.array, import_prop_types5.default.object]), forceRender: import_prop_types5.default.bool, id: import_prop_types5.default.string, selected: import_prop_types5.default.bool, selectedClassName: import_prop_types5.default.string } : {};
var TabPanel = function TabPanel2(props) {
  var _cx;
  var children = props.children, className = props.className, forceRender = props.forceRender, id = props.id, selected = props.selected, selectedClassName = props.selectedClassName, attributes = _objectWithoutPropertiesLoose4(props, _excluded4);
  return import_react6.default.createElement("div", Object.assign({}, attributes, { className: clsx_m_default(className, (_cx = {}, _cx[selectedClassName] = selected, _cx)), role: "tabpanel", id: "panel" + id, "aria-labelledby": "tab" + id }), forceRender || selected ? children : null);
};
TabPanel.tabsRole = "TabPanel";
TabPanel.propTypes = true ? propTypes5 : {};
TabPanel.defaultProps = defaultProps5;
var TabPanel_default = TabPanel;
export {
  Tab_default as Tab,
  TabList_default as TabList,
  TabPanel_default as TabPanel,
  Tabs_default as Tabs
};
//# sourceMappingURL=react-tabs.js.map
