import {
  require_utils
} from "./chunk-U4ZY2CRD.js";
import {
  require_jsx_runtime
} from "./chunk-63CX5SGA.js";
import {
  require_react
} from "./chunk-FKHXVQ5A.js";
import {
  Contract,
  ContractFactory,
  ethers_exports,
  lib_exports,
  utils_exports
} from "./chunk-IJB7JPZ3.js";
import "./chunk-6HEFBA57.js";
import {
  BigNumber,
  ErrorCode
} from "./chunk-PVYFMLPP.js";
import "./chunk-2A3N7K4H.js";
import "./chunk-UHAIEEBY.js";
import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-ACCAMVX6.js";

// node_modules/lodash.pickby/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.pickby/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var FUNC_ERROR_TEXT = "Expected a function";
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var UNORDERED_COMPARE_FLAG = 1;
    var PARTIAL_COMPARE_FLAG = 2;
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    var reLeadingDot = /^\./;
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEscapeChar = /\\(\\)?/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function arraySome(array, predicate) {
      var index = -1, length = array ? array.length : 0;
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e) {
        }
      }
      return result;
    }
    function mapToArray(map) {
      var index = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    function setToArray(set) {
      var index = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    var Symbol = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView = getNative(root, "DataView");
    var Map = getNative(root, "Map");
    var Promise2 = getNative(root, "Promise");
    var Set = getNative(root, "Set");
    var WeakMap = getNative(root, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set);
    var weakMapCtorString = toSource(WeakMap);
    var symbolProto = Symbol ? Symbol.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index = -1, length = values ? values.length : 0;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack(entries) {
      this.__data__ = new ListCache(entries);
    }
    function stackClear() {
      this.__data__ = new ListCache();
    }
    function stackDelete(key) {
      return this.__data__["delete"](key);
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var cache = this.__data__;
      if (cache instanceof ListCache) {
        var pairs = cache.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          return this;
        }
        cache = this.__data__ = new MapCache(pairs);
      }
      cache.set(key, value);
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseGet(object, path) {
      path = isKey(path, object) ? [path] : castPath(path);
      var index = 0, length = path.length;
      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return index && index == length ? object : void 0;
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseGetTag(value) {
      return objectToString.call(value);
    }
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    function baseIsEqual(value, other, customizer, bitmask, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
    }
    function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = arrayTag, othTag = arrayTag;
      if (!objIsArr) {
        objTag = getTag(object);
        objTag = objTag == argsTag ? objectTag : objTag;
      }
      if (!othIsArr) {
        othTag = getTag(other);
        othTag = othTag == argsTag ? objectTag : othTag;
      }
      var objIsObj = objTag == objectTag && !isHostObject(object), othIsObj = othTag == objectTag && !isHostObject(other), isSameTag = objTag == othTag;
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      }
      if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    }
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length, length = index, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
    }
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, void 0, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
      };
    }
    function basePickBy(object, props, predicate) {
      var index = -1, length = props.length, result = {};
      while (++index < length) {
        var key = props[index], value = object[key];
        if (predicate(value, key)) {
          result[key] = value;
        }
      }
      return result;
    }
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }
    function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1, result = true, seen = bitmask & UNORDERED_COMPARE_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index < arrLength) {
        var arrValue = array[index], othValue = other[index];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!seen.has(othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, customizer, bitmask, stack))) {
              return seen.add(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= UNORDERED_COMPARE_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
      var isPartial = bitmask & PARTIAL_COMPARE_FLAG, objProps = keys(object), objLength = objProps.length, othProps = keys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getMatchData(object) {
      var result = keys(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function(value) {
        var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    function hasPath(object, path, hasFunc) {
      path = isKey(path, object) ? [path] : castPath(path);
      var result, index = -1, length = path.length;
      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result) {
        return result;
      }
      var length = object ? object.length : 0;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    var stringToPath = memoize(function(string) {
      string = toString(string);
      var result = [];
      if (reLeadingDot.test(string)) {
        result.push("");
      }
      string.replace(rePropName, function(match, number, quote, string2) {
        result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match);
      });
      return result;
    });
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    function get(object, path, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path);
      return result === void 0 ? defaultValue : result;
    }
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    function pickBy2(object, predicate) {
      return object == null ? {} : basePickBy(object, getAllKeysIn(object), baseIteratee(predicate));
    }
    function identity(value) {
      return value;
    }
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    function stubArray() {
      return [];
    }
    module.exports = pickBy2;
  }
});

// node_modules/lodash.merge/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.merge/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n, iteratee) {
      var index = -1, result = Array(n);
      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    var Buffer = moduleExports ? root.Buffer : void 0;
    var Symbol = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol ? Symbol.toStringTag : void 0;
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var nativeMax = Math.max;
    var nativeNow = Date.now;
    var Map = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    var baseCreate = function() {
      function object() {
      }
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    function Hash(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    var baseFor = createBaseFor();
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + "");
    }
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func, start, transform) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var merge2 = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module.exports = merge2;
  }
});

// node_modules/@metamask/detect-provider/dist/index.js
var require_dist = __commonJS({
  "node_modules/@metamask/detect-provider/dist/index.js"(exports, module) {
    "use strict";
    function detectEthereumProvider3({ mustBeMetaMask = false, silent = false, timeout = 3e3 } = {}) {
      _validateInputs();
      let handled = false;
      return new Promise((resolve) => {
        if (window.ethereum) {
          handleEthereum();
        } else {
          window.addEventListener("ethereum#initialized", handleEthereum, { once: true });
          setTimeout(() => {
            handleEthereum();
          }, timeout);
        }
        function handleEthereum() {
          if (handled) {
            return;
          }
          handled = true;
          window.removeEventListener("ethereum#initialized", handleEthereum);
          const { ethereum } = window;
          if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {
            resolve(ethereum);
          } else {
            const message = mustBeMetaMask && ethereum ? "Non-MetaMask window.ethereum detected." : "Unable to detect window.ethereum.";
            !silent && console.error("@metamask/detect-provider:", message);
            resolve(null);
          }
        }
      });
      function _validateInputs() {
        if (typeof mustBeMetaMask !== "boolean") {
          throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);
        }
        if (typeof silent !== "boolean") {
          throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);
        }
        if (typeof timeout !== "number") {
          throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);
        }
      }
    }
    module.exports = detectEthereumProvider3;
  }
});

// node_modules/@usedapp/core/dist/esm/src/constants/abi/MultiCall.json
var MultiCall_default = {
  abi: [
    {
      inputs: [
        {
          components: [
            {
              internalType: "address",
              name: "target",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "callData",
              type: "bytes"
            }
          ],
          internalType: "struct Multicall.Call[]",
          name: "calls",
          type: "tuple[]"
        }
      ],
      name: "aggregate",
      outputs: [
        {
          internalType: "uint256",
          name: "blockNumber",
          type: "uint256"
        },
        {
          internalType: "bytes[]",
          name: "returnData",
          type: "bytes[]"
        }
      ],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "blockNumber",
          type: "uint256"
        }
      ],
      name: "getBlockHash",
      outputs: [
        {
          internalType: "bytes32",
          name: "blockHash",
          type: "bytes32"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "getCurrentBlockCoinbase",
      outputs: [
        {
          internalType: "address",
          name: "coinbase",
          type: "address"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "getCurrentBlockDifficulty",
      outputs: [
        {
          internalType: "uint256",
          name: "difficulty",
          type: "uint256"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "getCurrentBlockGasLimit",
      outputs: [
        {
          internalType: "uint256",
          name: "gaslimit",
          type: "uint256"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "getCurrentBlockTimestamp",
      outputs: [
        {
          internalType: "uint256",
          name: "timestamp",
          type: "uint256"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "addr",
          type: "address"
        }
      ],
      name: "getEthBalance",
      outputs: [
        {
          internalType: "uint256",
          name: "balance",
          type: "uint256"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "getLastBlockHash",
      outputs: [
        {
          internalType: "bytes32",
          name: "blockHash",
          type: "bytes32"
        }
      ],
      stateMutability: "view",
      type: "function"
    }
  ],
  bytecode: "608060405234801561001057600080fd5b5061066e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806372425d9d1161005b57806372425d9d146100e757806386d516e8146100ef578063a8b0574e146100f7578063ee82ac5e1461010c57610088565b80630f28c97d1461008d578063252dba42146100ab57806327e86d6e146100cc5780634d2301cc146100d4575b600080fd5b61009561011f565b6040516100a2919061051e565b60405180910390f35b6100be6100b93660046103b6565b610123565b6040516100a292919061052c565b610095610231565b6100956100e2366004610390565b61023a565b610095610247565b61009561024b565b6100ff61024f565b6040516100a2919061050a565b61009561011a3660046103eb565b610253565b4290565b60006060439150825160405190808252806020026020018201604052801561015f57816020015b606081526020019060019003908161014a5790505b50905060005b835181101561022b576000606085838151811061017e57fe5b6020026020010151600001516001600160a01b031686848151811061019f57fe5b6020026020010151602001516040516101b891906104fe565b6000604051808303816000865af19150503d80600081146101f5576040519150601f19603f3d011682016040523d82523d6000602084013e6101fa565b606091505b50915091508161020957600080fd5b8084848151811061021657fe5b60209081029190910101525050600101610165565b50915091565b60001943014090565b6001600160a01b03163190565b4490565b4590565b4190565b4090565b600061026382356105d4565b9392505050565b600082601f83011261027b57600080fd5b813561028e61028982610573565b61054c565b81815260209384019390925082018360005b838110156102cc57813586016102b68882610325565b84525060209283019291909101906001016102a0565b5050505092915050565b600082601f8301126102e757600080fd5b81356102f561028982610594565b9150808252602083016020830185838301111561031157600080fd5b61031c8382846105ee565b50505092915050565b60006040828403121561033757600080fd5b610341604061054c565b9050600061034f8484610257565b825250602082013567ffffffffffffffff81111561036c57600080fd5b610378848285016102d6565b60208301525092915050565b600061026382356105df565b6000602082840312156103a257600080fd5b60006103ae8484610257565b949350505050565b6000602082840312156103c857600080fd5b813567ffffffffffffffff8111156103df57600080fd5b6103ae8482850161026a565b6000602082840312156103fd57600080fd5b60006103ae8484610384565b60006102638383610497565b61041e816105d4565b82525050565b600061042f826105c2565b61043981856105c6565b93508360208202850161044b856105bc565b60005b84811015610482578383038852610466838351610409565b9250610471826105bc565b60209890980197915060010161044e565b50909695505050505050565b61041e816105df565b60006104a2826105c2565b6104ac81856105c6565b93506104bc8185602086016105fa565b6104c58161062a565b9093019392505050565b60006104da826105c2565b6104e481856105cf565b93506104f48185602086016105fa565b9290920192915050565b600061026382846104cf565b602081016105188284610415565b92915050565b60208101610518828461048e565b6040810161053a828561048e565b81810360208301526103ae8184610424565b60405181810167ffffffffffffffff8111828210171561056b57600080fd5b604052919050565b600067ffffffffffffffff82111561058a57600080fd5b5060209081020190565b600067ffffffffffffffff8211156105ab57600080fd5b506020601f91909101601f19160190565b60200190565b5190565b90815260200190565b919050565b6000610518826105e2565b90565b6001600160a01b031690565b82818337506000910152565b60005b838110156106155781810151838201526020016105fd565b83811115610624576000848401525b50505050565b601f01601f19169056fea265627a7a72305820978cd44d5ce226bebdf172bdf24918753b9e111e3803cb6249d3ca2860b7a47f6c6578706572696d656e74616cf50037"
};

// node_modules/@usedapp/core/dist/esm/src/constants/abi/MultiCall2.json
var MultiCall2_default = {
  abi: [
    {
      inputs: [
        {
          components: [
            {
              internalType: "address",
              name: "target",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "callData",
              type: "bytes"
            }
          ],
          internalType: "struct Multicall2.Call[]",
          name: "calls",
          type: "tuple[]"
        }
      ],
      name: "aggregate",
      outputs: [
        {
          internalType: "uint256",
          name: "blockNumber",
          type: "uint256"
        },
        {
          internalType: "bytes[]",
          name: "returnData",
          type: "bytes[]"
        }
      ],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [
        {
          components: [
            {
              internalType: "address",
              name: "target",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "callData",
              type: "bytes"
            }
          ],
          internalType: "struct Multicall2.Call[]",
          name: "calls",
          type: "tuple[]"
        }
      ],
      name: "blockAndAggregate",
      outputs: [
        {
          internalType: "uint256",
          name: "blockNumber",
          type: "uint256"
        },
        {
          internalType: "bytes32",
          name: "blockHash",
          type: "bytes32"
        },
        {
          components: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          internalType: "struct Multicall2.Result[]",
          name: "returnData",
          type: "tuple[]"
        }
      ],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "uint256",
          name: "blockNumber",
          type: "uint256"
        }
      ],
      name: "getBlockHash",
      outputs: [
        {
          internalType: "bytes32",
          name: "blockHash",
          type: "bytes32"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "getBlockNumber",
      outputs: [
        {
          internalType: "uint256",
          name: "blockNumber",
          type: "uint256"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "getCurrentBlockCoinbase",
      outputs: [
        {
          internalType: "address",
          name: "coinbase",
          type: "address"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "getCurrentBlockDifficulty",
      outputs: [
        {
          internalType: "uint256",
          name: "difficulty",
          type: "uint256"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "getCurrentBlockGasLimit",
      outputs: [
        {
          internalType: "uint256",
          name: "gaslimit",
          type: "uint256"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "getCurrentBlockTimestamp",
      outputs: [
        {
          internalType: "uint256",
          name: "timestamp",
          type: "uint256"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "addr",
          type: "address"
        }
      ],
      name: "getEthBalance",
      outputs: [
        {
          internalType: "uint256",
          name: "balance",
          type: "uint256"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "getLastBlockHash",
      outputs: [
        {
          internalType: "bytes32",
          name: "blockHash",
          type: "bytes32"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "bool",
          name: "requireSuccess",
          type: "bool"
        },
        {
          components: [
            {
              internalType: "address",
              name: "target",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "callData",
              type: "bytes"
            }
          ],
          internalType: "struct Multicall2.Call[]",
          name: "calls",
          type: "tuple[]"
        }
      ],
      name: "tryAggregate",
      outputs: [
        {
          components: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          internalType: "struct Multicall2.Result[]",
          name: "returnData",
          type: "tuple[]"
        }
      ],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "bool",
          name: "requireSuccess",
          type: "bool"
        },
        {
          components: [
            {
              internalType: "address",
              name: "target",
              type: "address"
            },
            {
              internalType: "bytes",
              name: "callData",
              type: "bytes"
            }
          ],
          internalType: "struct Multicall2.Call[]",
          name: "calls",
          type: "tuple[]"
        }
      ],
      name: "tryBlockAndAggregate",
      outputs: [
        {
          internalType: "uint256",
          name: "blockNumber",
          type: "uint256"
        },
        {
          internalType: "bytes32",
          name: "blockHash",
          type: "bytes32"
        },
        {
          components: [
            {
              internalType: "bool",
              name: "success",
              type: "bool"
            },
            {
              internalType: "bytes",
              name: "returnData",
              type: "bytes"
            }
          ],
          internalType: "struct Multicall2.Result[]",
          name: "returnData",
          type: "tuple[]"
        }
      ],
      stateMutability: "nonpayable",
      type: "function"
    }
  ],
  bytecode: "0x608060405234801561001057600080fd5b50610b55806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806372425d9d11610081578063bce38bd71161005b578063bce38bd714610181578063c3077fa9146101a1578063ee82ac5e146101b457600080fd5b806372425d9d1461016757806386d516e81461016d578063a8b0574e1461017357600080fd5b8063399542e9116100b2578063399542e91461011757806342cbb15c146101395780634d2301cc1461013f57600080fd5b80630f28c97d146100d9578063252dba42146100ee57806327e86d6e1461010f575b600080fd5b425b6040519081526020015b60405180910390f35b6101016100fc3660046107e3565b6101c6565b6040516100e592919061089a565b6100db610375565b61012a610125366004610922565b610388565b6040516100e5939291906109df565b436100db565b6100db61014d366004610a07565b73ffffffffffffffffffffffffffffffffffffffff163190565b446100db565b456100db565b6040514181526020016100e5565b61019461018f366004610922565b6103a0565b6040516100e59190610a29565b61012a6101af3660046107e3565b61059d565b6100db6101c2366004610a3c565b4090565b8051439060609067ffffffffffffffff8111156101e5576101e56105ba565b60405190808252806020026020018201604052801561021857816020015b60608152602001906001900390816102035790505b50905060005b835181101561036f5760008085838151811061023c5761023c610a55565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1686848151811061027057610270610a55565b6020026020010151602001516040516102899190610a84565b6000604051808303816000865af19150503d80600081146102c6576040519150601f19603f3d011682016040523d82523d6000602084013e6102cb565b606091505b50915091508161033c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c656460448201526064015b60405180910390fd5b8084848151811061034f5761034f610a55565b60200260200101819052505050808061036790610acf565b91505061021e565b50915091565b6000610382600143610b08565b40905090565b438040606061039785856103a0565b90509250925092565b6060815167ffffffffffffffff8111156103bc576103bc6105ba565b60405190808252806020026020018201604052801561040257816020015b6040805180820190915260008152606060208201528152602001906001900390816103da5790505b50905060005b82518110156105965760008084838151811061042657610426610a55565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1685848151811061045a5761045a610a55565b6020026020010151602001516040516104739190610a84565b6000604051808303816000865af19150503d80600081146104b0576040519150601f19603f3d011682016040523d82523d6000602084013e6104b5565b606091505b5091509150851561054d578161054d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610333565b604051806040016040528083151581526020018281525084848151811061057657610576610a55565b60200260200101819052505050808061058e90610acf565b915050610408565b5092915050565b60008060606105ad600185610388565b9196909550909350915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561060c5761060c6105ba565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610659576106596105ba565b604052919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461068557600080fd5b919050565b6000601f838184011261069c57600080fd5b8235602067ffffffffffffffff808311156106b9576106b96105ba565b8260051b6106c8838201610612565b93845286810183019383810190898611156106e257600080fd5b84890192505b858310156107d6578235848111156107005760008081fd5b890160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828d0381018213156107375760008081fd5b61073f6105e9565b61074a898501610661565b8152828401358881111561075e5760008081fd5b8085019450508d603f8501126107745760008081fd5b8884013588811115610788576107886105ba565b6107978a848e84011601610612565b92508083528e848287010111156107ae5760008081fd5b808486018b85013760009083018a0152808901919091528452505091840191908401906106e8565b9998505050505050505050565b6000602082840312156107f557600080fd5b813567ffffffffffffffff81111561080c57600080fd5b6108188482850161068a565b949350505050565b60005b8381101561083b578181015183820152602001610823565b8381111561084a576000848401525b50505050565b60008151808452610868816020860160208601610820565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610914577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452610902868351610850565b955092840192908401906001016108c8565b509398975050505050505050565b6000806040838503121561093557600080fd5b8235801515811461094557600080fd5b9150602083013567ffffffffffffffff81111561096157600080fd5b61096d8582860161068a565b9150509250929050565b6000815180845260208085019450848260051b860182860160005b858110156109d2578383038952815180511515845285015160408685018190526109be81860183610850565b9a87019a9450505090840190600101610992565b5090979650505050505050565b8381528260208201526060604082015260006109fe6060830184610977565b95945050505050565b600060208284031215610a1957600080fd5b610a2282610661565b9392505050565b602081526000610a226020830184610977565b600060208284031215610a4e57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008251610a96818460208701610820565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b0157610b01610aa0565b5060010190565b600082821015610b1a57610b1a610aa0565b50039056fea2646970667358221220e7d0aaf55c82be59048620e7f021718b1813ee902147f84cead4ad8176f7682e64736f6c634300080a0033",
  deployedBytecode: "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c806372425d9d11610081578063bce38bd71161005b578063bce38bd714610181578063c3077fa9146101a1578063ee82ac5e146101b457600080fd5b806372425d9d1461016757806386d516e81461016d578063a8b0574e1461017357600080fd5b8063399542e9116100b2578063399542e91461011757806342cbb15c146101395780634d2301cc1461013f57600080fd5b80630f28c97d146100d9578063252dba42146100ee57806327e86d6e1461010f575b600080fd5b425b6040519081526020015b60405180910390f35b6101016100fc3660046107e3565b6101c6565b6040516100e592919061089a565b6100db610375565b61012a610125366004610922565b610388565b6040516100e5939291906109df565b436100db565b6100db61014d366004610a07565b73ffffffffffffffffffffffffffffffffffffffff163190565b446100db565b456100db565b6040514181526020016100e5565b61019461018f366004610922565b6103a0565b6040516100e59190610a29565b61012a6101af3660046107e3565b61059d565b6100db6101c2366004610a3c565b4090565b8051439060609067ffffffffffffffff8111156101e5576101e56105ba565b60405190808252806020026020018201604052801561021857816020015b60608152602001906001900390816102035790505b50905060005b835181101561036f5760008085838151811061023c5761023c610a55565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1686848151811061027057610270610a55565b6020026020010151602001516040516102899190610a84565b6000604051808303816000865af19150503d80600081146102c6576040519150601f19603f3d011682016040523d82523d6000602084013e6102cb565b606091505b50915091508161033c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4d756c746963616c6c206167677265676174653a2063616c6c206661696c656460448201526064015b60405180910390fd5b8084848151811061034f5761034f610a55565b60200260200101819052505050808061036790610acf565b91505061021e565b50915091565b6000610382600143610b08565b40905090565b438040606061039785856103a0565b90509250925092565b6060815167ffffffffffffffff8111156103bc576103bc6105ba565b60405190808252806020026020018201604052801561040257816020015b6040805180820190915260008152606060208201528152602001906001900390816103da5790505b50905060005b82518110156105965760008084838151811061042657610426610a55565b60200260200101516000015173ffffffffffffffffffffffffffffffffffffffff1685848151811061045a5761045a610a55565b6020026020010151602001516040516104739190610a84565b6000604051808303816000865af19150503d80600081146104b0576040519150601f19603f3d011682016040523d82523d6000602084013e6104b5565b606091505b5091509150851561054d578161054d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f4d756c746963616c6c32206167677265676174653a2063616c6c206661696c6560448201527f64000000000000000000000000000000000000000000000000000000000000006064820152608401610333565b604051806040016040528083151581526020018281525084848151811061057657610576610a55565b60200260200101819052505050808061058e90610acf565b915050610408565b5092915050565b60008060606105ad600185610388565b9196909550909350915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561060c5761060c6105ba565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610659576106596105ba565b604052919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461068557600080fd5b919050565b6000601f838184011261069c57600080fd5b8235602067ffffffffffffffff808311156106b9576106b96105ba565b8260051b6106c8838201610612565b93845286810183019383810190898611156106e257600080fd5b84890192505b858310156107d6578235848111156107005760008081fd5b890160407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0828d0381018213156107375760008081fd5b61073f6105e9565b61074a898501610661565b8152828401358881111561075e5760008081fd5b8085019450508d603f8501126107745760008081fd5b8884013588811115610788576107886105ba565b6107978a848e84011601610612565b92508083528e848287010111156107ae5760008081fd5b808486018b85013760009083018a0152808901919091528452505091840191908401906106e8565b9998505050505050505050565b6000602082840312156107f557600080fd5b813567ffffffffffffffff81111561080c57600080fd5b6108188482850161068a565b949350505050565b60005b8381101561083b578181015183820152602001610823565b8381111561084a576000848401525b50505050565b60008151808452610868816020860160208601610820565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610914577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452610902868351610850565b955092840192908401906001016108c8565b509398975050505050505050565b6000806040838503121561093557600080fd5b8235801515811461094557600080fd5b9150602083013567ffffffffffffffff81111561096157600080fd5b61096d8582860161068a565b9150509250929050565b6000815180845260208085019450848260051b860182860160005b858110156109d2578383038952815180511515845285015160408685018190526109be81860183610850565b9a87019a9450505090840190600101610992565b5090979650505050505050565b8381528260208201526060604082015260006109fe6060830184610977565b95945050505050565b600060208284031215610a1957600080fd5b610a2282610661565b9392505050565b602081526000610a226020830184610977565b600060208284031215610a4e57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008251610a96818460208701610820565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b0157610b01610aa0565b5060010190565b600082821015610b1a57610b1a610aa0565b50039056fea2646970667358221220e7d0aaf55c82be59048620e7f021718b1813ee902147f84cead4ad8176f7682e64736f6c634300080a0033"
};

// node_modules/@usedapp/core/dist/esm/src/constants/abi/ERC20.json
var ERC20_default = {
  contractName: "ERC20",
  abi: [
    {
      constant: true,
      inputs: [],
      name: "name",
      outputs: [
        {
          name: "",
          type: "string"
        }
      ],
      payable: false,
      stateMutability: "view",
      type: "function"
    },
    {
      constant: false,
      inputs: [
        {
          name: "_spender",
          type: "address"
        },
        {
          name: "_value",
          type: "uint256"
        }
      ],
      name: "approve",
      outputs: [
        {
          name: "",
          type: "bool"
        }
      ],
      payable: false,
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      constant: true,
      inputs: [],
      name: "totalSupply",
      outputs: [
        {
          name: "",
          type: "uint256"
        }
      ],
      payable: false,
      stateMutability: "view",
      type: "function"
    },
    {
      constant: false,
      inputs: [
        {
          name: "_from",
          type: "address"
        },
        {
          name: "_to",
          type: "address"
        },
        {
          name: "_value",
          type: "uint256"
        }
      ],
      name: "transferFrom",
      outputs: [
        {
          name: "",
          type: "bool"
        }
      ],
      payable: false,
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      constant: true,
      inputs: [],
      name: "decimals",
      outputs: [
        {
          name: "",
          type: "uint8"
        }
      ],
      payable: false,
      stateMutability: "view",
      type: "function"
    },
    {
      constant: true,
      inputs: [
        {
          name: "_owner",
          type: "address"
        }
      ],
      name: "balanceOf",
      outputs: [
        {
          name: "balance",
          type: "uint256"
        }
      ],
      payable: false,
      stateMutability: "view",
      type: "function"
    },
    {
      constant: true,
      inputs: [],
      name: "symbol",
      outputs: [
        {
          name: "",
          type: "string"
        }
      ],
      payable: false,
      stateMutability: "view",
      type: "function"
    },
    {
      constant: false,
      inputs: [
        {
          name: "_to",
          type: "address"
        },
        {
          name: "_value",
          type: "uint256"
        }
      ],
      name: "transfer",
      outputs: [
        {
          name: "",
          type: "bool"
        }
      ],
      payable: false,
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      constant: true,
      inputs: [
        {
          name: "_owner",
          type: "address"
        },
        {
          name: "_spender",
          type: "address"
        }
      ],
      name: "allowance",
      outputs: [
        {
          name: "",
          type: "uint256"
        }
      ],
      payable: false,
      stateMutability: "view",
      type: "function"
    },
    {
      payable: true,
      stateMutability: "payable",
      type: "fallback"
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          name: "owner",
          type: "address"
        },
        {
          indexed: true,
          name: "spender",
          type: "address"
        },
        {
          indexed: false,
          name: "value",
          type: "uint256"
        }
      ],
      name: "Approval",
      type: "event"
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          name: "from",
          type: "address"
        },
        {
          indexed: true,
          name: "to",
          type: "address"
        },
        {
          indexed: false,
          name: "value",
          type: "uint256"
        }
      ],
      name: "Transfer",
      type: "event"
    }
  ],
  bytecode: "0x608060405234801561001057600080fd5b506105dd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a5576000357c01000000000000000000000000000000000000000000000000000000009004806370a082311161007857806370a0823114610166578063a457c2d71461018c578063a9059cbb146101b8578063dd62ed3e146101e4576100a5565b8063095ea7b3146100aa57806318160ddd146100ea57806323b872dd14610104578063395093511461013a575b600080fd5b6100d6600480360360408110156100c057600080fd5b50600160a060020a038135169060200135610212565b604080519115158252519081900360200190f35b6100f2610290565b60408051918252519081900360200190f35b6100d66004803603606081101561011a57600080fd5b50600160a060020a03813581169160208101359091169060400135610296565b6100d66004803603604081101561015057600080fd5b50600160a060020a03813516906020013561035f565b6100f26004803603602081101561017c57600080fd5b5035600160a060020a031661040f565b6100d6600480360360408110156101a257600080fd5b50600160a060020a03813516906020013561042a565b6100d6600480360360408110156101ce57600080fd5b50600160a060020a038135169060200135610475565b6100f2600480360360408110156101fa57600080fd5b50600160a060020a038135811691602001351661048b565b6000600160a060020a038316151561022957600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025490565b600160a060020a03831660009081526001602090815260408083203384529091528120546102ca908363ffffffff6104b616565b600160a060020a03851660009081526001602090815260408083203384529091529020556102f98484846104cb565b600160a060020a0384166000818152600160209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000600160a060020a038316151561037657600080fd5b336000908152600160209081526040808320600160a060020a03871684529091529020546103aa908363ffffffff61059816565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a031660009081526020819052604090205490565b6000600160a060020a038316151561044157600080fd5b336000908152600160209081526040808320600160a060020a03871684529091529020546103aa908363ffffffff6104b616565b60006104823384846104cb565b50600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000828211156104c557600080fd5b50900390565b600160a060020a03821615156104e057600080fd5b600160a060020a038316600090815260208190526040902054610509908263ffffffff6104b616565b600160a060020a03808516600090815260208190526040808220939093559084168152205461053e908263ffffffff61059816565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828201838110156105aa57600080fd5b939250505056fea165627a7a72305820722c0187518ce2856a424bdba350d5a263c8f98fcb19cb4cc161372bc3b794c90029",
  deployedBytecode: "0x608060405234801561001057600080fd5b50600436106100a5576000357c01000000000000000000000000000000000000000000000000000000009004806370a082311161007857806370a0823114610166578063a457c2d71461018c578063a9059cbb146101b8578063dd62ed3e146101e4576100a5565b8063095ea7b3146100aa57806318160ddd146100ea57806323b872dd14610104578063395093511461013a575b600080fd5b6100d6600480360360408110156100c057600080fd5b50600160a060020a038135169060200135610212565b604080519115158252519081900360200190f35b6100f2610290565b60408051918252519081900360200190f35b6100d66004803603606081101561011a57600080fd5b50600160a060020a03813581169160208101359091169060400135610296565b6100d66004803603604081101561015057600080fd5b50600160a060020a03813516906020013561035f565b6100f26004803603602081101561017c57600080fd5b5035600160a060020a031661040f565b6100d6600480360360408110156101a257600080fd5b50600160a060020a03813516906020013561042a565b6100d6600480360360408110156101ce57600080fd5b50600160a060020a038135169060200135610475565b6100f2600480360360408110156101fa57600080fd5b50600160a060020a038135811691602001351661048b565b6000600160a060020a038316151561022957600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b60025490565b600160a060020a03831660009081526001602090815260408083203384529091528120546102ca908363ffffffff6104b616565b600160a060020a03851660009081526001602090815260408083203384529091529020556102f98484846104cb565b600160a060020a0384166000818152600160209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000600160a060020a038316151561037657600080fd5b336000908152600160209081526040808320600160a060020a03871684529091529020546103aa908363ffffffff61059816565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a031660009081526020819052604090205490565b6000600160a060020a038316151561044157600080fd5b336000908152600160209081526040808320600160a060020a03871684529091529020546103aa908363ffffffff6104b616565b60006104823384846104cb565b50600192915050565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000828211156104c557600080fd5b50900390565b600160a060020a03821615156104e057600080fd5b600160a060020a038316600090815260208190526040902054610509908263ffffffff6104b616565b600160a060020a03808516600090815260208190526040808220939093559084168152205461053e908263ffffffff61059816565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000828201838110156105aa57600080fd5b939250505056fea165627a7a72305820722c0187518ce2856a424bdba350d5a263c8f98fcb19cb4cc161372bc3b794c90029",
  compiler: {
    name: "solc",
    version: "0.5.4+commit.9549d8ff.Emscripten.clang"
  }
};

// node_modules/@usedapp/core/dist/esm/src/constants/abi/ERC20Mock.json
var ERC20Mock_default = {
  _format: "hh-sol-artifact-1",
  contractName: "ERC20Mock",
  sourceName: "contracts/mocks/ERC20Mock.sol",
  abi: [
    {
      inputs: [
        {
          internalType: "string",
          name: "name",
          type: "string"
        },
        {
          internalType: "string",
          name: "symbol",
          type: "string"
        },
        {
          internalType: "address",
          name: "initialAccount",
          type: "address"
        },
        {
          internalType: "uint256",
          name: "initialBalance",
          type: "uint256"
        }
      ],
      stateMutability: "payable",
      type: "constructor"
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "owner",
          type: "address"
        },
        {
          indexed: true,
          internalType: "address",
          name: "spender",
          type: "address"
        },
        {
          indexed: false,
          internalType: "uint256",
          name: "value",
          type: "uint256"
        }
      ],
      name: "Approval",
      type: "event"
    },
    {
      anonymous: false,
      inputs: [
        {
          indexed: true,
          internalType: "address",
          name: "from",
          type: "address"
        },
        {
          indexed: true,
          internalType: "address",
          name: "to",
          type: "address"
        },
        {
          indexed: false,
          internalType: "uint256",
          name: "value",
          type: "uint256"
        }
      ],
      name: "Transfer",
      type: "event"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "owner",
          type: "address"
        },
        {
          internalType: "address",
          name: "spender",
          type: "address"
        }
      ],
      name: "allowance",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "spender",
          type: "address"
        },
        {
          internalType: "uint256",
          name: "amount",
          type: "uint256"
        }
      ],
      name: "approve",
      outputs: [
        {
          internalType: "bool",
          name: "",
          type: "bool"
        }
      ],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "owner",
          type: "address"
        },
        {
          internalType: "address",
          name: "spender",
          type: "address"
        },
        {
          internalType: "uint256",
          name: "value",
          type: "uint256"
        }
      ],
      name: "approveInternal",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "account",
          type: "address"
        }
      ],
      name: "balanceOf",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "account",
          type: "address"
        },
        {
          internalType: "uint256",
          name: "amount",
          type: "uint256"
        }
      ],
      name: "burn",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [],
      name: "decimals",
      outputs: [
        {
          internalType: "uint8",
          name: "",
          type: "uint8"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "spender",
          type: "address"
        },
        {
          internalType: "uint256",
          name: "subtractedValue",
          type: "uint256"
        }
      ],
      name: "decreaseAllowance",
      outputs: [
        {
          internalType: "bool",
          name: "",
          type: "bool"
        }
      ],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "spender",
          type: "address"
        },
        {
          internalType: "uint256",
          name: "addedValue",
          type: "uint256"
        }
      ],
      name: "increaseAllowance",
      outputs: [
        {
          internalType: "bool",
          name: "",
          type: "bool"
        }
      ],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "account",
          type: "address"
        },
        {
          internalType: "uint256",
          name: "amount",
          type: "uint256"
        }
      ],
      name: "mint",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [],
      name: "name",
      outputs: [
        {
          internalType: "string",
          name: "",
          type: "string"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "symbol",
      outputs: [
        {
          internalType: "string",
          name: "",
          type: "string"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [],
      name: "totalSupply",
      outputs: [
        {
          internalType: "uint256",
          name: "",
          type: "uint256"
        }
      ],
      stateMutability: "view",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "recipient",
          type: "address"
        },
        {
          internalType: "uint256",
          name: "amount",
          type: "uint256"
        }
      ],
      name: "transfer",
      outputs: [
        {
          internalType: "bool",
          name: "",
          type: "bool"
        }
      ],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "sender",
          type: "address"
        },
        {
          internalType: "address",
          name: "recipient",
          type: "address"
        },
        {
          internalType: "uint256",
          name: "amount",
          type: "uint256"
        }
      ],
      name: "transferFrom",
      outputs: [
        {
          internalType: "bool",
          name: "",
          type: "bool"
        }
      ],
      stateMutability: "nonpayable",
      type: "function"
    },
    {
      inputs: [
        {
          internalType: "address",
          name: "from",
          type: "address"
        },
        {
          internalType: "address",
          name: "to",
          type: "address"
        },
        {
          internalType: "uint256",
          name: "value",
          type: "uint256"
        }
      ],
      name: "transferInternal",
      outputs: [],
      stateMutability: "nonpayable",
      type: "function"
    }
  ],
  bytecode: "0x608060405260405162001fc138038062001fc1833981810160405281019062000029919062000335565b8383816003908051906020019062000043929190620001e5565b5080600490805190602001906200005c929190620001e5565b5050506200007182826200007b60201b60201c565b50505050620006a5565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620000ee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000e59062000426565b60405180910390fd5b6200010260008383620001e060201b60201c565b8060026000828254620001169190620004dd565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200016d9190620004dd565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620001d4919062000448565b60405180910390a35050565b505050565b828054620001f390620005ae565b90600052602060002090601f01602090048101928262000217576000855562000263565b82601f106200023257805160ff191683800117855562000263565b8280016001018555821562000263579182015b828111156200026257825182559160200191906001019062000245565b5b50905062000272919062000276565b5090565b5b808211156200029157600081600090555060010162000277565b5090565b6000620002ac620002a68462000499565b62000465565b905082815260208101848484011115620002c557600080fd5b620002d284828562000578565b509392505050565b600081519050620002eb8162000671565b92915050565b600082601f8301126200030357600080fd5b81516200031584826020860162000295565b91505092915050565b6000815190506200032f816200068b565b92915050565b600080600080608085870312156200034c57600080fd5b600085015167ffffffffffffffff8111156200036757600080fd5b6200037587828801620002f1565b945050602085015167ffffffffffffffff8111156200039357600080fd5b620003a187828801620002f1565b9350506040620003b487828801620002da565b9250506060620003c7878288016200031e565b91505092959194509250565b6000620003e2601f83620004cc565b91507f45524332303a206d696e7420746f20746865207a65726f2061646472657373006000830152602082019050919050565b62000420816200056e565b82525050565b600060208201905081810360008301526200044181620003d3565b9050919050565b60006020820190506200045f600083018462000415565b92915050565b6000604051905081810181811067ffffffffffffffff821117156200048f576200048e62000642565b5b8060405250919050565b600067ffffffffffffffff821115620004b757620004b662000642565b5b601f19601f8301169050602081019050919050565b600082825260208201905092915050565b6000620004ea826200056e565b9150620004f7836200056e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200052f576200052e620005e4565b5b828201905092915050565b600062000547826200054e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620005985780820151818401526020810190506200057b565b83811115620005a8576000848401525b50505050565b60006002820490506001821680620005c757607f821691505b60208210811415620005de57620005dd62000613565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200067c816200053a565b81146200068857600080fd5b50565b62000696816200056e565b8114620006a257600080fd5b50565b61190c80620006b56000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806340c10f19116100975780639dc29fac116100665780639dc29fac14610286578063a457c2d7146102a2578063a9059cbb146102d2578063dd62ed3e14610302576100f5565b806340c10f191461020057806356189cb41461021c57806370a082311461023857806395d89b4114610268576100f5565b8063222f5be0116100d3578063222f5be01461016657806323b872dd14610182578063313ce567146101b257806339509351146101d0576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b610102610332565b60405161010f9190611541565b60405180910390f35b610132600480360381019061012d91906110ae565b6103c4565b60405161013f9190611526565b60405180910390f35b6101506103e2565b60405161015d91906116a3565b60405180910390f35b610180600480360381019061017b919061105f565b6103ec565b005b61019c6004803603810190610197919061105f565b6103fc565b6040516101a99190611526565b60405180910390f35b6101ba6104fd565b6040516101c791906116be565b60405180910390f35b6101ea60048036038101906101e591906110ae565b610506565b6040516101f79190611526565b60405180910390f35b61021a600480360381019061021591906110ae565b6105b2565b005b6102366004803603810190610231919061105f565b6105c0565b005b610252600480360381019061024d9190610ffa565b6105d0565b60405161025f91906116a3565b60405180910390f35b610270610618565b60405161027d9190611541565b60405180910390f35b6102a0600480360381019061029b91906110ae565b6106aa565b005b6102bc60048036038101906102b791906110ae565b6106b8565b6040516102c99190611526565b60405180910390f35b6102ec60048036038101906102e791906110ae565b6107ac565b6040516102f99190611526565b60405180910390f35b61031c60048036038101906103179190611023565b6107ca565b60405161032991906116a3565b60405180910390f35b60606003805461034190611807565b80601f016020809104026020016040519081016040528092919081815260200182805461036d90611807565b80156103ba5780601f1061038f576101008083540402835291602001916103ba565b820191906000526020600020905b81548152906001019060200180831161039d57829003601f168201915b5050505050905090565b60006103d86103d1610851565b8484610859565b6001905092915050565b6000600254905090565b6103f7838383610a24565b505050565b6000610409848484610a24565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610454610851565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156104d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cb906115e3565b60405180910390fd5b6104f1856104e0610851565b85846104ec919061174b565b610859565b60019150509392505050565b60006012905090565b60006105a8610513610851565b848460016000610521610851565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105a391906116f5565b610859565b6001905092915050565b6105bc8282610ca3565b5050565b6105cb838383610859565b505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461062790611807565b80601f016020809104026020016040519081016040528092919081815260200182805461065390611807565b80156106a05780601f10610675576101008083540402835291602001916106a0565b820191906000526020600020905b81548152906001019060200180831161068357829003601f168201915b5050505050905090565b6106b48282610df7565b5050565b600080600160006106c7610851565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077b90611663565b60405180910390fd5b6107a161078f610851565b85858461079c919061174b565b610859565b600191505092915050565b60006107c06107b9610851565b8484610a24565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c090611643565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610939576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610930906115a3565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610a1791906116a3565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8b90611623565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afb90611563565b60405180910390fd5b610b0f838383610fcb565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8c906115c3565b60405180910390fd5b8181610ba1919061174b565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c3191906116f5565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c9591906116a3565b60405180910390a350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0a90611683565b60405180910390fd5b610d1f60008383610fcb565b8060026000828254610d3191906116f5565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d8691906116f5565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610deb91906116a3565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5e90611603565b60405180910390fd5b610e7382600083610fcb565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610ef9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef090611583565b60405180910390fd5b8181610f05919061174b565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254610f59919061174b565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610fbe91906116a3565b60405180910390a3505050565b505050565b600081359050610fdf816118a8565b92915050565b600081359050610ff4816118bf565b92915050565b60006020828403121561100c57600080fd5b600061101a84828501610fd0565b91505092915050565b6000806040838503121561103657600080fd5b600061104485828601610fd0565b925050602061105585828601610fd0565b9150509250929050565b60008060006060848603121561107457600080fd5b600061108286828701610fd0565b935050602061109386828701610fd0565b92505060406110a486828701610fe5565b9150509250925092565b600080604083850312156110c157600080fd5b60006110cf85828601610fd0565b92505060206110e085828601610fe5565b9150509250929050565b6110f381611791565b82525050565b6000611104826116d9565b61110e81856116e4565b935061111e8185602086016117d4565b61112781611897565b840191505092915050565b600061113f6023836116e4565b91507f45524332303a207472616e7366657220746f20746865207a65726f206164647260008301527f65737300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006111a56022836116e4565b91507f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008301527f63650000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061120b6022836116e4565b91507f45524332303a20617070726f766520746f20746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006112716026836116e4565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206260008301527f616c616e636500000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006112d76028836116e4565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206160008301527f6c6c6f77616e63650000000000000000000000000000000000000000000000006020830152604082019050919050565b600061133d6021836116e4565b91507f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008301527f73000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006113a36025836116e4565b91507f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008301527f64726573730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006114096024836116e4565b91507f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061146f6025836116e4565b91507f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008301527f207a65726f0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006114d5601f836116e4565b91507f45524332303a206d696e7420746f20746865207a65726f2061646472657373006000830152602082019050919050565b611511816117bd565b82525050565b611520816117c7565b82525050565b600060208201905061153b60008301846110ea565b92915050565b6000602082019050818103600083015261155b81846110f9565b905092915050565b6000602082019050818103600083015261157c81611132565b9050919050565b6000602082019050818103600083015261159c81611198565b9050919050565b600060208201905081810360008301526115bc816111fe565b9050919050565b600060208201905081810360008301526115dc81611264565b9050919050565b600060208201905081810360008301526115fc816112ca565b9050919050565b6000602082019050818103600083015261161c81611330565b9050919050565b6000602082019050818103600083015261163c81611396565b9050919050565b6000602082019050818103600083015261165c816113fc565b9050919050565b6000602082019050818103600083015261167c81611462565b9050919050565b6000602082019050818103600083015261169c816114c8565b9050919050565b60006020820190506116b86000830184611508565b92915050565b60006020820190506116d36000830184611517565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611700826117bd565b915061170b836117bd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156117405761173f611839565b5b828201905092915050565b6000611756826117bd565b9150611761836117bd565b92508282101561177457611773611839565b5b828203905092915050565b600061178a8261179d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156117f25780820151818401526020810190506117d7565b83811115611801576000848401525b50505050565b6000600282049050600182168061181f57607f821691505b6020821081141561183357611832611868565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6118b18161177f565b81146118bc57600080fd5b50565b6118c8816117bd565b81146118d357600080fd5b5056fea26469706673582212201e41f70221ac8d0f18c73be33898dbdedd64ac077893da38d712d65fe6638d1864736f6c63430008000033",
  deployedBytecode: "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c806340c10f19116100975780639dc29fac116100665780639dc29fac14610286578063a457c2d7146102a2578063a9059cbb146102d2578063dd62ed3e14610302576100f5565b806340c10f191461020057806356189cb41461021c57806370a082311461023857806395d89b4114610268576100f5565b8063222f5be0116100d3578063222f5be01461016657806323b872dd14610182578063313ce567146101b257806339509351146101d0576100f5565b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610148575b600080fd5b610102610332565b60405161010f9190611541565b60405180910390f35b610132600480360381019061012d91906110ae565b6103c4565b60405161013f9190611526565b60405180910390f35b6101506103e2565b60405161015d91906116a3565b60405180910390f35b610180600480360381019061017b919061105f565b6103ec565b005b61019c6004803603810190610197919061105f565b6103fc565b6040516101a99190611526565b60405180910390f35b6101ba6104fd565b6040516101c791906116be565b60405180910390f35b6101ea60048036038101906101e591906110ae565b610506565b6040516101f79190611526565b60405180910390f35b61021a600480360381019061021591906110ae565b6105b2565b005b6102366004803603810190610231919061105f565b6105c0565b005b610252600480360381019061024d9190610ffa565b6105d0565b60405161025f91906116a3565b60405180910390f35b610270610618565b60405161027d9190611541565b60405180910390f35b6102a0600480360381019061029b91906110ae565b6106aa565b005b6102bc60048036038101906102b791906110ae565b6106b8565b6040516102c99190611526565b60405180910390f35b6102ec60048036038101906102e791906110ae565b6107ac565b6040516102f99190611526565b60405180910390f35b61031c60048036038101906103179190611023565b6107ca565b60405161032991906116a3565b60405180910390f35b60606003805461034190611807565b80601f016020809104026020016040519081016040528092919081815260200182805461036d90611807565b80156103ba5780601f1061038f576101008083540402835291602001916103ba565b820191906000526020600020905b81548152906001019060200180831161039d57829003601f168201915b5050505050905090565b60006103d86103d1610851565b8484610859565b6001905092915050565b6000600254905090565b6103f7838383610a24565b505050565b6000610409848484610a24565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610454610851565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156104d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cb906115e3565b60405180910390fd5b6104f1856104e0610851565b85846104ec919061174b565b610859565b60019150509392505050565b60006012905090565b60006105a8610513610851565b848460016000610521610851565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105a391906116f5565b610859565b6001905092915050565b6105bc8282610ca3565b5050565b6105cb838383610859565b505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461062790611807565b80601f016020809104026020016040519081016040528092919081815260200182805461065390611807565b80156106a05780601f10610675576101008083540402835291602001916106a0565b820191906000526020600020905b81548152906001019060200180831161068357829003601f168201915b5050505050905090565b6106b48282610df7565b5050565b600080600160006106c7610851565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610784576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077b90611663565b60405180910390fd5b6107a161078f610851565b85858461079c919061174b565b610859565b600191505092915050565b60006107c06107b9610851565b8484610a24565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156108c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c090611643565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610939576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610930906115a3565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610a1791906116a3565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8b90611623565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afb90611563565b60405180910390fd5b610b0f838383610fcb565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610b95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8c906115c3565b60405180910390fd5b8181610ba1919061174b565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c3191906116f5565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610c9591906116a3565b60405180910390a350505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610d13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0a90611683565b60405180910390fd5b610d1f60008383610fcb565b8060026000828254610d3191906116f5565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d8691906116f5565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610deb91906116a3565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610e67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5e90611603565b60405180910390fd5b610e7382600083610fcb565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610ef9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef090611583565b60405180910390fd5b8181610f05919061174b565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254610f59919061174b565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610fbe91906116a3565b60405180910390a3505050565b505050565b600081359050610fdf816118a8565b92915050565b600081359050610ff4816118bf565b92915050565b60006020828403121561100c57600080fd5b600061101a84828501610fd0565b91505092915050565b6000806040838503121561103657600080fd5b600061104485828601610fd0565b925050602061105585828601610fd0565b9150509250929050565b60008060006060848603121561107457600080fd5b600061108286828701610fd0565b935050602061109386828701610fd0565b92505060406110a486828701610fe5565b9150509250925092565b600080604083850312156110c157600080fd5b60006110cf85828601610fd0565b92505060206110e085828601610fe5565b9150509250929050565b6110f381611791565b82525050565b6000611104826116d9565b61110e81856116e4565b935061111e8185602086016117d4565b61112781611897565b840191505092915050565b600061113f6023836116e4565b91507f45524332303a207472616e7366657220746f20746865207a65726f206164647260008301527f65737300000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006111a56022836116e4565b91507f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008301527f63650000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061120b6022836116e4565b91507f45524332303a20617070726f766520746f20746865207a65726f20616464726560008301527f73730000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006112716026836116e4565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206260008301527f616c616e636500000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006112d76028836116e4565b91507f45524332303a207472616e7366657220616d6f756e742065786365656473206160008301527f6c6c6f77616e63650000000000000000000000000000000000000000000000006020830152604082019050919050565b600061133d6021836116e4565b91507f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008301527f73000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006113a36025836116e4565b91507f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008301527f64726573730000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006114096024836116e4565b91507f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008301527f72657373000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061146f6025836116e4565b91507f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008301527f207a65726f0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006114d5601f836116e4565b91507f45524332303a206d696e7420746f20746865207a65726f2061646472657373006000830152602082019050919050565b611511816117bd565b82525050565b611520816117c7565b82525050565b600060208201905061153b60008301846110ea565b92915050565b6000602082019050818103600083015261155b81846110f9565b905092915050565b6000602082019050818103600083015261157c81611132565b9050919050565b6000602082019050818103600083015261159c81611198565b9050919050565b600060208201905081810360008301526115bc816111fe565b9050919050565b600060208201905081810360008301526115dc81611264565b9050919050565b600060208201905081810360008301526115fc816112ca565b9050919050565b6000602082019050818103600083015261161c81611330565b9050919050565b6000602082019050818103600083015261163c81611396565b9050919050565b6000602082019050818103600083015261165c816113fc565b9050919050565b6000602082019050818103600083015261167c81611462565b9050919050565b6000602082019050818103600083015261169c816114c8565b9050919050565b60006020820190506116b86000830184611508565b92915050565b60006020820190506116d36000830184611517565b92915050565b600081519050919050565b600082825260208201905092915050565b6000611700826117bd565b915061170b836117bd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156117405761173f611839565b5b828201905092915050565b6000611756826117bd565b9150611761836117bd565b92508282101561177457611773611839565b5b828203905092915050565b600061178a8261179d565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156117f25780820151818401526020810190506117d7565b83811115611801576000848401525b50505050565b6000600282049050600182168061181f57607f821691505b6020821081141561183357611832611868565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6118b18161177f565b81146118bc57600080fd5b50565b6118c8816117bd565b81146118d357600080fd5b5056fea26469706673582212201e41f70221ac8d0f18c73be33898dbdedd64ac077893da38d712d65fe6638d1864736f6c63430008000033",
  linkReferences: {},
  deployedLinkReferences: {}
};

// node_modules/@usedapp/core/dist/esm/src/constants/abi/index.js
var Interface = utils_exports.Interface;
var MultiCallABI = new Interface(MultiCall_default.abi);
var MultiCall2ABI = new Interface(MultiCall2_default.abi);
var ERC20Interface = new Interface(ERC20_default.abi);
var ERC20MockInterface = new Interface(ERC20Mock_default.abi);

// node_modules/@usedapp/core/dist/esm/src/model/chain/index.js
var chain_exports = {};
__export(chain_exports, {
  Andromeda: () => Andromeda,
  Arbitrum: () => Arbitrum,
  ArbitrumRedditTestnet: () => ArbitrumRedditTestnet,
  ArbitrumRinkeby: () => ArbitrumRinkeby,
  Astar: () => Astar,
  Aurora: () => Aurora,
  AuroraTestnet: () => AuroraTestnet,
  Avalanche: () => Avalanche,
  AvalancheTestnet: () => AvalancheTestnet,
  BSC: () => BSC,
  BSCTestnet: () => BSCTestnet,
  Boba: () => Boba,
  BobaRinkeby: () => BobaRinkeby,
  Cronos: () => Cronos,
  CronosTestnet: () => CronosTestnet,
  Fantom: () => Fantom,
  FantomTestnet: () => FantomTestnet,
  Gnosis: () => Gnosis,
  Goerli: () => Goerli,
  Hardhat: () => Hardhat,
  Harmony: () => Harmony,
  Kovan: () => Kovan,
  Localhost: () => Localhost,
  Mainnet: () => Mainnet,
  MoonbaseAlpha: () => MoonbaseAlpha,
  Moonbeam: () => Moonbeam,
  Moonriver: () => Moonriver,
  Mumbai: () => Mumbai,
  OasisEmerald: () => OasisEmerald,
  OasisEmeraldTestnet: () => OasisEmeraldTestnet,
  Optimism: () => Optimism,
  OptimismKovan: () => OptimismKovan,
  Palm: () => Palm,
  PalmTestnet: () => PalmTestnet,
  Polygon: () => Polygon,
  Rinkeby: () => Rinkeby,
  Ropsten: () => Ropsten,
  Songbird: () => Songbird,
  Stardust: () => Stardust,
  Theta: () => Theta,
  ThetaTestnet: () => ThetaTestnet,
  ThunderCore: () => ThunderCore,
  ThunderCoreTestnet: () => ThunderCoreTestnet,
  Velas: () => Velas,
  VelasTestnet: () => VelasTestnet,
  ZkSyncTestnet: () => ZkSyncTestnet,
  xDai: () => xDai
});

// node_modules/@usedapp/core/dist/esm/src/model/chain/local.js
var Localhost = {
  chainId: 1337,
  chainName: "Localhost",
  isTestChain: true,
  isLocalChain: true,
  multicallAddress: "",
  getExplorerAddressLink: () => "",
  getExplorerTransactionLink: () => ""
};
var Hardhat = {
  chainId: 31337,
  chainName: "Hardhat",
  isTestChain: true,
  isLocalChain: true,
  multicallAddress: "",
  getExplorerAddressLink: () => "",
  getExplorerTransactionLink: () => ""
};

// node_modules/@usedapp/core/dist/esm/src/helpers/chainExplorerLink.js
var getAddressLink = (explorerUrl) => (address) => `${explorerUrl}/address/${address}`;
var getTransactionLink = (explorerUrl) => (txnId) => `${explorerUrl}/tx/${txnId}`;

// node_modules/@usedapp/core/dist/esm/src/model/chain/arbitrum.js
var arbiscanTestnetUrl = "https://testnet.arbiscan.io";
var ArbitrumRinkeby = {
  chainId: 421611,
  chainName: "ArbitrumRinkeby",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0xd27BEFd29F8Da4E187fDAEf663aEDF7742f9F47F",
  rpcUrl: "https://rinkeby.arbitrum.io/rpc",
  blockExplorerUrl: arbiscanTestnetUrl,
  getExplorerAddressLink: getAddressLink(arbiscanTestnetUrl),
  getExplorerTransactionLink: getTransactionLink(arbiscanTestnetUrl)
};
var arbiscanUrl = "https://arbiscan.io";
var Arbitrum = {
  chainId: 42161,
  chainName: "Arbitrum",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0x8a0bd1773139C6609e861B9ab68082587a3cD581",
  multicall2Address: "0x80c7dd17b01855a6d2347444a0fcc36136a314de",
  rpcUrl: "https://arb1.arbitrum.io/rpc",
  blockExplorerUrl: arbiscanUrl,
  getExplorerAddressLink: getAddressLink(arbiscanUrl),
  getExplorerTransactionLink: getTransactionLink(arbiscanUrl)
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/astar.js
var Astar = {
  chainId: 592,
  chainName: "Astar",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0xA129F95CfFe022153a4499f475B537751cd1ceF8",
  multicall2Address: "0x867e9d496F67a5eD0b888120A559DC6430499A7C",
  getExplorerAddressLink: (address) => `https://blockscout.com/astar/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://blockscout.com/astar/tx/${transactionHash}`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/avalanche.js
var avax = {
  name: "Avalanche",
  symbol: "AVAX",
  decimals: 18
};
var avalancheExplorerUrl = "https://snowtrace.io";
var Avalanche = {
  chainId: 43114,
  chainName: "Avalanche",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0xdDCbf776dF3dE60163066A5ddDF2277cB445E0F3",
  rpcUrl: "https://rpc.ankr.com/avalanche",
  blockExplorerUrl: avalancheExplorerUrl,
  nativeCurrency: avax,
  getExplorerAddressLink: getAddressLink(avalancheExplorerUrl),
  getExplorerTransactionLink: getTransactionLink(avalancheExplorerUrl)
};
var testExplorerUrl = "https://testnet.snowtrace.io";
var AvalancheTestnet = {
  chainId: 43113,
  chainName: "AvalancheTestnet",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0xccc75e78Dce6A20bCCa3a30deB23Cb4D23df993a",
  rpcUrl: "https://api.avax-test.network/ext/bc/C/rpc",
  nativeCurrency: avax,
  blockExplorerUrl: testExplorerUrl,
  getExplorerAddressLink: getAddressLink(testExplorerUrl),
  getExplorerTransactionLink: getTransactionLink(testExplorerUrl)
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/bsc.js
var BSC = {
  chainId: 56,
  chainName: "BSC",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0x41263cba59eb80dc200f3e2544eda4ed6a90e76c",
  rpcUrl: "https://bsc-dataseed4.binance.org",
  nativeCurrency: {
    name: "BNB",
    symbol: "BNB",
    decimals: 8
  },
  getExplorerAddressLink: (address) => `https://bscscan.com/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://bscscan.com/tx/${transactionHash}`
};
var BSCTestnet = {
  chainId: 97,
  chainName: "BSCTestnet",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0xae11C5B5f29A6a25e955F0CB8ddCc416f522AF5C",
  getExplorerAddressLink: (address) => `https://testnet.bscscan.com/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://testnet.bscscan.com/tx/${transactionHash}`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/boba.js
var Boba = {
  chainId: 288,
  chainName: "Boba",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0x344696b815742A3E31181207e027e5110e2A0f74",
  rpcUrl: "https://mainnet.boba.network",
  getExplorerAddressLink: (address) => `https://blockexplorer.boba.network/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://blockexplorer.boba.network/tx/${transactionHash}`
};
var BobaRinkeby = {
  chainId: 28,
  chainName: "BobaRinkeby",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0xC8Ad85fF276fbC1aDF627D9dff0AfD8bdc4C3492",
  rpcUrl: "https://rinkeby.boba.network",
  getExplorerAddressLink: (address) => `https://blockexplorer.rinkeby.boba.network/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://blockexplorer.rinkeby.boba.network/tx/${transactionHash}`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/cronos.js
var Cronos = {
  chainId: 25,
  chainName: "Cronos",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0x0fA4d452693F2f45D28c4EC4d20b236C4010dA74",
  getExplorerAddressLink: (address) => `https://cronoscan.com/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://cronoscan.com/tx/${transactionHash}`
};
var CronosTestnet = {
  chainId: 338,
  chainName: "CronosTestnet",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0x6a8c1ba309136D78245f1F0a14790239b71a9577",
  getExplorerAddressLink: (address) => `https://cronos.crypto.org/explorer/testnet3/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://cronos.crypto.org/explorer/testnet3/tx/${transactionHash}`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/fantom.js
var Fantom = {
  chainId: 250,
  chainName: "Fantom",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0xdc85396592f0F466224390771C861EE3957a3ff4",
  getExplorerAddressLink: (address) => `https://ftmscan.com/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://ftmscan.com/tx/${transactionHash}`
};
var FantomTestnet = {
  chainId: 4002,
  chainName: "FantomTestnet",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0xA01917aF773b703717C25C483a619e9218343531",
  getExplorerAddressLink: (address) => `https://testnet.ftmscan.com/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://testnet.ftmscan.com/tx/${transactionHash}`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/harmony.js
var Harmony = {
  chainId: 16666e5,
  chainName: "Harmony",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0xFE4980f62D708c2A84D3929859Ea226340759320",
  getExplorerAddressLink: (address) => `https://explorer.harmony.one/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://explorer.harmony.one/tx/${transactionHash}`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/ethereum.js
var etherscanUrl = "https://etherscan.io";
var ropstenEtherscanUrl = "https://ropsten.etherscan.io";
var rinkebyEtherscanUrl = "https://rinkeby.etherscan.io";
var goerliEtherscanUrl = "https://goerli.etherscan.io";
var kovanEtherscanUrl = "https://kovan.etherscan.io";
var Mainnet = {
  chainId: 1,
  chainName: "Mainnet",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0xeefba1e63905ef1d7acba5a8513c70307c1ce441",
  multicall2Address: "0x5ba1e12693dc8f9c48aad8770482f4739beed696",
  blockExplorerUrl: etherscanUrl,
  getExplorerAddressLink: getAddressLink(etherscanUrl),
  getExplorerTransactionLink: getTransactionLink(etherscanUrl)
};
var Ropsten = {
  chainId: 3,
  chainName: "Ropsten",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0x53c43764255c17bd724f74c4ef150724ac50a3ed",
  multicall2Address: "0x5ba1e12693dc8f9c48aad8770482f4739beed696",
  blockExplorerUrl: ropstenEtherscanUrl,
  getExplorerAddressLink: getAddressLink(ropstenEtherscanUrl),
  getExplorerTransactionLink: getTransactionLink(ropstenEtherscanUrl)
};
var Rinkeby = {
  chainId: 4,
  chainName: "Rinkeby",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0x42ad527de7d4e9d9d011ac45b31d8551f8fe9821",
  multicall2Address: "0x5ba1e12693dc8f9c48aad8770482f4739beed696",
  blockExplorerUrl: rinkebyEtherscanUrl,
  getExplorerAddressLink: getAddressLink(rinkebyEtherscanUrl),
  getExplorerTransactionLink: getTransactionLink(rinkebyEtherscanUrl)
};
var Goerli = {
  chainId: 5,
  chainName: "Goerli",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0x77dca2c955b15e9de4dbbcf1246b4b85b651e50e",
  multicall2Address: "0x5ba1e12693dc8f9c48aad8770482f4739beed696",
  blockExplorerUrl: goerliEtherscanUrl,
  getExplorerAddressLink: getAddressLink(goerliEtherscanUrl),
  getExplorerTransactionLink: getTransactionLink(goerliEtherscanUrl)
};
var Kovan = {
  chainId: 42,
  chainName: "Kovan",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0x2cc8688c5f75e365aaeeb4ea8d6a480405a48d2a",
  multicall2Address: "0x5ba1e12693dc8f9c48aad8770482f4739beed696",
  blockExplorerUrl: kovanEtherscanUrl,
  getExplorerAddressLink: getAddressLink(kovanEtherscanUrl),
  getExplorerTransactionLink: getTransactionLink(kovanEtherscanUrl)
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/metis.js
var Stardust = {
  chainId: 588,
  chainName: "Stardust",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0xaF9D4DC0698d8FD9f41387ecb08D9976079B8086",
  getExplorerAddressLink: (address) => `https://stardust-explorer.metis.io/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://stardust-explorer.metis.io/tx/${transactionHash}`
};
var Andromeda = {
  chainId: 1088,
  chainName: "Andromeda",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0x1a2AFb22B8A90A77a93e80ceA61f89D04e05b796",
  getExplorerAddressLink: (address) => `https://andromeda-explorer.metis.io/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://andromeda-explorer.metis.io/tx/${transactionHash}`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/moonbeam.js
var Moonbeam = {
  chainId: 1284,
  chainName: "Moonbeam",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0x47152C4dCE75C77Bc9E52F5AAa2a20117971C365",
  getExplorerAddressLink: (address) => `https://blockscout.moonbeam.network/address/${address}/transactions`,
  getExplorerTransactionLink: (transactionHash) => `https://blockscout.moonbeam.network/tx/${transactionHash}/internal-transactions`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/moonriver.js
var Moonriver = {
  chainId: 1285,
  chainName: "Moonriver",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0xa9177F8d98DAaB74C24715Ba0A81b73654710523",
  getExplorerAddressLink: (address) => `https://blockscout.moonriver.moonbeam.network/address/${address}/transactions`,
  getExplorerTransactionLink: (transactionHash) => `https://blockscout.moonriver.moonbeam.network/tx/${transactionHash}/internal-transactions`
};
var MoonbaseAlpha = {
  chainId: 1287,
  chainName: "Moonbase Alpha",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0x4E2cfca20580747AdBA58cd677A998f8B261Fc21",
  getExplorerAddressLink: (address) => `https://moonbase.moonscan.io/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://moonbase.moonscan.io/tx/${transactionHash}`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/oasis.js
var OasisEmerald = {
  chainId: 42262,
  chainName: "OasisEmerald",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0xA1513CE1a147BB84E04cD61d877d598C018a460F",
  getExplorerAddressLink: (address) => `https://explorer.emerald.oasis.dev/address/${address}/transactions`,
  getExplorerTransactionLink: (transactionHash) => `https://explorer.emerald.oasis.dev/tx/${transactionHash}/internal-transactions`
};
var OasisEmeraldTestnet = {
  chainId: 42261,
  chainName: "OasisEmeraldTestnet",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0xB2929229096d2ee6850c4d3906ef2d1f1330cdc7",
  getExplorerAddressLink: (address) => `https://testnet.explorer.emerald.oasis.dev/address/${address}/transactions`,
  getExplorerTransactionLink: (transactionHash) => `https://testnet.explorer.emerald.oasis.dev/tx/${transactionHash}/internal-transactions`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/palm.js
var Palm = {
  chainId: 11297108109,
  chainName: "Palm",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0x99a73dfE34578348fb81BD078201C0BA84E9c840",
  getExplorerAddressLink: (address) => `https://explorer.palm.io/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://explorer.palm.io/tx/${transactionHash}`
};
var PalmTestnet = {
  chainId: 11297108099,
  chainName: "Palm Testnet",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0x99a73dfE34578348fb81BD078201C0BA84E9c840",
  getExplorerAddressLink: (address) => `https://explorer.palm-uat.xyz/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://explorer.palm-uat.xyz/tx/${transactionHash}`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/polygon.js
var Polygon = {
  chainId: 137,
  chainName: "Polygon",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0x11ce4B23bD875D7F5C6a31084f55fDe1e9A87507",
  getExplorerAddressLink: (address) => `https://polygonscan.com/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://polygonscan.com/tx/${transactionHash}`
};
var Mumbai = {
  chainId: 80001,
  chainName: "Mumbai",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0x08411ADd0b5AA8ee47563b146743C13b3556c9Cc",
  getExplorerAddressLink: (address) => `https://mumbai.polygonscan.com/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://mumbai.polygonscan.com/tx/${transactionHash}`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/songbird.js
var Songbird = {
  chainId: 19,
  chainName: "Songbird",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0x60351436cf80A31EA6C3B261C784d3C127dBD6f1",
  getExplorerAddressLink: (address) => `https://songbird-explorer.flare.network/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://songbird-explorer.flare.network/tx/${transactionHash}`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/theta.js
var Theta = {
  chainId: 361,
  chainName: "Theta",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0xe2ec58a54f3ab2714eddbae87533793011f1e14e",
  getExplorerAddressLink: (address) => `https://explorer.thetatoken.org/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://explorer.thetatoken.org/tx/${transactionHash}`
};
var ThetaTestnet = {
  chainId: 365,
  chainName: "ThetaTestnet",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0xf822bf2e728e264c58d7618022addd9cbc780350",
  getExplorerAddressLink: (address) => `https://testnet-explorer.thetatoken.org/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://testnet-explorer.thetatoken.org/tx/${transactionHash}`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/thundercore.js
var ThunderCore = {
  chainId: 108,
  chainName: "ThunderCore Mainnet",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0x3017086DeEf56679e267F67F66c4415109b7A97f",
  multicall2Address: "0xd1dC5CF410b227dFEeFEe8D3c1C9DB4FBE66d362",
  getExplorerAddressLink: (address) => `https://viewblock.io/thundercore/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://viewblock.io/thundercore/tx/${transactionHash}`
};
var ThunderCoreTestnet = {
  chainId: 18,
  chainName: "ThunderCore Testnet",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0x7818a6A0fFe134b2aF30850DCE7c86A52eC6AC4F",
  multicall2Address: "0x02C5503dd793cC457a1CE50d2d31a749cb5e9cB5",
  getExplorerAddressLink: (address) => `https://explorer-testnet.thundercore.com/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://explorer-testnet.thundercore.com/tx/${transactionHash}`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/xdai.js
var xDai = {
  chainId: 100,
  chainName: "xDai",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0xb5b692a88bdfc81ca69dcb1d924f59f0413a602a",
  getExplorerAddressLink: (address) => `https://blockscout.com/poa/xdai/address/${address}/transactions`,
  getExplorerTransactionLink: (transactionHash) => `https://blockscout.com/poa/xdai/tx/${transactionHash}/internal-transactions`
};
var Gnosis = Object.assign(Object.assign({}, xDai), { chainName: "Gnosis" });

// node_modules/@usedapp/core/dist/esm/src/model/chain/optimism.js
var testnetExplorerUrl = "https://kovan-optimistic.etherscan.io";
var OptimismKovan = {
  chainId: 69,
  chainName: "OptimismKovan",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0xE71bf4622578c7d1526A88CD3060f03030E99a04",
  rpcUrl: "https://kovan.optimism.io",
  blockExplorerUrl: testnetExplorerUrl,
  getExplorerAddressLink: getAddressLink(testnetExplorerUrl),
  getExplorerTransactionLink: getTransactionLink(testnetExplorerUrl)
};
var optimismExplorerUrl = "https://optimistic.etherscan.io";
var Optimism = {
  chainId: 10,
  chainName: "Optimism",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0x35A6Cdb2C9AD4a45112df4a04147EB07dFA01aB7",
  rpcUrl: "https://mainnet.optimism.io",
  blockExplorerUrl: optimismExplorerUrl,
  getExplorerAddressLink: getAddressLink(optimismExplorerUrl),
  getExplorerTransactionLink: getTransactionLink(optimismExplorerUrl)
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/aurora.js
var auroraExplorerUrl = "https://explorer.mainnet.aurora.dev";
var Aurora = {
  chainId: 1313161554,
  chainName: "Aurora",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0x32b50c286DEFd2932a0247b8bb940b78c063F16c",
  multicall2Address: "0xace58a26b8Db90498eF0330fDC9C2655db0C45E2",
  rpcUrl: "https://mainnet.aurora.dev",
  blockExplorerUrl: auroraExplorerUrl,
  getExplorerAddressLink: getAddressLink(auroraExplorerUrl),
  getExplorerTransactionLink: getTransactionLink(auroraExplorerUrl)
};
var auroraTestnetExplorerUrl = "https://explorer.testnet.aurora.dev";
var AuroraTestnet = {
  chainId: 1313161555,
  chainName: "Aurora Testnet",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0x755E730F28A31079711aB588e3568e70A40F3564",
  rpcUrl: "https://testnet.aurora.dev",
  blockExplorerUrl: auroraTestnetExplorerUrl,
  getExplorerAddressLink: getAddressLink(auroraTestnetExplorerUrl),
  getExplorerTransactionLink: getTransactionLink(auroraTestnetExplorerUrl)
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/velas.js
var Velas = {
  chainId: 106,
  chainName: "Velas Mainnet",
  isTestChain: false,
  isLocalChain: false,
  multicallAddress: "0x55c77eEba2b891c7f940cE4C3d9Fcd6915c12082",
  multicall2Address: "0x324f25e6eEB13D45DF559B7326d631e34Fd5ceDF",
  getExplorerAddressLink: (address) => `https://evmexplorer.velas.com/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://evmexplorer.velas.com/tx/${transactionHash}`
};
var VelasTestnet = {
  chainId: 111,
  chainName: "Velas Testnet",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0x649DEa474f0Ca0FDb276098d1A4c8BA62b4abC83",
  multicall2Address: "0x65f4f071505912dbC9dCCF3a51542374a43D6a5A",
  getExplorerAddressLink: (address) => `https://evmexplorer.testnet.velas.com/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://evmexplorer.testnet.velas.com/tx/${transactionHash}`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/zksync.js
var ZkSyncTestnet = {
  chainId: 280,
  chainName: "zkSync alpha testnet",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0x5014a961801de9a52548068bDac853CE337221e7",
  multicall2Address: "0x32Caf123F6f574035f51532E597125062C0Aa8EE",
  getExplorerAddressLink: (address) => `https://zksync2-testnet.zkscan.io/address/${address}`,
  getExplorerTransactionLink: (transactionHash) => `https://zksync2-testnet.zkscan.io/tx/${transactionHash}`
};

// node_modules/@usedapp/core/dist/esm/src/model/chain/arbitrumReddit.js
var arbitrumRedditscanUrl = "https://testnet.redditspace.com";
var ArbitrumRedditTestnet = {
  chainId: 5391184,
  chainName: "ArbitrumRedditTestnet",
  isTestChain: true,
  isLocalChain: false,
  multicallAddress: "0x722db82dea58c880d03b87885053f206f1b37136",
  multicall2Address: "0xd4d664d419a6a845c98cc366ae1c4b24592bd5ce",
  rpcUrl: "https://testnet.redditspace.com/rpc",
  blockExplorerUrl: arbitrumRedditscanUrl,
  getExplorerAddressLink: getAddressLink(arbitrumRedditscanUrl),
  getExplorerTransactionLink: getTransactionLink(arbitrumRedditscanUrl)
};

// node_modules/@usedapp/core/dist/esm/src/model/formatting.js
var DEFAULT_OPTIONS = {
  decimals: 0,
  thousandSeparator: ",",
  decimalSeparator: ".",
  significantDigits: Infinity,
  useFixedPrecision: false,
  fixedPrecisionDigits: 0,
  prefix: "",
  suffix: ""
};
var INPUT_REGEX = /^\d*$/;
function formatCurrency(options, value) {
  if (!INPUT_REGEX.test(value)) {
    throw new TypeError("Invalid input, decimal string expected.");
  }
  const number = formatNumber(options, value);
  return [options.prefix, number, options.suffix].join("");
}
function formatNumber(options, value) {
  const integer = getIntegerPart(value, options.decimals);
  const thousands = splitThousands(integer, options.thousandSeparator);
  const decimal = getDecimalPart(value, options.decimals);
  const digits = options.useFixedPrecision ? toFixed(decimal, options.fixedPrecisionDigits) : toSignificant(decimal, integer.length, options.significantDigits);
  return joinDecimals(thousands, digits, options.decimalSeparator);
}
function getIntegerPart(value, decimals) {
  if (value.length <= decimals) {
    return "0";
  } else {
    const fragment = value.substring(0, value.length - decimals);
    return stripFrontZeroes(fragment);
  }
}
function stripFrontZeroes(value) {
  const stripped = value.replace(/^0+/, "");
  return stripped || "0";
}
function splitThousands(value, separator) {
  const count = value.length / 3;
  const resultValue = value.split("");
  for (let i = 1; i < count; i++) {
    resultValue.splice(-4 * i + 1, 0, separator);
  }
  return resultValue.join("");
}
function getDecimalPart(value, decimals) {
  if (value.length <= decimals) {
    return value.padStart(decimals, "0");
  } else {
    return value.substring(value.length - decimals);
  }
}
function joinDecimals(integer, decimals, separator) {
  if (!decimals) {
    return integer;
  } else {
    return `${integer}${separator}${decimals}`;
  }
}
function toSignificant(decimal, integerLength, significantDigits) {
  const length = significantDigits - integerLength;
  if (length > decimal.length) {
    return stripEndZeroes(decimal);
  } else {
    return stripEndZeroes(decimal.substring(0, length));
  }
}
function stripEndZeroes(value) {
  return value.replace(/0+$/, "");
}
function toFixed(decimal, fixedPrecisionDigits) {
  if (fixedPrecisionDigits > decimal.length) {
    return decimal.padEnd(fixedPrecisionDigits, "0");
  } else {
    return decimal.substring(0, fixedPrecisionDigits);
  }
}

// node_modules/@usedapp/core/dist/esm/src/model/Currency.js
var Currency = class {
  constructor(name, ticker, decimals, formattingOptions = {}) {
    this.name = name;
    this.ticker = ticker;
    this.decimals = decimals;
    this.formattingOptions = Object.assign(Object.assign(Object.assign({}, DEFAULT_OPTIONS), { decimals }), formattingOptions);
  }
  format(value, overrideOptions = {}) {
    return formatCurrency(Object.assign(Object.assign({}, this.formattingOptions), overrideOptions), value);
  }
};
var FiatCurrency = class extends Currency {
  constructor(name, ticker, decimals = 2, formattingOptions = {}) {
    super(name, ticker, decimals, Object.assign({ useFixedPrecision: true, fixedPrecisionDigits: decimals }, formattingOptions));
  }
};
var NativeCurrency = class extends Currency {
  constructor(name, ticker, chainId, decimals = 18, formattingOptions = {}) {
    super(name, ticker, decimals, Object.assign({ suffix: ` ${ticker}`, significantDigits: 6 }, formattingOptions));
    this.chainId = chainId;
  }
};
var Token = class extends Currency {
  constructor(name, ticker, chainId, address, decimals = 18, formattingOptions = {}) {
    super(name, ticker, decimals, Object.assign({ suffix: ` ${ticker}`, significantDigits: 6 }, formattingOptions));
    this.chainId = chainId;
    this.address = address;
  }
};

// node_modules/@usedapp/core/dist/esm/src/model/CurrencyValue.js
var CurrencyValue = class {
  constructor(currency, value) {
    this.currency = currency;
    this.value = value;
  }
  static fromString(currency, value) {
    return new CurrencyValue(currency, BigNumber.from(value));
  }
  static zero(currency) {
    return new CurrencyValue(currency, BigNumber.from(0));
  }
  toString() {
    return this.value.toString();
  }
  format(overrideOptions = {}) {
    return this.currency.format(this.value.toString(), overrideOptions);
  }
  checkCurrency(other) {
    if (this.currency !== other.currency) {
      throw new TypeError(`Currency mismatch ${this.currency.ticker} != ${other.currency.ticker}`);
    }
  }
  map(fn) {
    return new CurrencyValue(this.currency, fn(this.value));
  }
  add(other) {
    this.checkCurrency(other);
    return this.map((x) => x.add(other.value));
  }
  sub(other) {
    this.checkCurrency(other);
    return this.map((x) => x.sub(other.value));
  }
  mul(value) {
    return this.map((x) => x.mul(value));
  }
  div(value) {
    return this.map((x) => x.div(value));
  }
  mod(value) {
    return this.map((x) => x.mod(value));
  }
  equals(other) {
    return this.currency === other.currency && this.value.eq(other.value);
  }
  lt(other) {
    this.checkCurrency(other);
    return this.value.lt(other.value);
  }
  lte(other) {
    this.checkCurrency(other);
    return this.value.lte(other.value);
  }
  gt(other) {
    this.checkCurrency(other);
    return this.value.gt(other.value);
  }
  gte(other) {
    this.checkCurrency(other);
    return this.value.gte(other.value);
  }
  isZero() {
    return this.value.isZero();
  }
};

// node_modules/@usedapp/core/dist/esm/src/model/TransactionStatus.js
function transactionErrored(transaction) {
  return "errorMessage" in transaction;
}

// node_modules/@usedapp/core/dist/esm/src/constants/chainId.js
var DEFAULT_SUPPORTED_CHAINS = [
  Localhost,
  Hardhat,
  Avalanche,
  AvalancheTestnet,
  Arbitrum,
  ArbitrumRinkeby,
  Aurora,
  AuroraTestnet,
  Mainnet,
  Ropsten,
  Rinkeby,
  Goerli,
  Kovan,
  BSC,
  BSCTestnet,
  Cronos,
  CronosTestnet,
  Fantom,
  FantomTestnet,
  Gnosis,
  Harmony,
  Andromeda,
  Stardust,
  Moonriver,
  MoonbaseAlpha,
  Moonbeam,
  Palm,
  PalmTestnet,
  Polygon,
  Mumbai,
  OasisEmerald,
  OasisEmeraldTestnet,
  Songbird,
  Theta,
  ThetaTestnet,
  ThunderCore,
  ThunderCoreTestnet,
  OptimismKovan,
  Optimism,
  Velas,
  VelasTestnet,
  ZkSyncTestnet,
  ArbitrumRedditTestnet
];
var ChainId;
(function(ChainId2) {
  ChainId2[ChainId2["Mainnet"] = 1] = "Mainnet";
  ChainId2[ChainId2["Ropsten"] = 3] = "Ropsten";
  ChainId2[ChainId2["Rinkeby"] = 4] = "Rinkeby";
  ChainId2[ChainId2["Goerli"] = 5] = "Goerli";
  ChainId2[ChainId2["ThunderCoreTestnet"] = 18] = "ThunderCoreTestnet";
  ChainId2[ChainId2["Cronos"] = 25] = "Cronos";
  ChainId2[ChainId2["CronosTestnet"] = 338] = "CronosTestnet";
  ChainId2[ChainId2["Kovan"] = 42] = "Kovan";
  ChainId2[ChainId2["BSC"] = 56] = "BSC";
  ChainId2[ChainId2["BSCTestnet"] = 97] = "BSCTestnet";
  ChainId2[ChainId2["xDai"] = 100] = "xDai";
  ChainId2[ChainId2["Gnosis"] = 100] = "Gnosis";
  ChainId2[ChainId2["ThunderCore"] = 108] = "ThunderCore";
  ChainId2[ChainId2["Polygon"] = 137] = "Polygon";
  ChainId2[ChainId2["Theta"] = 361] = "Theta";
  ChainId2[ChainId2["ThetaTestnet"] = 365] = "ThetaTestnet";
  ChainId2[ChainId2["Moonriver"] = 1285] = "Moonriver";
  ChainId2[ChainId2["Moonbeam"] = 1284] = "Moonbeam";
  ChainId2[ChainId2["Mumbai"] = 80001] = "Mumbai";
  ChainId2[ChainId2["Harmony"] = 16666e5] = "Harmony";
  ChainId2[ChainId2["Palm"] = 11297108109] = "Palm";
  ChainId2[ChainId2["PalmTestnet"] = 11297108099] = "PalmTestnet";
  ChainId2[ChainId2["Localhost"] = 1337] = "Localhost";
  ChainId2[ChainId2["Hardhat"] = 31337] = "Hardhat";
  ChainId2[ChainId2["Fantom"] = 250] = "Fantom";
  ChainId2[ChainId2["FantomTestnet"] = 4002] = "FantomTestnet";
  ChainId2[ChainId2["Avalanche"] = 43114] = "Avalanche";
  ChainId2[ChainId2["AvalancheTestnet"] = 43113] = "AvalancheTestnet";
  ChainId2[ChainId2["Songbird"] = 19] = "Songbird";
  ChainId2[ChainId2["MoonbaseAlpha"] = 1287] = "MoonbaseAlpha";
  ChainId2[ChainId2["OasisEmerald"] = 42262] = "OasisEmerald";
  ChainId2[ChainId2["OasisEmeraldTestnet"] = 42261] = "OasisEmeraldTestnet";
  ChainId2[ChainId2["Stardust"] = 588] = "Stardust";
  ChainId2[ChainId2["Andromeda"] = 1088] = "Andromeda";
  ChainId2[ChainId2["OptimismKovan"] = 69] = "OptimismKovan";
  ChainId2[ChainId2["Optimism"] = 10] = "Optimism";
  ChainId2[ChainId2["Arbitrum"] = 42161] = "Arbitrum";
  ChainId2[ChainId2["ArbitrumRinkeby"] = 421611] = "ArbitrumRinkeby";
  ChainId2[ChainId2["Aurora"] = 1313161554] = "Aurora";
  ChainId2[ChainId2["AuroraTestnet"] = 1313161555] = "AuroraTestnet";
  ChainId2[ChainId2["Velas"] = 106] = "Velas";
  ChainId2[ChainId2["VelasTestnet"] = 111] = "VelasTestnet";
  ChainId2[ChainId2["ZkSyncTestnet"] = 280] = "ZkSyncTestnet";
  ChainId2[ChainId2["ArbitrumRedditTestnet"] = 5391184] = "ArbitrumRedditTestnet";
})(ChainId || (ChainId = {}));

// node_modules/@usedapp/core/dist/esm/src/constants/currencies.js
var Ether = new NativeCurrency("Ether", "ETH", Mainnet.chainId);
var Dai = new Token("Dai", "DAI", Mainnet.chainId, "0x6B175474E89094C44Da98b954EedeAC495271d0F");
var KovanEther = new NativeCurrency("Kovan Ether", "KETH", Kovan.chainId);
var KovanDai = new Token("Dai", "DAI", Kovan.chainId, "0x4f96fe3b7a6cf9725f59d353f723c1bdb64ca6aa");
var BNB = new NativeCurrency("Binance Coin", "BNB", BSC.chainId);
var BUSD = new Token("Binance USD", "BUSD", BSC.chainId, "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56");
var TestBNB = new NativeCurrency("Test Binance Coin", "TBNB", BSCTestnet.chainId);
var TestBUSD = new Token("Test Binance USD", "TBUSD", BSCTestnet.chainId, "0x8301F2213c0eeD49a7E28Ae4c3e91722919B8B47");
var NATIVE_CURRENCY = {
  [Mainnet.chainId]: Ether,
  [Kovan.chainId]: KovanEther,
  [BSC.chainId]: BNB,
  [BSCTestnet.chainId]: TestBNB
};

// node_modules/@usedapp/core/dist/esm/src/providers/DAppProvider.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var import_react43 = __toESM(require_react());

// node_modules/@usedapp/core/dist/esm/src/providers/config/context.js
var import_react = __toESM(require_react());

// node_modules/@usedapp/core/dist/esm/src/model/config/default.js
var DEFAULT_CONFIG = {
  pollingInterval: 15e3,
  supportedChains: void 0,
  networks: DEFAULT_SUPPORTED_CHAINS,
  notifications: {
    checkInterval: 500,
    expirationPeriod: 5e3
  },
  localStorage: {
    transactionPath: "transactions"
  },
  autoConnect: true,
  multicallVersion: 1
};

// node_modules/@usedapp/core/dist/esm/src/providers/config/context.js
var ConfigContext = (0, import_react.createContext)({
  config: DEFAULT_CONFIG,
  updateConfig: () => void 0
});

// node_modules/@usedapp/core/dist/esm/src/providers/config/provider.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react2 = __toESM(require_react());
var import_lodash2 = __toESM(require_lodash());

// node_modules/@usedapp/core/dist/esm/src/providers/config/reducer.js
var import_lodash = __toESM(require_lodash2());
function configReducer(state, action) {
  return (0, import_lodash.default)({}, state, action);
}

// node_modules/@usedapp/core/dist/esm/src/providers/config/provider.js
var noUndefined = (x) => x !== void 0;
function ConfigProvider({ config, children }) {
  var _a;
  const configWithDefaults = Object.assign(Object.assign(Object.assign({}, DEFAULT_CONFIG), (0, import_lodash2.default)(config, noUndefined)), { bufferGasLimitPercentage: void 0, gasLimitBufferPercentage: (_a = config.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : config.bufferGasLimitPercentage, notifications: Object.assign(Object.assign({}, DEFAULT_CONFIG.notifications), (0, import_lodash2.default)(config.notifications, noUndefined)) });
  const [reducedConfig, dispatch] = (0, import_react2.useReducer)(configReducer, configWithDefaults);
  return (0, import_jsx_runtime.jsx)(ConfigContext.Provider, { value: { config: reducedConfig, updateConfig: dispatch }, children });
}

// node_modules/@usedapp/core/dist/esm/src/providers/blockNumber/blockNumber/context.js
var import_react3 = __toESM(require_react());
var BlockNumberContext = (0, import_react3.createContext)(void 0);

// node_modules/@usedapp/core/dist/esm/src/providers/blockNumber/blockNumber/provider.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var import_react32 = __toESM(require_react());

// node_modules/@usedapp/core/dist/esm/src/providers/blockNumber/common/reducer.js
function blockNumberReducer(state = {}, action) {
  const current = state[action.chainId];
  if (!current || action.blockNumber > current) {
    return Object.assign(Object.assign({}, state), { [action.chainId]: action.blockNumber });
  }
  return state;
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useChainState.js
var import_react4 = __toESM(require_react());

// node_modules/@usedapp/core/dist/esm/src/hooks/useChainId.js
function useChainId(opts = {}) {
  var _a, _b, _c;
  const { network } = useNetwork();
  const { readOnlyChainId } = useConfig();
  return (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.queryParams) === null || _a === void 0 ? void 0 : _a.chainId) !== null && _b !== void 0 ? _b : network.chainId) !== null && _c !== void 0 ? _c : readOnlyChainId;
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useChainState.js
function useChainState(queryParams = {}) {
  const multiChainState = (0, import_react4.useContext)(MultiChainStatesContext);
  const chainId = useChainId({ queryParams });
  if (chainId === void 0) {
    return void 0;
  }
  return Object.assign(Object.assign({}, multiChainState.chains[chainId]), { dispatchCalls: multiChainState.dispatchCalls });
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useMulticallAddress.js
function useMulticallAddress(queryParams = {}) {
  var _a;
  return (_a = useChainState(queryParams)) === null || _a === void 0 ? void 0 : _a.multicallAddress;
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useRawCalls.js
var import_react5 = __toESM(require_react());
function useRawCalls(calls) {
  const { dispatchCalls, chains } = (0, import_react5.useContext)(MultiChainStatesContext);
  (0, import_react5.useEffect)(() => {
    const filteredCalls = calls.filter(Boolean);
    dispatchCalls({ type: "ADD_CALLS", calls: filteredCalls });
    return () => dispatchCalls({ type: "REMOVE_CALLS", calls: filteredCalls });
  }, [JSON.stringify(calls), dispatchCalls]);
  return (0, import_react5.useMemo)(() => calls.map((call) => {
    return call ? extractCallResult(chains, call) : void 0;
  }), [JSON.stringify(calls), chains]);
}
function useRawCall(call) {
  return useRawCalls([call])[0];
}
function extractCallResult(chains, call) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
  const chainId = call.chainId;
  if (chainId !== void 0) {
    const rawCallResult = (_d = (_c = (_b = (_a = chains[chainId]) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.state) === null || _c === void 0 ? void 0 : _c[call.address.toLowerCase()]) === null || _d === void 0 ? void 0 : _d[call.data];
    if (rawCallResult) {
      return rawCallResult;
    }
    const error = (_f = (_e = chains[chainId]) === null || _e === void 0 ? void 0 : _e.value) === null || _f === void 0 ? void 0 : _f.error;
    if (error) {
      const defaultErrorMessage = "An error occurred";
      const errorMessage = (_q = (_p = (_m = (_l = (_j = (_h = (_g = error.error) === null || _g === void 0 ? void 0 : _g.data) === null || _h === void 0 ? void 0 : _h.message) !== null && _j !== void 0 ? _j : (_k = error.error) === null || _k === void 0 ? void 0 : _k.message) !== null && _l !== void 0 ? _l : error.reason) !== null && _m !== void 0 ? _m : (_o = error.data) === null || _o === void 0 ? void 0 : _o.message) !== null && _p !== void 0 ? _p : error.message) !== null && _q !== void 0 ? _q : defaultErrorMessage;
      const value = new utils_exports.Interface(["function Error(string)"]).encodeFunctionData("Error", [errorMessage]);
      return {
        success: false,
        value
      };
    }
  }
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useConfig.js
var import_react6 = __toESM(require_react());

// node_modules/@usedapp/core/dist/esm/src/helpers/chain.js
var getChainById = (chainId) => DEFAULT_SUPPORTED_CHAINS.find((network) => network.chainId === chainId);
var deprecationWarning = (methodName) => console.warn(`${methodName} is deprecated, can call with Chain directly`);
var getExplorerAddressLink = (address, chainId) => {
  var _a;
  deprecationWarning("getExplorerAddressLink");
  return ((_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.getExplorerAddressLink(address)) || "";
};
var getExplorerTransactionLink = (transactionHash, chainId) => {
  var _a;
  deprecationWarning("getExplorerTransactionLink");
  return ((_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.getExplorerTransactionLink(transactionHash)) || "";
};
var getChainName = (chainId) => {
  var _a;
  deprecationWarning("getChainName");
  return ((_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.chainName) || "";
};
var isTestChain = (chainId) => {
  var _a;
  deprecationWarning("isTestChain");
  return ((_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.isTestChain) || false;
};
var isLocalChain = (chainId) => {
  var _a;
  deprecationWarning("isLocalChain");
  return ((_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.isLocalChain) || false;
};

// node_modules/@usedapp/core/dist/esm/src/helpers/calls.js
function warnOnInvalidCall(call) {
  if (!call) {
    return;
  }
  const { contract, method, args } = call;
  console.warn(`Invalid contract call: address=${contract.address} method=${method} args=${args}`);
}
function encodeCallData(call, chainId, queryParams = {}) {
  var _a;
  if (!call) {
    return void 0;
  }
  const { contract, method, args } = call;
  if (!contract.address || !method) {
    warnOnInvalidCall(call);
    return void 0;
  }
  try {
    const isStatic = (_a = queryParams.isStatic) !== null && _a !== void 0 ? _a : queryParams.refresh === "never";
    const refreshPerBlocks = typeof queryParams.refresh === "number" ? queryParams.refresh : void 0;
    return {
      address: contract.address,
      data: contract.interface.encodeFunctionData(method, args),
      chainId,
      isStatic,
      refreshPerBlocks
    };
  } catch (_b) {
    warnOnInvalidCall(call);
    return void 0;
  }
}
function getUniqueActiveCalls(requests) {
  const unique = [];
  const used = {};
  for (const request of requests) {
    if (!used[`${request.address.toLowerCase()}${request.data}${request.chainId}`]) {
      unique.push(request);
      used[`${request.address.toLowerCase()}${request.data}${request.chainId}`] = true;
    }
  }
  return unique;
}
function getCallsForUpdate(requests, options) {
  const callsForUpdate = [];
  for (const request of requests) {
    if (options) {
      if (options.chainId && options.chainId !== request.chainId) {
        continue;
      }
      if (request.isStatic && request.lastUpdatedBlockNumber !== void 0) {
        continue;
      }
      const currentBlock = options.blockNumber;
      if (currentBlock && request.lastUpdatedBlockNumber && request.refreshPerBlocks) {
        if (currentBlock < request.lastUpdatedBlockNumber + request.refreshPerBlocks) {
          continue;
        }
      }
    }
    callsForUpdate.push(request);
  }
  return callsForUpdate;
}
function decodeCallResult(call, result) {
  if (!result || !call) {
    return void 0;
  }
  const { value, success } = result;
  try {
    if (success) {
      return {
        value: call.contract.interface.decodeFunctionResult(call.method, value),
        error: void 0
      };
    } else {
      const errorMessage = new utils_exports.Interface(["function Error(string)"]).decodeFunctionData("Error", value)[0];
      return {
        value: void 0,
        error: new Error(errorMessage)
      };
    }
  } catch (error) {
    return {
      value: void 0,
      error
    };
  }
}

// node_modules/@usedapp/core/dist/esm/src/helpers/common.js
function shortenString(str) {
  return str.substring(0, 6) + "..." + str.substring(str.length - 4);
}

// node_modules/@usedapp/core/dist/esm/src/helpers/address.js
function shortenAddress(address) {
  try {
    const formattedAddress = utils_exports.getAddress(address);
    return shortenString(formattedAddress);
  } catch (_a) {
    throw new TypeError("Invalid input, address can't be parsed");
  }
}
function shortenIfAddress(address) {
  if (typeof address === "string" && address.length > 0) {
    return shortenAddress(address);
  }
  return "";
}
function compareAddress(firstAddress, secondAddress) {
  try {
    const parsedFirstAddress = BigNumber.from(firstAddress);
    const parsedSecondAddress = BigNumber.from(secondAddress);
    if (parsedFirstAddress.gt(parsedSecondAddress)) {
      return 1;
    }
    if (parsedFirstAddress.lt(parsedSecondAddress)) {
      return -1;
    }
    return 0;
  } catch (_a) {
    throw new TypeError("Invalid input, address can't be parsed");
  }
}
function addressEqual(firstAddress, secondAddress) {
  try {
    return utils_exports.getAddress(firstAddress) === utils_exports.getAddress(secondAddress);
  } catch (_a) {
    throw new TypeError("Invalid input, address can't be parsed");
  }
}

// node_modules/@usedapp/core/dist/esm/src/helpers/transaction.js
function shortenTransactionHash(transactionHash) {
  if (transactionHash.length < 10) {
    throw new TypeError("Invalid input, transaction hash need to have at least 10 characters");
  }
  return shortenString(transactionHash);
}
function shortenIfTransactionHash(transactionHash) {
  if (typeof transactionHash === "string" && transactionHash.length > 0) {
    return shortenTransactionHash(transactionHash);
  }
  return "";
}

// node_modules/@usedapp/core/dist/esm/src/helpers/getChainMeta.js
function getChainMeta(chainId) {
  const chain = Object.values(chain_exports).find((chain2) => chain2.chainId === chainId);
  if (!chain) {
    throw new Error(`Chain ${chainId} does not exist`);
  }
  return chain;
}

// node_modules/@usedapp/core/dist/esm/src/helpers/injectedProvider.js
var import_detect_provider = __toESM(require_dist());
var GET_METAMASK_LINK = "https://metamask.io/download.html";
async function getInjectedProvider(getPollingInterval) {
  var _a;
  if (!window.ethereum) {
    window.open(GET_METAMASK_LINK);
    return void 0;
  }
  const injectedProviders = (window === null || window === void 0 ? void 0 : window.ethereum).providers || [];
  const injectedProvider = (_a = injectedProviders.find((provider2) => {
    var _a2;
    return (_a2 = provider2.isMetaMask) !== null && _a2 !== void 0 ? _a2 : false;
  })) !== null && _a !== void 0 ? _a : await (0, import_detect_provider.default)();
  if (!injectedProvider) {
    window.open(GET_METAMASK_LINK);
    return void 0;
  }
  const provider = new lib_exports.Web3Provider(injectedProvider, "any");
  const chainId = await provider.send("eth_chainId", []);
  provider.pollingInterval = getPollingInterval(chainId);
  return provider;
}

// node_modules/@usedapp/core/dist/esm/src/helpers/eip1193.js
function subscribeToProviderEvents(provider, onUpdate, onDisconnect, onChainChanged) {
  if (provider === null || provider === void 0 ? void 0 : provider.on) {
    const onConnectListener = (info) => {
      if (info === null || info === void 0 ? void 0 : info.chainId) {
        onUpdate({ chainId: Number(info.chainId) });
      }
    };
    provider.on("connect", onConnectListener);
    const onDisconnectListener = (error) => {
      onDisconnect(new Error(error));
    };
    provider.on("disconnect", onDisconnectListener);
    const onChainChangedListener = (chainId) => {
      onChainChanged === null || onChainChanged === void 0 ? void 0 : onChainChanged(Number(chainId));
      onUpdate({ chainId: Number(chainId) });
    };
    provider.on("chainChanged", onChainChangedListener);
    const onAccountsChangedListener = (accounts) => {
      onUpdate({ accounts });
    };
    provider.on("accountsChanged", onAccountsChangedListener);
    return () => {
      provider.removeListener("connect", onConnectListener);
      provider.removeListener("disconnect", onDisconnectListener);
      provider.removeListener("chainChanged", onChainChangedListener);
      provider.removeListener("accountsChanged", onAccountsChangedListener);
    };
  }
  return () => void 0;
}

// node_modules/@usedapp/core/dist/esm/src/helpers/logs.js
function warnOnInvalidFilter(filter) {
  if (!filter) {
    return;
  }
  const { contract, event, args } = filter;
  console.warn(`Invalid contract filter: address=${contract.address} event=${event} args=${args}`);
}
function encodeFilterData(filter, fromBlock, toBlock, blockHash) {
  if (!filter) {
    return void 0;
  }
  const { contract, event, args } = filter;
  if (!contract.address || !event) {
    warnOnInvalidFilter(filter);
    return void 0;
  }
  try {
    const encodedTopics = contract.interface.encodeFilterTopics(event, args);
    if (blockHash) {
      return {
        address: contract.address,
        topics: encodedTopics,
        blockHash
      };
    } else {
      return {
        address: contract.address,
        topics: encodedTopics,
        fromBlock: fromBlock !== null && fromBlock !== void 0 ? fromBlock : 0,
        toBlock: toBlock !== null && toBlock !== void 0 ? toBlock : "latest"
      };
    }
  } catch (e) {
    if (e instanceof Error) {
      return e;
    } else {
      warnOnInvalidFilter(filter);
      return void 0;
    }
  }
}
function decodeLogs(filter, result) {
  if (!result || !filter) {
    return void 0;
  }
  try {
    if (result instanceof Error) {
      return {
        value: void 0,
        error: result
      };
    }
    const decodedLogs = [];
    for (const log of result) {
      const data = filter.contract.interface.decodeEventLog(filter.event, log.data, log.topics);
      decodedLogs.push({
        data,
        blockNumber: log.blockNumber,
        blockHash: log.blockHash,
        transactionIndex: log.transactionIndex,
        transactionHash: log.transactionHash,
        removed: log.removed
      });
    }
    return {
      value: decodedLogs,
      error: void 0
    };
  } catch (error) {
    return {
      value: void 0,
      error
    };
  }
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useConfig.js
var validConfigs = (configs) => {
  if (!(configs === null || configs === void 0 ? void 0 : configs.networks) || (configs === null || configs === void 0 ? void 0 : configs.networks.length) === 0) {
    console.warn("No networks or supportedChain configured");
  }
  return configs;
};
function useConfig() {
  var _a;
  const { config } = (0, import_react6.useContext)(ConfigContext);
  if (config.supportedChains) {
    console.warn("supportedChain is deprecated, please pass networks instead");
    const networks = (_a = config.supportedChains) === null || _a === void 0 ? void 0 : _a.map((chainId) => getChainById(chainId));
    return validConfigs(Object.assign(Object.assign({}, config), { networks }));
  }
  return validConfigs(config);
}
function useUpdateConfig() {
  const { updateConfig } = (0, import_react6.useContext)(ConfigContext);
  return updateConfig;
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useBlockMeta.js
var GET_CURRENT_BLOCK_TIMESTAMP_CALL = MultiCallABI.encodeFunctionData("getCurrentBlockTimestamp", []);
var GET_CURRENT_BLOCK_DIFFICULTY_CALL = MultiCallABI.encodeFunctionData("getCurrentBlockDifficulty", []);
function useBlockMeta(queryParams = {}) {
  var _a, _b;
  const chainId = useChainId({ queryParams });
  const { refresh: configRefresh } = useConfig();
  const address = useMulticallAddress(queryParams);
  const refresh = (_a = queryParams.refresh) !== null && _a !== void 0 ? _a : configRefresh;
  const isStatic = (_b = queryParams.isStatic) !== null && _b !== void 0 ? _b : refresh === "never";
  const refreshPerBlocks = typeof refresh === "number" ? refresh : void 0;
  const timestamp = useRawCall(address && chainId !== void 0 && {
    address,
    data: GET_CURRENT_BLOCK_TIMESTAMP_CALL,
    chainId,
    isStatic,
    refreshPerBlocks
  });
  const difficulty = useRawCall(address && chainId !== void 0 && {
    address,
    data: GET_CURRENT_BLOCK_DIFFICULTY_CALL,
    chainId,
    isStatic,
    refreshPerBlocks
  });
  return {
    timestamp: timestamp !== void 0 ? new Date(BigNumber.from(timestamp.value).mul(1e3).toNumber()) : void 0,
    difficulty: difficulty !== void 0 ? BigNumber.from(difficulty.value) : void 0
  };
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useBlockNumber.js
var import_react7 = __toESM(require_react());
function useBlockNumber() {
  return (0, import_react7.useContext)(BlockNumberContext);
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useBlockNumbers.js
var import_react8 = __toESM(require_react());
function useBlockNumbers() {
  return (0, import_react8.useContext)(BlockNumbersContext);
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useChainCalls.js
function useChainCalls(calls) {
  const results = useRawCalls(calls);
  return results.map((result) => result === null || result === void 0 ? void 0 : result.value);
}
function useChainCall(call) {
  return useChainCalls([call])[0];
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useDebounce.js
var import_react9 = __toESM(require_react());
function useDebounce(value, delay) {
  const [debouncedValue, setDebouncedValue] = (0, import_react9.useState)(value);
  (0, import_react9.useEffect)(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);
  return debouncedValue;
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useDebouncePair.js
var import_react10 = __toESM(require_react());
function useDebouncePair(first, second, delay) {
  const [debouncedValue, setDebouncedValue] = (0, import_react10.useState)([first, second]);
  (0, import_react10.useEffect)(() => {
    const handler = setTimeout(() => {
      setDebouncedValue([first, second]);
    }, delay);
    return () => {
      clearTimeout(handler);
    };
  }, [first, second, delay]);
  return debouncedValue;
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useEthers.js
var import_utils = __toESM(require_utils());

// node_modules/@usedapp/core/dist/esm/src/helpers/getAddNetworkParams.js
var getAddNetworkParams = (chain) => ({
  chainId: `0x${chain.chainId.toString(16)}`,
  chainName: chain.chainName,
  rpcUrls: [chain.rpcUrl],
  blockExplorerUrls: chain.blockExplorerUrl ? [chain.blockExplorerUrl] : void 0,
  nativeCurrency: chain.nativeCurrency
});

// node_modules/@usedapp/core/dist/esm/src/helpers/validateArgument.js
function validateArguments(args, assertions) {
  for (const key of Object.getOwnPropertyNames(args)) {
    if (typeof args[key] !== assertions[key]) {
      throw new Error(`Expected "${key}" to be of type "${assertions[key]}", got "${args[key]}" instead.`);
    }
  }
}

// node_modules/@usedapp/core/dist/esm/src/providers/network/network/context.js
var import_react11 = __toESM(require_react());
var NetworkContext = (0, import_react11.createContext)({
  network: {
    provider: void 0,
    chainId: ChainId.Mainnet,
    accounts: [],
    errors: []
  },
  update: () => void 0,
  reportError: () => void 0,
  activate: async () => void 0,
  deactivate: () => void 0,
  activateBrowserWallet: () => void 0,
  isLoading: true
});
function useNetwork() {
  return (0, import_react11.useContext)(NetworkContext);
}

// node_modules/@usedapp/core/dist/esm/src/providers/network/network/provider.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_react12 = __toESM(require_react());

// node_modules/@usedapp/core/dist/esm/src/providers/network/network/reducer.js
var defaultNetworkState = {
  provider: void 0,
  chainId: void 0,
  accounts: [],
  errors: []
};
function networkReducer(prevState, actions) {
  switch (actions.type) {
    case "UPDATE_NETWORK":
      return Object.assign(Object.assign({}, prevState), actions.network);
    case "ADD_ERROR":
      return Object.assign(Object.assign({}, prevState), { errors: [...prevState.errors, actions.error] });
    default:
      return prevState;
  }
}

// node_modules/@usedapp/core/dist/esm/src/providers/network/network/provider.js
var import_detect_provider2 = __toESM(require_dist());
var Provider = lib_exports.Provider;
var Web3Provider = lib_exports.Web3Provider;
async function tryToGetAccount(provider) {
  try {
    return await provider.getSigner().getAddress();
  } catch (err) {
    if (err.code === "UNSUPPORTED_OPERATION") {
      return void 0;
    }
    throw err;
  }
}
function NetworkProvider({ children, providerOverride }) {
  const { autoConnect, pollingInterval, noMetamaskDeactivate, pollingIntervals } = useConfig();
  const [network, dispatch] = (0, import_react12.useReducer)(networkReducer, defaultNetworkState);
  const [onUnsubscribe, setOnUnsubscribe] = (0, import_react12.useState)(() => () => void 0);
  const [shouldConnectMetamask, setShouldConnectMetamask] = useLocalStorage("shouldConnectMetamask");
  const [isLoading, setLoading] = (0, import_react12.useState)(false);
  const getPollingInterval = (0, import_react12.useCallback)((chainId) => {
    var _a;
    return (_a = pollingIntervals === null || pollingIntervals === void 0 ? void 0 : pollingIntervals[chainId]) !== null && _a !== void 0 ? _a : pollingInterval;
  }, [
    pollingInterval,
    pollingIntervals
  ]);
  const activateBrowserWallet = (0, import_react12.useCallback)(async () => {
    setLoading(true);
    const injectedProvider = await getInjectedProvider(getPollingInterval);
    if (!injectedProvider) {
      reportError(new Error("No injected provider available"));
      setLoading(false);
      console.error("No injected provider available");
      return;
    }
    try {
      await injectedProvider.send("eth_requestAccounts", []);
      setShouldConnectMetamask(true);
    } catch (err) {
      reportError(err);
      setShouldConnectMetamask(false);
      throw err;
    } finally {
      setLoading(false);
    }
    return activate(injectedProvider);
  }, []);
  (0, import_react12.useEffect)(() => {
    if (providerOverride) {
      void activate(providerOverride);
    }
  }, [providerOverride]);
  const update = (0, import_react12.useCallback)((newNetwork) => {
    dispatch({ type: "UPDATE_NETWORK", network: newNetwork });
  }, [network]);
  const reportError = (0, import_react12.useCallback)((error) => {
    console.error(error);
    dispatch({ type: "ADD_ERROR", error });
  }, []);
  const deactivate = (0, import_react12.useCallback)(() => {
    setShouldConnectMetamask(false);
    update({
      accounts: []
    });
  }, []);
  const onDisconnect = (0, import_react12.useCallback)((provider) => (error) => {
    const isMetaMask = provider.provider.isMetaMask;
    if (!noMetamaskDeactivate || !isMetaMask) {
      reportError(error);
      deactivate();
    }
  }, []);
  (0, import_react12.useEffect)(() => {
    setTimeout(async () => {
      var _a, _b, _c;
      try {
        if (shouldConnectMetamask && autoConnect && !providerOverride) {
          await (0, import_detect_provider2.default)();
          if (shouldConnectMetamask && ((_c = (_b = (_a = window.ethereum) === null || _a === void 0 ? void 0 : _a._state) === null || _b === void 0 ? void 0 : _b.accounts) === null || _c === void 0 ? void 0 : _c.length) === 0) {
            return;
          }
          await activateBrowserWallet();
        }
      } catch (err) {
        console.warn(err);
      }
    });
  }, [shouldConnectMetamask, autoConnect, providerOverride]);
  const activate = (0, import_react12.useCallback)(async (provider) => {
    var _a;
    const wrappedProvider = Provider.isProvider(provider) ? provider : new Web3Provider(provider);
    try {
      setLoading(true);
      const account = await tryToGetAccount(wrappedProvider);
      const chainId = (_a = await wrappedProvider.getNetwork()) === null || _a === void 0 ? void 0 : _a.chainId;
      onUnsubscribe();
      const clearSubscriptions = subscribeToProviderEvents(wrappedProvider.provider, update, onDisconnect(wrappedProvider), (chainId2) => {
        wrappedProvider.pollingInterval = getPollingInterval(chainId2);
      });
      setOnUnsubscribe(() => clearSubscriptions);
      update({
        provider: wrappedProvider,
        chainId,
        accounts: account ? [account] : []
      });
    } catch (err) {
      reportError(err);
      throw err;
    } finally {
      setLoading(false);
    }
  }, [onUnsubscribe]);
  return (0, import_jsx_runtime2.jsx)(NetworkContext.Provider, { value: { network, update, activate, deactivate, reportError, activateBrowserWallet, isLoading }, children });
}

// node_modules/@usedapp/core/dist/esm/src/providers/network/readonlyNetworks/context.js
var import_react13 = __toESM(require_react());
var ReadonlyNetworksContext = (0, import_react13.createContext)({
  providers: {},
  updateNetworkState: () => void 0
});
function useReadonlyNetworks() {
  return (0, import_react13.useContext)(ReadonlyNetworksContext).providers;
}
function useUpdateNetworksState() {
  return (0, import_react13.useContext)(ReadonlyNetworksContext).updateNetworkState;
}

// node_modules/@usedapp/core/dist/esm/src/providers/network/readonlyNetworks/provider.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var import_react16 = __toESM(require_react());

// node_modules/@usedapp/core/dist/esm/src/helpers/fromEntries.js
function fromEntries(entries) {
  return Object.fromEntries(entries);
}

// node_modules/@usedapp/core/dist/esm/src/providers/network/readonlyNetworks/reducer.js
function networkStatesReducer(prevState, actions) {
  switch (actions.type) {
    case "UPDATE_NON_STATIC_CALLS_COUNT": {
      const newState = Object.assign({}, prevState);
      newState[actions.chainId] = Object.assign(Object.assign({}, newState[actions.chainId]), { nonStaticCalls: actions.count });
      return newState;
    }
    default:
      return prevState;
  }
}

// node_modules/@usedapp/core/dist/esm/src/providers/window/context.js
var import_react14 = __toESM(require_react());
var WindowContext = (0, import_react14.createContext)({
  isActive: true
});
function useWindow() {
  return (0, import_react14.useContext)(WindowContext);
}

// node_modules/@usedapp/core/dist/esm/src/providers/window/provider.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var import_react15 = __toESM(require_react());
function WindowProvider({ children }) {
  const [isActiveWindow, setActiveWindow] = (0, import_react15.useState)(true);
  (0, import_react15.useEffect)(() => {
    const visibilityChangeListener = () => {
      switch (document.visibilityState) {
        case "hidden":
          setActiveWindow(false);
          break;
        case "visible":
          setActiveWindow(true);
          break;
      }
    };
    document.addEventListener("visibilitychange", visibilityChangeListener);
    return () => document.removeEventListener("visibilitychange", visibilityChangeListener);
  }, []);
  return (0, import_jsx_runtime3.jsx)(WindowContext.Provider, { value: { isActive: isActiveWindow }, children });
}

// node_modules/@usedapp/core/dist/esm/src/providers/network/readonlyNetworks/provider.js
var { Provider: Provider2, StaticJsonRpcProvider } = lib_exports;
var getProviderFromConfig = (urlOrProviderOrProviderFunction) => {
  if (Provider2.isProvider(urlOrProviderOrProviderFunction)) {
    return urlOrProviderOrProviderFunction;
  }
  if (typeof urlOrProviderOrProviderFunction === "function") {
    return urlOrProviderOrProviderFunction();
  }
  return new StaticJsonRpcProvider(urlOrProviderOrProviderFunction);
};
var getProvidersFromConfig = (readOnlyUrls) => fromEntries(Object.entries(readOnlyUrls).map(([chainId, urlOrProviderOrProviderFunction]) => [
  chainId,
  getProviderFromConfig(urlOrProviderOrProviderFunction)
]));
function ReadonlyNetworksProvider({ providerOverrides = {}, children }) {
  const { readOnlyUrls = {}, pollingInterval, pollingIntervals } = useConfig();
  const { isActive } = useWindow();
  const [providers, setProviders] = (0, import_react16.useState)(() => Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides));
  const [networkStates, dispatchNetworkState] = (0, import_react16.useReducer)(networkStatesReducer, Object.assign({}, fromEntries(Object.keys(Object.assign(Object.assign({}, readOnlyUrls), providerOverrides)).map((chainId) => [chainId, { nonStaticCalls: 0 }]))));
  const getPollingInterval = (0, import_react16.useCallback)((chainId) => {
    var _a;
    return (_a = pollingIntervals === null || pollingIntervals === void 0 ? void 0 : pollingIntervals[chainId]) !== null && _a !== void 0 ? _a : pollingInterval;
  }, [
    pollingInterval,
    pollingIntervals
  ]);
  (0, import_react16.useEffect)(() => {
    setProviders(Object.assign(Object.assign({}, getProvidersFromConfig(readOnlyUrls)), providerOverrides));
  }, Object.entries(readOnlyUrls).flat());
  (0, import_react16.useEffect)(() => {
    for (const [chainId, { nonStaticCalls }] of Object.entries(networkStates)) {
      const provider = providers[chainId];
      if (provider) {
        provider.polling = isActive && nonStaticCalls > 0;
      }
    }
  }, [networkStates, isActive]);
  (0, import_react16.useEffect)(() => {
    for (const [chainId, provider] of Object.entries(providers)) {
      provider.pollingInterval = getPollingInterval(Number(chainId));
    }
  }, [providers, getPollingInterval]);
  const networks = (0, import_react16.useMemo)(() => ({
    providers,
    updateNetworkState: dispatchNetworkState
  }), [providers, dispatchNetworkState]);
  return (0, import_jsx_runtime4.jsx)(ReadonlyNetworksContext.Provider, Object.assign({ value: networks }, { children }));
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useReadonlyProvider.js
function useReadonlyNetwork(opts = {}) {
  const chainId = useChainId({ queryParams: { chainId: opts.chainId } });
  const providers = useReadonlyNetworks();
  return providers[chainId] !== void 0 && chainId !== void 0 ? {
    provider: providers[chainId],
    chainId
  } : void 0;
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useEthers.js
function useEthers() {
  const { network: { provider: networkProvider, chainId, accounts, errors }, deactivate, activate, activateBrowserWallet, isLoading } = useNetwork();
  const { networks } = useConfig();
  const supportedChainIds = networks === null || networks === void 0 ? void 0 : networks.map((network) => network.chainId);
  const isUnsupportedChainId = chainId && supportedChainIds && supportedChainIds.indexOf(chainId) < 0;
  const unsupportedChainIdError = new Error(`Unsupported chain id: ${chainId}. Supported chain ids are: ${supportedChainIds}.`);
  unsupportedChainIdError.name = "UnsupportedChainIdError";
  const error = isUnsupportedChainId ? unsupportedChainIdError : errors[errors.length - 1];
  const readonlyNetwork = useReadonlyNetwork();
  const provider = networkProvider !== null && networkProvider !== void 0 ? networkProvider : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.provider;
  const switchNetwork = async (chainId2) => {
    validateArguments({ chainId: chainId2 }, { chainId: "number" });
    if (!provider) {
      throw new Error("Provider not connected.");
    }
    try {
      await provider.send("wallet_switchEthereumChain", [{ chainId: `0x${chainId2.toString(16)}` }]);
    } catch (error2) {
      const errChainNotAddedYet = 4902;
      if (error2.code === errChainNotAddedYet) {
        const chain = networks === null || networks === void 0 ? void 0 : networks.find((chain2) => chain2.chainId === chainId2);
        if (chain === null || chain === void 0 ? void 0 : chain.rpcUrl) {
          await provider.send("wallet_addEthereumChain", [getAddNetworkParams(chain)]);
        }
      }
    }
  };
  const account = accounts[0] ? (0, import_utils.getAddress)(accounts[0]) : void 0;
  return {
    connector: void 0,
    library: provider,
    chainId: isUnsupportedChainId ? void 0 : networkProvider !== void 0 ? chainId : readonlyNetwork === null || readonlyNetwork === void 0 ? void 0 : readonlyNetwork.chainId,
    account,
    active: !!provider,
    activate: async (providerOrConnector) => {
      if ("getProvider" in providerOrConnector) {
        console.warn("Using web3-react connectors is deprecated and may lead to unexpected behavior.");
        await providerOrConnector.activate();
        return activate(await providerOrConnector.getProvider());
      }
      return activate(providerOrConnector);
    },
    activateBrowserWallet,
    deactivate,
    setError: () => {
      throw new Error("setError is deprecated");
    },
    error,
    isLoading,
    switchNetwork
  };
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useCall.js
var import_react17 = __toESM(require_react());
function useCall(call, queryParams = {}) {
  return useCalls([call], queryParams)[0];
}
function useCalls(calls, queryParams = {}) {
  const chainId = useChainId({ queryParams });
  const { refresh } = useConfig();
  const rawCalls = (0, import_react17.useMemo)(() => calls.map((call) => {
    var _a;
    return chainId !== void 0 ? encodeCallData(call, chainId, Object.assign(Object.assign({}, queryParams), { refresh: (_a = queryParams.refresh) !== null && _a !== void 0 ? _a : refresh })) : void 0;
  }), [
    JSON.stringify(calls.map((call) => call && { address: call.contract.address.toLowerCase(), method: call.method, args: call.args })),
    chainId
  ]);
  const results = useRawCalls(rawCalls);
  return (0, import_react17.useMemo)(() => results.map((result, idx) => decodeCallResult(calls[idx], result)), [results]);
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useContractCall.js
var import_react18 = __toESM(require_react());
function warnOnInvalidContractCall(call) {
  console.warn(`Invalid contract call: address=${call && call.address} method=${call && call.method} args=${call && call.args}`);
}
function encodeCallData2(call, chainId) {
  if (!call) {
    return void 0;
  }
  if (!call.address || !call.method) {
    warnOnInvalidContractCall(call);
    return void 0;
  }
  try {
    return { address: call.address, data: call.abi.encodeFunctionData(call.method, call.args), chainId };
  } catch (_a) {
    warnOnInvalidContractCall(call);
    return void 0;
  }
}
function useContractCall(call, queryParams = {}) {
  return useContractCalls([call], queryParams)[0];
}
function useContractCalls(calls, queryParams = {}) {
  const chainId = useChainId({ queryParams });
  const rawCalls = (0, import_react18.useMemo)(() => calls.map((call) => chainId !== void 0 ? encodeCallData2(call, chainId) : void 0), [
    JSON.stringify(calls.map((call) => {
      var _a;
      return call && { address: (_a = call.address) === null || _a === void 0 ? void 0 : _a.toLowerCase(), method: call.method, args: call.args };
    })),
    chainId
  ]);
  const results = useChainCalls(rawCalls);
  return (0, import_react18.useMemo)(() => results.map((result, idx) => {
    const call = calls[idx];
    if (result === "0x") {
      warnOnInvalidContractCall(call);
      return void 0;
    }
    return call && result ? call.abi.decodeFunctionResult(call.method, result) : void 0;
  }), [JSON.stringify(results)]);
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useContractFunction.js
var import_react20 = __toESM(require_react());

// node_modules/@usedapp/core/dist/esm/src/hooks/usePromiseTransaction.js
var import_react19 = __toESM(require_react());
async function estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage) {
  if (!signer || !transactionRequest) {
    return void 0;
  }
  try {
    const estimatedGas = transactionRequest.gasLimit ? BigNumber.from(transactionRequest.gasLimit) : await signer.estimateGas(transactionRequest);
    return estimatedGas === null || estimatedGas === void 0 ? void 0 : estimatedGas.mul(gasLimitBufferPercentage + 100).div(100);
  } catch (err) {
    console.error(err);
    return void 0;
  }
}
async function estimateContractFunctionGasLimit(contractWithSigner, functionName, args, gasLimitBufferPercentage) {
  try {
    const estimatedGas = await contractWithSigner.estimateGas[functionName](...args);
    const gasLimit = estimatedGas === null || estimatedGas === void 0 ? void 0 : estimatedGas.mul(gasLimitBufferPercentage + 100).div(100);
    return gasLimit;
  } catch (err) {
    console.error(err);
    return void 0;
  }
}
var isDroppedAndReplaced = (e) => (e === null || e === void 0 ? void 0 : e.code) === ErrorCode.TRANSACTION_REPLACED && (e === null || e === void 0 ? void 0 : e.replacement) && ((e === null || e === void 0 ? void 0 : e.reason) === "repriced" || (e === null || e === void 0 ? void 0 : e.cancelled) === false);
function usePromiseTransaction(chainId, options) {
  const [state, setState] = (0, import_react19.useState)({ status: "None" });
  const { addTransaction } = useTransactionsContext();
  const { addNotification } = useNotificationsContext();
  const resetState = (0, import_react19.useCallback)(() => {
    setState({ status: "None" });
  }, [setState]);
  const promiseTransaction = (0, import_react19.useCallback)(async (transactionPromise) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
    if (!chainId)
      return;
    let transaction = void 0;
    try {
      setState({ status: "PendingSignature", chainId });
      transaction = await transactionPromise;
      setState({ transaction, status: "Mining", chainId });
      addTransaction({
        transaction: Object.assign(Object.assign({}, transaction), { chainId }),
        submittedAt: Date.now(),
        transactionName: options === null || options === void 0 ? void 0 : options.transactionName
      });
      const receipt = await transaction.wait();
      setState({ receipt, transaction, status: "Success", chainId });
      return receipt;
    } catch (e) {
      const parsedErrorCode = parseInt((_g = (_e = (_c = (_b = (_a = e.error) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.code) !== null && _c !== void 0 ? _c : (_d = e.error) === null || _d === void 0 ? void 0 : _d.code) !== null && _e !== void 0 ? _e : (_f = e.data) === null || _f === void 0 ? void 0 : _f.code) !== null && _g !== void 0 ? _g : e.code);
      const errorCode = isNaN(parsedErrorCode) ? void 0 : parsedErrorCode;
      const errorHash = (_l = (_k = (_j = (_h = e === null || e === void 0 ? void 0 : e.error) === null || _h === void 0 ? void 0 : _h.data) === null || _j === void 0 ? void 0 : _j.originalError) === null || _k === void 0 ? void 0 : _k.data) !== null && _l !== void 0 ? _l : (_m = e === null || e === void 0 ? void 0 : e.error) === null || _m === void 0 ? void 0 : _m.data;
      const errorMessage = (_v = (_t = (_s = (_q = (_p = (_o = e.error) === null || _o === void 0 ? void 0 : _o.data) === null || _p === void 0 ? void 0 : _p.message) !== null && _q !== void 0 ? _q : (_r = e.error) === null || _r === void 0 ? void 0 : _r.message) !== null && _s !== void 0 ? _s : e.reason) !== null && _t !== void 0 ? _t : (_u = e.data) === null || _u === void 0 ? void 0 : _u.message) !== null && _v !== void 0 ? _v : e.message;
      if (transaction) {
        const droppedAndReplaced = isDroppedAndReplaced(e);
        if (droppedAndReplaced) {
          const status = e.receipt.status === 0 ? "Fail" : "Success";
          const type = status === "Fail" ? "transactionFailed" : "transactionSucceed";
          addNotification({
            notification: {
              type,
              submittedAt: Date.now(),
              transaction: e.replacement,
              receipt: e.receipt,
              transactionName: (_w = e.replacement) === null || _w === void 0 ? void 0 : _w.transactionName,
              originalTransaction: transaction
            },
            chainId
          });
          setState({
            status,
            transaction: e.replacement,
            originalTransaction: transaction,
            receipt: e.receipt,
            errorMessage,
            errorCode,
            errorHash,
            chainId
          });
        } else {
          setState({ status: "Fail", transaction, receipt: e.receipt, errorMessage, errorCode, errorHash, chainId });
        }
      } else {
        setState({ status: "Exception", errorMessage, errorCode, errorHash, chainId });
      }
      return void 0;
    }
  }, [chainId, setState, addTransaction, options]);
  return { promiseTransaction, state, resetState };
}

// node_modules/@usedapp/core/dist/esm/src/helpers/getSignerFromOptions.js
var getSignerFromOptions = (provider, options, library) => {
  const privateKey = options && "privateKey" in options && options.privateKey;
  const mnemonicPhrase = options && "mnemonicPhrase" in options && options.mnemonicPhrase;
  const json = options && "json" in options && options.json;
  const password = options && "password" in options && options.password;
  const privateKeySigner = privateKey && provider && new ethers_exports.Wallet(privateKey, provider);
  const mnemonicPhraseSigner = mnemonicPhrase && provider && ethers_exports.Wallet.fromMnemonic(mnemonicPhrase).connect(provider);
  const encryptedJsonSigner = json && password && provider && ethers_exports.Wallet.fromEncryptedJsonSync(json, password).connect(provider);
  const optionsSigner = options && "signer" in options && options.signer;
  return privateKeySigner || mnemonicPhraseSigner || encryptedJsonSigner || optionsSigner || (library === null || library === void 0 ? void 0 : library.getSigner());
};

// node_modules/@usedapp/core/dist/esm/src/hooks/useContractFunction.js
function connectContractToSigner(contract, options, librarySigner) {
  if (contract.signer) {
    return contract;
  }
  if (options && "signer" in options) {
    return contract.connect(options.signer);
  }
  if (librarySigner) {
    return contract.connect(librarySigner);
  }
  throw new TypeError("No signer available in contract, options or library");
}
function useContractFunction(contract, functionName, options) {
  var _a, _b, _c;
  const { library, chainId } = useEthers();
  const transactionChainId = options && "chainId" in options && (options === null || options === void 0 ? void 0 : options.chainId) || chainId;
  const { promiseTransaction, state, resetState } = usePromiseTransaction(transactionChainId, options);
  const [events, setEvents] = (0, import_react20.useState)(void 0);
  const config = useConfig();
  const gasLimitBufferPercentage = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.bufferGasLimitPercentage) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.gasLimitBufferPercentage) !== null && _c !== void 0 ? _c : 0;
  const providers = useReadonlyNetworks();
  const provider = transactionChainId && providers[transactionChainId];
  const send = (0, import_react20.useCallback)(async (...args) => {
    var _a2, _b2;
    if (contract) {
      const hasOpts = args.length > ((_b2 = (_a2 = contract.interface) === null || _a2 === void 0 ? void 0 : _a2.getFunction(functionName).inputs.length) !== null && _b2 !== void 0 ? _b2 : 0);
      const signer = getSignerFromOptions(provider, options, library);
      const contractWithSigner = connectContractToSigner(contract, options, signer);
      const opts = hasOpts ? args[args.length - 1] : void 0;
      const gasLimit = await estimateContractFunctionGasLimit(contractWithSigner, functionName, args, gasLimitBufferPercentage);
      const modifiedOpts = Object.assign(Object.assign({}, opts), { gasLimit });
      const modifiedArgs = hasOpts ? args.slice(0, args.length - 1) : args;
      modifiedArgs.push(modifiedOpts);
      const receipt = await promiseTransaction(contractWithSigner[functionName](...modifiedArgs));
      if (receipt === null || receipt === void 0 ? void 0 : receipt.logs) {
        const events2 = receipt.logs.reduce((accumulatedLogs, log) => {
          try {
            return log.address.toLowerCase() === contract.address.toLowerCase() ? [...accumulatedLogs, contract.interface.parseLog(log)] : accumulatedLogs;
          } catch (_err) {
            return accumulatedLogs;
          }
        }, []);
        setEvents(events2);
      }
      return receipt;
    }
  }, [contract, functionName, options, provider, library, gasLimitBufferPercentage, promiseTransaction]);
  return { send, state, events, resetState };
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useEtherBalance.js
function useEtherBalance(address, queryParams = {}) {
  var _a;
  const multicallAddress = useMulticallAddress(queryParams);
  const { value } = (_a = useCall(multicallAddress && address && {
    contract: new Contract(multicallAddress, MultiCallABI),
    method: "getEthBalance",
    args: [address]
  }, queryParams)) !== null && _a !== void 0 ? _a : {};
  return value === null || value === void 0 ? void 0 : value[0];
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useToken.js
function useToken(tokenAddress) {
  var _a, _b;
  const partialCall = tokenAddress && {
    contract: new Contract(tokenAddress, ERC20Interface),
    address: tokenAddress,
    args: []
  };
  const args = ["name", "symbol", "decimals", "totalSupply"].map((method) => partialCall && Object.assign(Object.assign({}, partialCall), { method }));
  const [name, symbol, decimals, totalSupply] = useCalls(args);
  if (!name && !symbol && !decimals && !totalSupply) {
    return void 0;
  }
  return {
    name: (_a = name === null || name === void 0 ? void 0 : name.value[0]) !== null && _a !== void 0 ? _a : "",
    symbol: (_b = symbol === null || symbol === void 0 ? void 0 : symbol.value[0]) !== null && _b !== void 0 ? _b : "",
    decimals: decimals === null || decimals === void 0 ? void 0 : decimals.value[0],
    totalSupply: totalSupply === null || totalSupply === void 0 ? void 0 : totalSupply.value[0]
  };
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useTokenBalance.js
function useTokenBalance(tokenAddress, address, queryParams = {}) {
  var _a;
  const { value: tokenBalance } = (_a = useCall(address && tokenAddress && {
    contract: new Contract(tokenAddress, ERC20Interface),
    method: "balanceOf",
    args: [address]
  }, queryParams)) !== null && _a !== void 0 ? _a : {};
  return tokenBalance === null || tokenBalance === void 0 ? void 0 : tokenBalance[0];
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useTokenAllowance.js
function useTokenAllowance(tokenAddress, ownerAddress, spenderAddress, queryParams = {}) {
  var _a;
  const { value: allowance } = (_a = useCall(ownerAddress && spenderAddress && tokenAddress && {
    contract: new Contract(tokenAddress, ERC20Interface),
    method: "allowance",
    args: [ownerAddress, spenderAddress]
  }, queryParams)) !== null && _a !== void 0 ? _a : {};
  return allowance === null || allowance === void 0 ? void 0 : allowance[0];
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useLocalStorage.js
var import_react21 = __toESM(require_react());
function getItem(key) {
  if (typeof window === "undefined") {
    return null;
  }
  const item = window.localStorage.getItem(key);
  if (item !== null) {
    try {
      return JSON.parse(item);
    } catch (_a) {
    }
  }
}
function setItem(key, value) {
  if (value === void 0) {
    window.localStorage.removeItem(key);
  } else {
    const toStore = JSON.stringify(value);
    window.localStorage.setItem(key, toStore);
    return JSON.parse(toStore);
  }
}
function useLocalStorage(key) {
  const [value, setValue] = (0, import_react21.useState)(() => getItem(key));
  (0, import_react21.useEffect)(() => {
    setValue(getItem(key));
  }, [key]);
  (0, import_react21.useEffect)(() => {
    setItem(key, value);
  }, [value]);
  return [value, setValue, () => getItem(key)];
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useTransactions.js
var import_react22 = __toESM(require_react());
function useTransactions(queryParams = {}) {
  const { chainId: defaultChainId, account } = useEthers();
  const { addTransaction, transactions } = useTransactionsContext();
  const { chainId: _chainId } = queryParams;
  const chainId = (0, import_react22.useMemo)(() => _chainId !== null && _chainId !== void 0 ? _chainId : defaultChainId, [_chainId, defaultChainId]);
  const filtered = (0, import_react22.useMemo)(() => {
    var _a;
    if (chainId === void 0 || !account) {
      return [];
    }
    return ((_a = transactions[chainId]) !== null && _a !== void 0 ? _a : []).filter((x) => x.transaction.from === account);
  }, [transactions, chainId, account]);
  return {
    transactions: filtered,
    addTransaction
  };
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useNotifications.js
var import_react24 = __toESM(require_react());

// node_modules/@usedapp/core/dist/esm/src/hooks/useInterval.js
var import_react23 = __toESM(require_react());
function useInterval(callback, delay) {
  const savedCallback = (0, import_react23.useRef)(callback);
  (0, import_react23.useEffect)(() => {
    savedCallback.current = callback;
  }, [callback]);
  (0, import_react23.useEffect)(() => {
    if (delay === null) {
      return;
    }
    const id = setInterval(() => savedCallback.current(), delay);
    return () => clearInterval(id);
  }, [delay]);
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useNotifications.js
function getExpiredNotifications(notifications, expirationPeriod) {
  if (expirationPeriod === 0) {
    return [];
  }
  const timeFromCreation = (creationTime) => Date.now() - creationTime;
  return notifications.filter((notification) => timeFromCreation(notification.submittedAt) >= expirationPeriod);
}
function useNotifications() {
  const { chainId, account } = useEthers();
  const { addNotification, notifications, removeNotification } = useNotificationsContext();
  const { notifications: { checkInterval, expirationPeriod } } = useConfig();
  const chainNotifications = (0, import_react24.useMemo)(() => {
    var _a;
    if (chainId === void 0 || !account) {
      return [];
    }
    return (_a = notifications[chainId]) !== null && _a !== void 0 ? _a : [];
  }, [notifications, chainId, account]);
  useInterval(() => {
    if (!chainId) {
      return;
    }
    const expiredNotification = getExpiredNotifications(chainNotifications, expirationPeriod);
    for (const notification of expiredNotification) {
      removeNotification({ notificationId: notification.id, chainId });
    }
  }, checkInterval);
  return {
    notifications: chainNotifications,
    addNotification,
    removeNotification
  };
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useSendTransaction.js
function useSendTransaction(options) {
  var _a, _b, _c;
  const { library, chainId } = useEthers();
  const transactionChainId = options && "chainId" in options && (options === null || options === void 0 ? void 0 : options.chainId) || chainId;
  const { promiseTransaction, state, resetState } = usePromiseTransaction(transactionChainId, options);
  const config = useConfig();
  const gasLimitBufferPercentage = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.gasLimitBufferPercentage) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.bufferGasLimitPercentage) !== null && _b !== void 0 ? _b : config === null || config === void 0 ? void 0 : config.gasLimitBufferPercentage) !== null && _c !== void 0 ? _c : 0;
  const providers = useReadonlyNetworks();
  const provider = transactionChainId && providers[transactionChainId];
  const sendTransaction = async (transactionRequest) => {
    const signer = getSignerFromOptions(provider, options, library);
    if (signer) {
      const gasLimit = await estimateTransactionGasLimit(transactionRequest, signer, gasLimitBufferPercentage);
      return promiseTransaction(signer.sendTransaction(Object.assign(Object.assign({}, transactionRequest), { gasLimit })));
    }
  };
  return { sendTransaction, state, resetState };
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useGasPrice.js
var import_react25 = __toESM(require_react());
function useGasPrice(queryParams = {}) {
  const { library } = useEthers();
  const providers = useReadonlyNetworks();
  const _blockNumber = useBlockNumber();
  const blockNumbers = useBlockNumbers();
  const [gasPrice, setGasPrice] = (0, import_react25.useState)();
  const { chainId } = queryParams;
  const [provider, blockNumber] = (0, import_react25.useMemo)(() => chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber], [providers, library, blockNumbers, _blockNumber]);
  async function updateGasPrice() {
    setGasPrice(await (provider === null || provider === void 0 ? void 0 : provider.getGasPrice()));
  }
  (0, import_react25.useEffect)(() => {
    void updateGasPrice();
  }, [provider, blockNumber]);
  return gasPrice;
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useLookupAddress.js
var import_react26 = __toESM(require_react());
function useLookupAddress(address) {
  const { library } = useEthers();
  const [ens, setENS] = (0, import_react26.useState)();
  const [isLoading, setIsLoading] = (0, import_react26.useState)(false);
  const [error, setError] = (0, import_react26.useState)(null);
  (0, import_react26.useEffect)(() => {
    let mounted = true;
    void (async () => {
      if (!library || !address)
        return;
      try {
        setIsLoading(true);
        const resolved = await library.lookupAddress(address);
        if (!mounted)
          return;
        setENS(resolved);
      } catch (e) {
        if (!mounted)
          return;
        setError(e);
      } finally {
        setIsLoading(false);
      }
    })();
    return () => {
      mounted = false;
    };
  }, [address, library]);
  return { ens, isLoading, error };
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useTokenList.js
var import_react27 = __toESM(require_react());
function useTokenList(tokenListURI, overrideChainId, tags) {
  const { chainId: providerChainId } = useEthers();
  const [tokenList, setTokenList] = (0, import_react27.useState)();
  const chainId = overrideChainId || providerChainId;
  (0, import_react27.useEffect)(() => {
    fetch(tokenListURI).then(async (response) => {
      if (response.ok) {
        const { name, logoURI, tokens } = await response.json();
        setTokenList({
          name,
          logoURI,
          tokens: tokens.filter((token) => {
            const sameChainId = token.chainId === chainId;
            if (!tags) {
              return sameChainId;
            }
            return sameChainId && token.tags && token.tags.some((tag) => tags.includes(tag));
          })
        });
      } else {
        const errorMessage = await response.text();
        return Promise.reject(new Error(errorMessage));
      }
    }).catch((err) => {
      console.log(err);
      setTokenList(void 0);
    });
  }, [tokenListURI, chainId]);
  return tokenList;
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useChainMeta.js
var import_react28 = __toESM(require_react());
function useChainMeta(chainId) {
  return (0, import_react28.useMemo)(() => getChainMeta(chainId), [chainId]);
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useLogs.js
var import_react30 = __toESM(require_react());

// node_modules/@usedapp/core/dist/esm/src/hooks/useRawLogs.js
var import_react29 = __toESM(require_react());
function useRawLogs(filter, queryParams = {}) {
  const { library } = useEthers();
  const providers = useReadonlyNetworks();
  const _blockNumber = useBlockNumber();
  const blockNumbers = useBlockNumbers();
  const [logs, setLogs] = (0, import_react29.useState)();
  const { chainId } = queryParams;
  const [provider, blockNumber] = (0, import_react29.useMemo)(() => chainId ? [providers[chainId], blockNumbers[chainId]] : [library, _blockNumber], [providers, library, blockNumbers, _blockNumber, chainId]);
  async function updateLogs() {
    setLogs(!filter ? void 0 : await (provider === null || provider === void 0 ? void 0 : provider.getLogs(filter)));
  }
  (0, import_react29.useEffect)(() => {
    void updateLogs();
  }, [provider, blockNumber]);
  return logs;
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useLogs.js
function useLogs(filter, queryParams = {}) {
  const { fromBlock, toBlock, blockHash } = queryParams;
  const rawFilter = (0, import_react30.useMemo)(() => encodeFilterData(filter, fromBlock, toBlock, blockHash), [
    filter,
    fromBlock,
    toBlock,
    blockHash
  ]);
  const result = useRawLogs(rawFilter instanceof Error ? void 0 : rawFilter, queryParams);
  return (0, import_react30.useMemo)(() => decodeLogs(filter, rawFilter instanceof Error ? rawFilter : result), [result, filter, rawFilter]);
}

// node_modules/@usedapp/core/dist/esm/src/hooks/useResolveName.js
var import_react31 = __toESM(require_react());
var useResolveName = (name) => {
  const { library } = useEthers();
  const [isLoading, setIsLoading] = (0, import_react31.useState)(false);
  const [error, setError] = (0, import_react31.useState)(null);
  const [address, setAddress] = (0, import_react31.useState)();
  (0, import_react31.useEffect)(() => {
    let mounted = true;
    void (async () => {
      if (!library || !name)
        return;
      try {
        setIsLoading(true);
        const resolved = await library.resolveName(name);
        if (!mounted)
          return;
        setAddress(resolved);
      } catch (e) {
        if (!mounted)
          return;
        setError(e);
      } finally {
        setIsLoading(false);
      }
    })();
    return () => {
      mounted = false;
    };
  }, [library, name]);
  return { address, isLoading, error };
};

// node_modules/@usedapp/core/dist/esm/src/providers/blockNumber/common/subscribeToNewBlock.js
function subscribeToNewBlock(provider, chainId, dispatch, isActive) {
  if (provider && chainId !== void 0 && isActive) {
    const update = (blockNumber) => dispatch({ chainId, blockNumber });
    provider.on("block", update);
    provider.getBlockNumber().then((blockNumber) => update(blockNumber), (err) => {
      console.error(err);
    });
    return () => {
      provider.off("block", update);
    };
  }
  return () => void 0;
}

// node_modules/@usedapp/core/dist/esm/src/providers/blockNumber/blockNumber/provider.js
function BlockNumberProvider({ children }) {
  const { library, chainId } = useEthers();
  const [state, dispatch] = (0, import_react32.useReducer)(blockNumberReducer, {});
  const { isActive } = useWindow();
  (0, import_react32.useEffect)(() => subscribeToNewBlock(library, chainId, dispatch, isActive), [library, chainId, isActive]);
  const debouncedState = useDebounce(state, 100);
  const blockNumber = chainId !== void 0 ? debouncedState[chainId] : void 0;
  return (0, import_jsx_runtime5.jsx)(BlockNumberContext.Provider, { value: blockNumber, children });
}

// node_modules/@usedapp/core/dist/esm/src/providers/chainState/multiChainStates/context.js
var import_react33 = __toESM(require_react());
var MultiChainStatesContext = (0, import_react33.createContext)({
  chains: {},
  dispatchCalls: () => void 0
});

// node_modules/@usedapp/core/dist/esm/src/providers/chainState/multiChainStates/provider.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var import_react35 = __toESM(require_react());

// node_modules/@usedapp/core/dist/esm/src/providers/devtools.js
var hook;
if (typeof window !== "undefined") {
  hook = window.__USEDAPP_DEVTOOLS_HOOK__;
}
notifyDevtools({ type: "INIT" });
function notifyDevtools(notification) {
  if (!hook) {
    return;
  }
  if (notification.type === "INIT") {
    hook.init();
  } else {
    if (notification.type === "MULTICALL_ERROR" || notification.type === "GENERIC_ERROR") {
      notification.error = getErrorMessage(notification.error);
    }
    hook.send(notification);
  }
}
function getErrorMessage(error) {
  if (error instanceof Error) {
    return error.message;
  } else {
    return "" + error;
  }
}

// node_modules/@usedapp/core/dist/esm/src/providers/chainState/common/performMulticall.js
function performMulticall(provider, multicallExecutor, multicallAddress, blockNumber, uniqueCalls, dispatchState, chainId, reportError) {
  if (uniqueCalls.length === 0) {
    return;
  }
  const start = Date.now();
  multicallExecutor(provider, multicallAddress, blockNumber, uniqueCalls).then((state) => {
    dispatchState({ type: "FETCH_SUCCESS", blockNumber, chainId, state });
    notifyDevtools({
      type: "MULTICALL_SUCCESS",
      duration: Date.now() - start,
      chainId,
      blockNumber,
      multicallAddress,
      state
    });
  }).catch((error) => {
    reportError(error);
    dispatchState({ type: "FETCH_ERROR", blockNumber, chainId, error });
    notifyDevtools({
      type: "MULTICALL_ERROR",
      duration: Date.now() - start,
      chainId,
      blockNumber,
      multicallAddress,
      calls: uniqueCalls,
      error
    });
  });
}

// node_modules/@usedapp/core/dist/esm/src/providers/chainState/common/callsReducer.js
function callsReducer(state = [], action) {
  if (action.type === "ADD_CALLS") {
    return [...state, ...action.calls.map((call) => Object.assign(Object.assign({}, call), { address: call.address.toLowerCase() }))];
  } else if (action.type === "UPDATE_CALLS") {
    return state.map((call) => {
      if (call.chainId !== action.chainId || !action.updatedCalls.includes(call)) {
        return call;
      }
      const blockNumber = action.blockNumber;
      return Object.assign(Object.assign({}, call), { lastUpdatedBlockNumber: blockNumber });
    });
  } else {
    let finalState = state;
    for (const call of action.calls) {
      const index = finalState.findIndex((x) => x.address.toLowerCase() === call.address.toLowerCase() && x.data === call.data);
      if (index !== -1) {
        finalState = finalState.filter((_, i) => i !== index);
      }
    }
    return finalState;
  }
}

// node_modules/@usedapp/core/dist/esm/src/providers/chainState/common/chainStateReducer.js
function chainStateReducer(state = {}, action) {
  var _a, _b, _c;
  const current = (_a = state[action.chainId]) === null || _a === void 0 ? void 0 : _a.blockNumber;
  if (!current || action.blockNumber >= current) {
    if (action.type === "FETCH_SUCCESS") {
      let newState = action.state;
      const oldState = (_c = (_b = state[action.chainId]) === null || _b === void 0 ? void 0 : _b.state) !== null && _c !== void 0 ? _c : {};
      for (const [address, entries] of Object.entries(oldState)) {
        newState = Object.assign(Object.assign({}, newState), { [address]: Object.assign(Object.assign({}, entries), newState[address]) });
      }
      return Object.assign(Object.assign({}, state), { [action.chainId]: { blockNumber: action.blockNumber, state: newState } });
    } else if (action.type === "FETCH_ERROR") {
      return Object.assign(Object.assign({}, state), { [action.chainId]: Object.assign(Object.assign({}, state[action.chainId]), { blockNumber: action.blockNumber, error: action.error }) });
    }
  }
  return state;
}

// node_modules/@usedapp/core/dist/esm/src/abi/common.js
var buffLength = (buf) => (buf.length - 2) / 2;
var bufPaddedLength = (buf) => Math.ceil(buffLength(buf) / 32) * 32;
var encodeUint = (uint) => uint.toString(16).padStart(64, "0");
var decodeUint = (buf) => parseInt(buf, 16);
var wordLength = 64;
var fail = () => {
  throw new Error("Invalid calldata");
};

// node_modules/@usedapp/core/dist/esm/src/abi/multicall2/constants.js
var ethersAbi = new utils_exports.Interface(MultiCall2_default.abi);
var trueEncoded = "0".repeat(63) + "1";
var falseEncoded = "0".repeat(63) + "0";

// node_modules/@usedapp/core/dist/esm/src/abi/multicall2/encoder.js
var selector = ethersAbi.getSighash("tryAggregate");
function encodeCalls(start, calls) {
  let res = start;
  let dynamicOffset = calls.length * 32;
  res += encodeUint(calls.length);
  for (const call of calls) {
    res += encodeUint(dynamicOffset);
    dynamicOffset += 3 * 32 + bufPaddedLength(call[1]);
  }
  for (const call of calls) {
    dynamicOffset = 64;
    res += "000000000000000000000000" + call[0].slice(2).toLowerCase();
    res += encodeUint(dynamicOffset);
    res += buffLength(call[1]).toString(16).padStart(64, "0");
    res += call[1].slice(2).padEnd(bufPaddedLength(call[1]) * 2, "0");
  }
  return res;
}
function encodeTryAggregate(b, calls) {
  let res = selector;
  const dynamicOffset = 64;
  res += b ? trueEncoded : falseEncoded;
  res += encodeUint(dynamicOffset);
  return encodeCalls(res, calls);
}

// node_modules/@usedapp/core/dist/esm/src/abi/multicall/constants.js
var ethersAbi2 = new utils_exports.Interface(MultiCall_default.abi);

// node_modules/@usedapp/core/dist/esm/src/abi/multicall/encoder.js
var selector2 = ethersAbi2.getSighash("aggregate");
function encodeAggregate(calls) {
  const dynamicOffset = 32;
  const res = selector2 + encodeUint(dynamicOffset);
  return encodeCalls(res, calls);
}

// node_modules/@usedapp/core/dist/esm/src/abi/multicall/decoder.js
function decodeAggregate(calldata) {
  const errorMethodId = "0x08c379a0";
  if (calldata.startsWith(errorMethodId)) {
    throw new Error("Multicall aggregate: call failed");
  }
  calldata = calldata.slice(2);
  const getNumber = (offset) => decodeUint(calldata.slice(offset * wordLength, (offset + 1) * wordLength));
  const blockNumber = getNumber(0);
  if (getNumber(1) !== 64) {
    fail();
  }
  const arraySize = getNumber(2);
  const calls = [];
  for (let i = 0; i < arraySize; i++) {
    const callOffset = 2 * getNumber(i + 3) + 3 * wordLength;
    const pos = callOffset / wordLength;
    const returnDataOffset = (pos + 1) * wordLength;
    const returnDataLength = getNumber(pos);
    const returnData = calldata.slice(returnDataOffset, returnDataOffset + 2 * returnDataLength);
    calls.push("0x" + returnData);
  }
  return [blockNumber, calls];
}

// node_modules/@usedapp/core/dist/esm/src/providers/chainState/common/multicall.js
var ABI = [
  "function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)"
];
var multicall1Factory = (fastEncoding) => fastEncoding ? fastEncodingMulticall : multicall;
async function multicall(provider, address, blockNumber, requests) {
  if (requests.length === 0) {
    return {};
  }
  const contract = new Contract(address, ABI, provider);
  const [, results] = await contract.aggregate(requests.map(({ address: address2, data }) => [address2, data]), { blockTag: blockNumber });
  return decodeResult(results, requests);
}
async function fastEncodingMulticall(provider, address, blockNumber, requests) {
  if (requests.length === 0) {
    return {};
  }
  const response = await provider.call({
    to: address,
    data: encodeAggregate(requests.map(({ address: address2, data }) => [address2, data]))
  }, blockNumber);
  const [, results] = decodeAggregate(response);
  return decodeResult(results, requests);
}
function decodeResult(results, requests) {
  var _a;
  const state = {};
  for (let i = 0; i < requests.length; i++) {
    const { address, data } = requests[i];
    const result = results[i];
    const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};
    stateForAddress[data] = { value: result, success: true };
    state[address] = stateForAddress;
  }
  return state;
}

// node_modules/@usedapp/core/dist/esm/src/abi/multicall2/decoder.js
function decodeTryAggregate(calldata) {
  const errorMethodId = "0x08c379a0";
  if (calldata.startsWith(errorMethodId)) {
    throw new Error("Multicall2 aggregate: call failed");
  }
  calldata = calldata.slice(2);
  const getNumber = (offset) => decodeUint(calldata.slice(offset * wordLength, (offset + 1) * wordLength));
  if (getNumber(0) !== 32) {
    fail();
  }
  const arraySize = getNumber(1);
  const calls = [];
  for (let i = 0; i < arraySize; i++) {
    const callOffset = 2 * getNumber(i + 2) + 2 * wordLength;
    const pos = callOffset / wordLength;
    const successEncoded = getNumber(pos);
    if (successEncoded !== 1 && successEncoded !== 0) {
      fail();
    }
    const success = successEncoded === 1;
    if (getNumber(pos + 1) !== 64) {
      fail();
    }
    const returnDataOffset = (pos + 3) * wordLength;
    const returnDataLength = getNumber(pos + 2);
    const returnData = calldata.slice(returnDataOffset, returnDataOffset + 2 * returnDataLength);
    const call = [success, "0x" + returnData];
    calls.push(call);
  }
  return [calls];
}

// node_modules/@usedapp/core/dist/esm/src/providers/chainState/common/multicall2.js
var ABI2 = [
  "function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool success, bytes returnData)[])"
];
var multicall2Factory = (fastEncoding) => fastEncoding ? fastEncodingMulticall2 : multicall2;
async function multicall2(provider, address, blockNumber, requests) {
  if (requests.length === 0) {
    return {};
  }
  const contract = new Contract(address, ABI2, provider);
  const results = await contract.tryAggregate(false, requests.map(({ address: address2, data }) => [address2, data]), { blockTag: blockNumber });
  return decodeResult2(results, requests);
}
async function fastEncodingMulticall2(provider, address, blockNumber, requests) {
  if (requests.length === 0) {
    return {};
  }
  const response = await provider.call({
    to: address,
    data: encodeTryAggregate(false, requests.map(({ address: address2, data }) => [address2, data]))
  }, blockNumber);
  const [results] = decodeTryAggregate(response);
  return decodeResult2(results, requests);
}
function decodeResult2(results, requests) {
  var _a;
  const state = {};
  for (let i = 0; i < requests.length; i++) {
    const { address, data } = requests[i];
    const [success, value] = results[i];
    const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};
    stateForAddress[data] = { success, value };
    state[address] = stateForAddress;
  }
  return state;
}

// node_modules/@usedapp/core/dist/esm/src/providers/chainState/common/useDevtoolsReporting.js
var import_react34 = __toESM(require_react());
function useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, blockNumber, multicallAddresses) {
  const { chainId, account, error } = useEthers();
  const multicall3 = chainId !== void 0 ? multicallAddresses[chainId] : void 0;
  (0, import_react34.useEffect)(() => {
    notifyDevtools({ type: "NETWORK_CHANGED", chainId, multicallAddress: multicall3 });
  }, [chainId, multicall3]);
  (0, import_react34.useEffect)(() => {
    notifyDevtools({ type: "ACCOUNT_CHANGED", address: account !== null && account !== void 0 ? account : void 0 });
  }, [account]);
  (0, import_react34.useEffect)(() => {
    notifyDevtools({ type: "CALLS_CHANGED", chainId, calls: uniqueCalls });
  }, [uniqueCallsJSON]);
  (0, import_react34.useEffect)(() => {
    if (chainId !== void 0 && blockNumber !== void 0) {
      notifyDevtools({ type: "BLOCK_NUMBER_CHANGED", chainId, blockNumber });
    }
  }, [blockNumber, chainId]);
  (0, import_react34.useEffect)(() => {
    if (error !== void 0) {
      notifyDevtools({ type: "GENERIC_ERROR", error });
    }
  }, [error]);
}

// node_modules/@usedapp/core/dist/esm/src/providers/chainState/multiChainStates/provider.js
var __rest = function(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
function composeChainState(networks, state, multicallAddresses) {
  return fromEntries(Object.keys(networks).map((chainId) => [
    Number(chainId),
    {
      value: state[Number(chainId)],
      multicallAddress: multicallAddresses[Number(chainId)]
    }
  ]));
}
var stripCall = (_a) => {
  var { isStatic, lastUpdatedBlockNumber } = _a, strippedCall = __rest(_a, ["isStatic", "lastUpdatedBlockNumber"]);
  return strippedCall;
};
function MultiChainStateProvider({ children, multicallAddresses }) {
  const { multicallVersion, fastMulticallEncoding } = useConfig();
  const networks = useReadonlyNetworks();
  const blockNumbers = useBlockNumbers();
  const { reportError } = useNetwork();
  const { isActive } = useWindow();
  const [calls, dispatchCalls] = (0, import_react35.useReducer)(callsReducer, []);
  const [state, dispatchState] = (0, import_react35.useReducer)(chainStateReducer, {});
  const updateNetworks = useUpdateNetworksState();
  const multicall3 = (multicallVersion === 1 ? multicall1Factory : multicall2Factory)(fastMulticallEncoding !== null && fastMulticallEncoding !== void 0 ? fastMulticallEncoding : false);
  const [debouncedCalls, debouncedNetworks] = useDebouncePair(calls, networks, 50);
  const uniqueCalls = (0, import_react35.useMemo)(() => getUniqueActiveCalls(debouncedCalls), [debouncedCalls]);
  const uniqueCallsJSON = JSON.stringify(debouncedCalls.map(stripCall));
  const chainId = useChainId();
  useDevtoolsReporting(uniqueCallsJSON, uniqueCalls, chainId !== void 0 ? blockNumbers[chainId] : void 0, multicallAddresses);
  function multicallForChain(chainId2, provider) {
    if (!isActive) {
      return;
    }
    const blockNumber = blockNumbers[chainId2];
    const multicallAddress = multicallAddresses[chainId2];
    if (!provider || !blockNumber) {
      return;
    }
    if (!multicallAddress) {
      reportError(new Error(`Missing multicall address for chain id ${chainId2}`));
      return;
    }
    if (debouncedNetworks !== networks) {
      return;
    }
    const updatedCalls = getCallsForUpdate(debouncedCalls, { chainId: chainId2, blockNumber });
    const callsOnThisChain = getUniqueActiveCalls(updatedCalls);
    updateNetworks({
      type: "UPDATE_NON_STATIC_CALLS_COUNT",
      chainId: chainId2,
      count: calls.filter((call) => !call.isStatic && call.chainId === chainId2).length
    });
    performMulticall(provider, multicall3, multicallAddress, blockNumber, callsOnThisChain, dispatchState, chainId2, reportError);
    dispatchCalls({ type: "UPDATE_CALLS", calls, updatedCalls, blockNumber, chainId: chainId2 });
  }
  (0, import_react35.useEffect)(() => {
    var _a, _b;
    for (const [_chainId, provider] of Object.entries(networks)) {
      const chainId2 = Number(_chainId);
      if (chainId2 === ((_a = provider.network) === null || _a === void 0 ? void 0 : _a.chainId) || chainId2 === ((_b = provider._network) === null || _b === void 0 ? void 0 : _b.chainId)) {
        multicallForChain(chainId2, provider);
      }
    }
  }, [networks, multicallAddresses, uniqueCallsJSON, blockNumbers]);
  const chains = (0, import_react35.useMemo)(() => composeChainState(networks, state, multicallAddresses), [
    state,
    multicallAddresses,
    networks
  ]);
  const provided = { chains, dispatchCalls };
  return (0, import_jsx_runtime6.jsx)(MultiChainStatesContext.Provider, { value: provided, children });
}

// node_modules/@usedapp/core/dist/esm/src/providers/notifications/provider.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());
var import_react37 = __toESM(require_react());

// node_modules/@usedapp/core/dist/esm/src/providers/notifications/context.js
var import_react36 = __toESM(require_react());

// node_modules/@usedapp/core/dist/esm/src/providers/notifications/model.js
var DEFAULT_NOTIFICATIONS = {};

// node_modules/@usedapp/core/dist/esm/src/providers/notifications/context.js
var NotificationsContext = (0, import_react36.createContext)({
  notifications: DEFAULT_NOTIFICATIONS,
  addNotification: () => void 0,
  removeNotification: () => void 0
});
function useNotificationsContext() {
  return (0, import_react36.useContext)(NotificationsContext);
}

// node_modules/@usedapp/core/dist/esm/src/providers/notifications/reducer.js
function notificationReducer(state, action) {
  var _a;
  const { chainId } = action;
  const chainState = (_a = state[chainId]) !== null && _a !== void 0 ? _a : [];
  switch (action.type) {
    case "ADD_NOTIFICATION":
      return Object.assign(Object.assign({}, state), { [chainId]: [action.notification, ...chainState] });
    case "REMOVE_NOTIFICATION": {
      return Object.assign(Object.assign({}, state), { [chainId]: chainState.filter((notification) => notification.id !== action.notificationId) });
    }
  }
}

// node_modules/nanoid/index.browser.js
var nanoid = (size = 21) => crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {
  byte &= 63;
  if (byte < 36) {
    id += byte.toString(36);
  } else if (byte < 62) {
    id += (byte - 26).toString(36).toUpperCase();
  } else if (byte > 62) {
    id += "-";
  } else {
    id += "_";
  }
  return id;
}, "");

// node_modules/@usedapp/core/dist/esm/src/providers/notifications/provider.js
function NotificationsProvider({ children }) {
  const [notifications, dispatch] = (0, import_react37.useReducer)(notificationReducer, DEFAULT_NOTIFICATIONS);
  const { chainId, account } = useEthers();
  (0, import_react37.useEffect)(() => {
    if (account && chainId) {
      dispatch({
        type: "ADD_NOTIFICATION",
        chainId,
        notification: {
          type: "walletConnected",
          id: nanoid(),
          submittedAt: Date.now(),
          address: account
        }
      });
    }
  }, [account, chainId]);
  const addNotification = (0, import_react37.useCallback)(({ notification, chainId: chainId2 }) => {
    dispatch({
      type: "ADD_NOTIFICATION",
      chainId: chainId2,
      notification: Object.assign(Object.assign({}, notification), { id: nanoid() })
    });
  }, [dispatch]);
  const removeNotification = (0, import_react37.useCallback)(({ notificationId, chainId: chainId2 }) => {
    dispatch({
      type: "REMOVE_NOTIFICATION",
      chainId: chainId2,
      notificationId
    });
  }, [dispatch]);
  return (0, import_jsx_runtime7.jsx)(NotificationsContext.Provider, { value: { addNotification, notifications, removeNotification }, children });
}

// node_modules/@usedapp/core/dist/esm/src/providers/transactions/provider.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var import_react39 = __toESM(require_react());

// node_modules/@usedapp/core/dist/esm/src/providers/transactions/context.js
var import_react38 = __toESM(require_react());

// node_modules/@usedapp/core/dist/esm/src/providers/transactions/model.js
function getStoredTransactionState(transaction) {
  if (transaction.receipt) {
    return transaction.receipt.status === 0 ? "Fail" : "Success";
  }
  return "Mining";
}
var DEFAULT_STORED_TRANSACTIONS = {};

// node_modules/@usedapp/core/dist/esm/src/providers/transactions/context.js
var TransactionsContext = (0, import_react38.createContext)({
  transactions: DEFAULT_STORED_TRANSACTIONS,
  addTransaction: () => void 0
});
function useTransactionsContext() {
  return (0, import_react38.useContext)(TransactionsContext);
}

// node_modules/@usedapp/core/dist/esm/src/providers/transactions/reducer.js
function transactionReducer(state, action) {
  var _a;
  switch (action.type) {
    case "ADD_TRANSACTION": {
      const { chainId } = action.payload.transaction;
      return Object.assign(Object.assign({}, state), { [chainId]: [action.payload, ...(_a = state[chainId]) !== null && _a !== void 0 ? _a : []] });
    }
    case "UPDATE_TRANSACTIONS":
      return Object.assign(Object.assign({}, state), { [action.chainId]: [...action.transactions] });
  }
}

// node_modules/@usedapp/core/dist/esm/src/providers/transactions/provider.js
function TransactionProvider({ children }) {
  const { chainId, library } = useEthers();
  const blockNumber = useBlockNumber();
  const { localStorage } = useConfig();
  const [storage, setStorage] = useLocalStorage(localStorage.transactionPath);
  const [transactions, dispatch] = (0, import_react39.useReducer)(transactionReducer, storage !== null && storage !== void 0 ? storage : DEFAULT_STORED_TRANSACTIONS);
  const { addNotification } = useNotificationsContext();
  (0, import_react39.useEffect)(() => {
    setStorage(transactions);
  }, [transactions]);
  const addTransaction = (0, import_react39.useCallback)((payload) => {
    dispatch({
      type: "ADD_TRANSACTION",
      payload
    });
    addNotification({
      notification: {
        type: "transactionStarted",
        transaction: payload.transaction,
        submittedAt: payload.submittedAt,
        transactionName: payload.transactionName
      },
      chainId: payload.transaction.chainId
    });
  }, [dispatch]);
  (0, import_react39.useEffect)(() => {
    const updateTransactions = async () => {
      var _a;
      if (!chainId || !library || !blockNumber) {
        return;
      }
      const checkTransaction = async (tx) => {
        if (tx.receipt || !shouldCheck(blockNumber, tx)) {
          return tx;
        }
        try {
          const receipt = await library.getTransactionReceipt(tx.transaction.hash);
          if (receipt) {
            const type = receipt.status === 0 ? "transactionFailed" : "transactionSucceed";
            addNotification({
              notification: {
                type,
                submittedAt: Date.now(),
                transaction: tx.transaction,
                receipt,
                transactionName: tx.transactionName
              },
              chainId
            });
            return Object.assign(Object.assign({}, tx), { receipt });
          } else {
            return Object.assign(Object.assign({}, tx), { lastCheckedBlockNumber: blockNumber });
          }
        } catch (error) {
          console.error(`failed to check transaction hash: ${tx.transaction.hash}`, error);
        }
        return tx;
      };
      const chainTransactions = (_a = transactions[chainId]) !== null && _a !== void 0 ? _a : [];
      const newTransactions = [];
      for (const tx of chainTransactions) {
        const newTransaction = await checkTransaction(tx);
        newTransactions.push(newTransaction);
      }
      dispatch({ type: "UPDATE_TRANSACTIONS", chainId, transactions: newTransactions });
    };
    void updateTransactions();
  }, [chainId, library, blockNumber]);
  return (0, import_jsx_runtime8.jsx)(TransactionsContext.Provider, { value: { transactions, addTransaction }, children });
}
function shouldCheck(blockNumber, tx) {
  if (tx.receipt) {
    return false;
  }
  if (!tx.lastCheckedBlockNumber) {
    return true;
  }
  const blocksSinceCheck = blockNumber - tx.lastCheckedBlockNumber;
  if (blocksSinceCheck < 1) {
    return false;
  }
  const minutesPending = (Date.now() - tx.submittedAt) / 1e3 / 60;
  if (minutesPending > 60) {
    return blocksSinceCheck > 9;
  }
  if (minutesPending > 5) {
    return blocksSinceCheck > 2;
  }
  return true;
}

// node_modules/@usedapp/core/dist/esm/src/providers/LocalMulticallProvider.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var import_react40 = __toESM(require_react());

// node_modules/@usedapp/core/dist/esm/src/helpers/contract.js
async function deployContract(contractAbi, signer) {
  const factory = new ContractFactory(contractAbi.abi, contractAbi.bytecode, signer);
  const contract = await factory.deploy();
  return await contract.deployTransaction.wait();
}

// node_modules/@usedapp/core/dist/esm/src/providers/LocalMulticallProvider.js
var LocalMulticallState;
(function(LocalMulticallState2) {
  LocalMulticallState2[LocalMulticallState2["Unknown"] = 0] = "Unknown";
  LocalMulticallState2[LocalMulticallState2["NonLocal"] = 1] = "NonLocal";
  LocalMulticallState2[LocalMulticallState2["Deploying"] = 2] = "Deploying";
  LocalMulticallState2[LocalMulticallState2["Deployed"] = 3] = "Deployed";
  LocalMulticallState2[LocalMulticallState2["Error"] = 4] = "Error";
})(LocalMulticallState || (LocalMulticallState = {}));
function LocalMulticallProvider({ children }) {
  const updateConfig = useUpdateConfig();
  const { library, chainId } = useEthers();
  const [, setMulticallAddress, getCurrent] = useLocalStorage("local_multicall_address" + chainId);
  const { multicallAddresses, multicallVersion } = useConfig();
  const [localMulticallState, setLocalMulticallState] = (0, import_react40.useState)(LocalMulticallState.Unknown);
  const [multicallBlockNumber, setMulticallBlockNumber] = (0, import_react40.useState)();
  const blockNumber = useBlockNumber();
  (0, import_react40.useEffect)(() => {
    var _a;
    if (!library || !chainId) {
      setLocalMulticallState(LocalMulticallState.Unknown);
    } else if (!((_a = getChainById(chainId)) === null || _a === void 0 ? void 0 : _a.isLocalChain)) {
      setLocalMulticallState(LocalMulticallState.NonLocal);
    } else if (multicallAddresses && multicallAddresses[chainId]) {
      setLocalMulticallState(LocalMulticallState.Deployed);
    } else if (localMulticallState !== LocalMulticallState.Deploying) {
      const checkDeployed = async () => {
        const multicallAddress = getCurrent();
        if (typeof multicallAddress === "string" && utils_exports.isAddress(multicallAddress)) {
          const multicallCode = await library.getCode(multicallAddress);
          if (multicallCode !== "0x") {
            updateConfig({ multicallAddresses: { [chainId]: multicallAddress } });
            return;
          }
        }
        const signer = library.getSigner();
        if (!signer) {
          setLocalMulticallState(LocalMulticallState.Error);
          return;
        }
        setLocalMulticallState(LocalMulticallState.Deploying);
        const deployMulticall = async () => {
          try {
            const { contractAddress, blockNumber: blockNumber2 } = await deployContract(multicallVersion === 1 ? MultiCall_default : MultiCall2_default, signer);
            updateConfig({ multicallAddresses: { [chainId]: contractAddress } });
            setMulticallAddress(contractAddress);
            setMulticallBlockNumber(blockNumber2);
            setLocalMulticallState(LocalMulticallState.Deployed);
          } catch (_a2) {
            setLocalMulticallState(LocalMulticallState.Error);
          }
        };
        void deployMulticall();
      };
      void checkDeployed();
    }
  }, [library, chainId]);
  const awaitingMulticallBlock = multicallBlockNumber && blockNumber && blockNumber < multicallBlockNumber;
  if (localMulticallState === LocalMulticallState.Deploying || localMulticallState === LocalMulticallState.Deployed && awaitingMulticallBlock) {
    return (0, import_jsx_runtime9.jsx)("div", { children: "Deploying multicall..." });
  } else if (localMulticallState === LocalMulticallState.Error) {
    return (0, import_jsx_runtime9.jsx)("div", { children: "Error deploying multicall contract" });
  } else {
    return (0, import_jsx_runtime9.jsx)(import_jsx_runtime9.Fragment, { children });
  }
}

// node_modules/@usedapp/core/dist/esm/src/providers/blockNumber/blockNumbers/context.js
var import_react41 = __toESM(require_react());
var BlockNumbersContext = (0, import_react41.createContext)({});

// node_modules/@usedapp/core/dist/esm/src/providers/blockNumber/blockNumbers/provider.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var import_react42 = __toESM(require_react());
function BlockNumbersProvider({ children }) {
  const networks = useReadonlyNetworks();
  const [state, dispatch] = (0, import_react42.useReducer)(blockNumberReducer, {});
  const { isActive } = useWindow();
  (0, import_react42.useEffect)(() => {
    const onUnmount = Object.entries(networks).map(([chainId, provider]) => subscribeToNewBlock(provider, Number(chainId), dispatch, isActive));
    return () => {
      onUnmount.forEach((fn) => fn());
    };
  }, [networks]);
  const debouncedState = useDebounce(state, 100);
  return (0, import_jsx_runtime10.jsx)(BlockNumbersContext.Provider, { value: debouncedState, children });
}

// node_modules/@usedapp/core/dist/esm/src/providers/DAppProvider.js
function DAppProvider({ config, children }) {
  return (0, import_jsx_runtime11.jsx)(ConfigProvider, Object.assign({ config }, { children: (0, import_jsx_runtime11.jsx)(DAppProviderWithConfig, { children }) }));
}
var getMulticallAddresses = (networks) => {
  const result = {};
  networks === null || networks === void 0 ? void 0 : networks.forEach((network) => result[network.chainId] = network.multicallAddress);
  return result;
};
var getMulticall2Addresses = (networks) => {
  const result = {};
  networks === null || networks === void 0 ? void 0 : networks.forEach((network) => {
    if (network.multicall2Address) {
      result[network.chainId] = network.multicall2Address;
    }
  });
  return result;
};
function DAppProviderWithConfig({ children }) {
  const { multicallAddresses, networks, multicallVersion } = useConfig();
  const defaultAddresses = (0, import_react43.useMemo)(() => multicallVersion === 1 ? getMulticallAddresses(networks) : getMulticall2Addresses(networks), [networks, multicallVersion]);
  const multicallAddressesMerged = Object.assign(Object.assign({}, defaultAddresses), multicallAddresses);
  return (0, import_jsx_runtime11.jsx)(WindowProvider, { children: (0, import_jsx_runtime11.jsx)(ReadonlyNetworksProvider, { children: (0, import_jsx_runtime11.jsx)(NetworkProvider, { children: (0, import_jsx_runtime11.jsx)(BlockNumberProvider, { children: (0, import_jsx_runtime11.jsx)(BlockNumbersProvider, { children: (0, import_jsx_runtime11.jsx)(LocalMulticallProvider, { children: (0, import_jsx_runtime11.jsx)(MultiChainStateProvider, Object.assign({ multicallAddresses: multicallAddressesMerged }, { children: (0, import_jsx_runtime11.jsx)(NotificationsProvider, { children: (0, import_jsx_runtime11.jsx)(TransactionProvider, { children }) }) })) }) }) }) }) }) });
}
export {
  Andromeda,
  Arbitrum,
  ArbitrumRedditTestnet,
  ArbitrumRinkeby,
  Astar,
  Aurora,
  AuroraTestnet,
  Avalanche,
  AvalancheTestnet,
  BNB,
  BSC,
  BSCTestnet,
  BUSD,
  Boba,
  BobaRinkeby,
  ChainId,
  Cronos,
  CronosTestnet,
  Currency,
  CurrencyValue,
  DAppProvider,
  DEFAULT_SUPPORTED_CHAINS,
  Dai,
  ERC20_default as ERC20,
  ERC20Interface,
  ERC20Mock_default as ERC20Mock,
  ERC20MockInterface,
  Ether,
  Fantom,
  FantomTestnet,
  FiatCurrency,
  Gnosis,
  Goerli,
  Hardhat,
  Harmony,
  Kovan,
  KovanDai,
  KovanEther,
  Localhost,
  Mainnet,
  MoonbaseAlpha,
  Moonbeam,
  Moonriver,
  MultiCall_default as MultiCall,
  MultiCall2_default as MultiCall2,
  MultiCall2ABI,
  MultiCallABI,
  Mumbai,
  NATIVE_CURRENCY,
  NativeCurrency,
  OasisEmerald,
  OasisEmeraldTestnet,
  Optimism,
  OptimismKovan,
  Palm,
  PalmTestnet,
  Polygon,
  Rinkeby,
  Ropsten,
  Songbird,
  Stardust,
  TestBNB,
  TestBUSD,
  Theta,
  ThetaTestnet,
  ThunderCore,
  ThunderCoreTestnet,
  Token,
  Velas,
  VelasTestnet,
  ZkSyncTestnet,
  addressEqual,
  compareAddress,
  getChainName,
  getExplorerAddressLink,
  getExplorerTransactionLink,
  getStoredTransactionState,
  isLocalChain,
  isTestChain,
  multicall,
  multicall2,
  shortenAddress,
  shortenIfAddress,
  shortenIfTransactionHash,
  shortenTransactionHash,
  transactionErrored,
  useBlockMeta,
  useBlockNumber,
  useBlockNumbers,
  useCall,
  useCalls,
  useChainCall,
  useChainCalls,
  useChainMeta,
  useChainState,
  useConfig,
  useContractCall,
  useContractCalls,
  useContractFunction,
  useEtherBalance,
  useEthers,
  useGasPrice,
  useLogs,
  useLookupAddress,
  useMulticallAddress,
  useNetwork,
  useNotifications,
  useRawCall,
  useRawCalls,
  useRawLogs,
  useResolveName,
  useSendTransaction,
  useToken,
  useTokenAllowance,
  useTokenBalance,
  useTokenList,
  useTransactions,
  useUpdateConfig,
  xDai
};
//# sourceMappingURL=@usedapp_core.js.map
