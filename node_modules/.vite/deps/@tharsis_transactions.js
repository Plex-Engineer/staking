import {
  require_dist as require_dist2
} from "./chunk-UGEMPTRO.js";
import {
  require_dist
} from "./chunk-SWQC3LOQ.js";
import "./chunk-P6W3ZOSO.js";
import "./chunk-MYFKNE7U.js";
import {
  __commonJS
} from "./chunk-ACCAMVX6.js";

// node_modules/@tharsis/transactions/dist/messages/erc20/msgConvertCoin.js
var require_msgConvertCoin = __commonJS({
  "node_modules/@tharsis/transactions/dist/messages/erc20/msgConvertCoin.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTxMsgConvertCoin = void 0;
    var proto_1 = require_dist();
    var eip712_1 = require_dist2();
    function createTxMsgConvertCoin(chain, sender, fee, memo, params) {
      const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
      const types = (0, eip712_1.generateTypes)(eip712_1.MSG_CONVERT_COIN_TYPES);
      const msg = (0, eip712_1.createMsgConvertCoin)(params.denom, params.amount, params.receiverHexFormatted, params.senderEvmosFormatted);
      const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
      const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
      const msgCosmos = (0, proto_1.createMsgConvertCoin)(params.denom, params.amount, params.receiverHexFormatted, params.senderEvmosFormatted);
      const tx = (0, proto_1.createTransaction)(msgCosmos, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), "ethsecp256", sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
      return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign
      };
    }
    exports.createTxMsgConvertCoin = createTxMsgConvertCoin;
  }
});

// node_modules/@tharsis/transactions/dist/messages/erc20/msgConvertERC20.js
var require_msgConvertERC20 = __commonJS({
  "node_modules/@tharsis/transactions/dist/messages/erc20/msgConvertERC20.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTxMsgConvertERC20 = void 0;
    var proto_1 = require_dist();
    var eip712_1 = require_dist2();
    function createTxMsgConvertERC20(chain, sender, fee, memo, params) {
      const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
      const types = (0, eip712_1.generateTypes)(eip712_1.MSG_CONVERT_ERC20_TYPES);
      const msg = (0, eip712_1.createMsgConvertERC20)(params.contract_address, params.amount, params.receiverEvmosFormatted, params.senderHexFormatted);
      const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
      const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
      const msgCosmos = (0, proto_1.createMsgConvertERC20)(params.contract_address, params.amount, params.receiverEvmosFormatted, params.senderHexFormatted);
      const tx = (0, proto_1.createTransaction)(msgCosmos, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), "ethsecp256", sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
      return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign
      };
    }
    exports.createTxMsgConvertERC20 = createTxMsgConvertERC20;
  }
});

// node_modules/@tharsis/transactions/dist/messages/common.js
var require_common = __commonJS({
  "node_modules/@tharsis/transactions/dist/messages/common.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@tharsis/transactions/dist/messages/gov.js
var require_gov = __commonJS({
  "node_modules/@tharsis/transactions/dist/messages/gov.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTxMsgVote = void 0;
    var proto_1 = require_dist();
    var eip712_1 = require_dist2();
    function createTxMsgVote(chain, sender, fee, memo, params) {
      const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
      const types = (0, eip712_1.generateTypes)(eip712_1.MSG_VOTE_TYPES);
      const msg = (0, eip712_1.createMsgVote)(params.proposalId, params.option, sender.accountAddress);
      const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
      const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
      const msgCosmos = (0, proto_1.createMsgVote)(params.proposalId, params.option, sender.accountAddress);
      const tx = (0, proto_1.createTransaction)(msgCosmos, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), "ethsecp256", sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
      return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign
      };
    }
    exports.createTxMsgVote = createTxMsgVote;
  }
});

// node_modules/@tharsis/transactions/dist/messages/ibcMsgTransfer.js
var require_ibcMsgTransfer = __commonJS({
  "node_modules/@tharsis/transactions/dist/messages/ibcMsgTransfer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTxIBCMsgTransfer = void 0;
    var proto_1 = require_dist();
    var eip712_1 = require_dist2();
    function createTxIBCMsgTransfer(chain, sender, fee, memo, params) {
      const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
      const types = (0, eip712_1.generateTypes)(eip712_1.IBC_MSG_TRANSFER_TYPES);
      const msg = (0, eip712_1.createIBCMsgTransfer)(params.receiver, sender.accountAddress, params.sourceChannel, params.sourcePort, params.revisionHeight, params.revisionNumber, params.timeoutTimestamp, params.amount, params.denom);
      const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
      const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
      const msgCosmos = (0, proto_1.createIBCMsgTransfer)(params.sourcePort, params.sourceChannel, params.amount, params.denom, sender.accountAddress, params.receiver, params.revisionNumber, params.revisionHeight, params.timeoutTimestamp);
      const tx = (0, proto_1.createTransaction)(msgCosmos, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), "ethsecp256", sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
      return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign
      };
    }
    exports.createTxIBCMsgTransfer = createTxIBCMsgTransfer;
  }
});

// node_modules/@tharsis/transactions/dist/messages/msgSend.js
var require_msgSend = __commonJS({
  "node_modules/@tharsis/transactions/dist/messages/msgSend.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createMessageSend = void 0;
    var proto_1 = require_dist();
    var eip712_1 = require_dist2();
    function createMessageSend(chain, sender, fee, memo, params) {
      const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
      const types = (0, eip712_1.generateTypes)(eip712_1.MSG_SEND_TYPES);
      const msg = (0, eip712_1.createMsgSend)(params.amount, params.denom, sender.accountAddress, params.destinationAddress);
      const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
      const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
      const msgSend = (0, proto_1.createMsgSend)(sender.accountAddress, params.destinationAddress, params.amount, params.denom);
      const tx = (0, proto_1.createTransaction)(msgSend, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), "ethsecp256", sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
      return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign
      };
    }
    exports.createMessageSend = createMessageSend;
  }
});

// node_modules/@tharsis/transactions/dist/messages/staking.js
var require_staking = __commonJS({
  "node_modules/@tharsis/transactions/dist/messages/staking.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTxMsgWithdrawValidatorCommission = exports.createTxMsgMultipleWithdrawDelegatorReward = exports.createTxMsgWithdrawDelegatorReward = exports.createTxMsgUndelegate = exports.createTxMsgBeginRedelegate = exports.createTxMsgDelegate = void 0;
    var proto_1 = require_dist();
    var eip712_1 = require_dist2();
    function createTxMsgDelegate(chain, sender, fee, memo, params) {
      const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
      const types = (0, eip712_1.generateTypes)(eip712_1.MSG_DELEGATE_TYPES);
      const msg = (0, eip712_1.createMsgDelegate)(sender.accountAddress, params.validatorAddress, params.amount, params.denom);
      const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
      const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
      const protoMessage = (0, proto_1.createMsgDelegate)(sender.accountAddress, params.validatorAddress, params.amount, params.denom);
      const tx = (0, proto_1.createTransaction)(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), "ethsecp256", sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
      return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign
      };
    }
    exports.createTxMsgDelegate = createTxMsgDelegate;
    function createTxMsgBeginRedelegate(chain, sender, fee, memo, params) {
      const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
      const types = (0, eip712_1.generateTypes)(eip712_1.MSG_BEGIN_REDELEGATE_TYPES);
      const msg = (0, eip712_1.createMsgBeginRedelegate)(sender.accountAddress, params.validatorSrcAddress, params.validatorDstAddress, params.amount, params.denom);
      const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
      const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
      const protoMessage = (0, proto_1.createMsgBeginRedelegate)(sender.accountAddress, params.validatorSrcAddress, params.validatorDstAddress, params.amount, params.denom);
      const tx = (0, proto_1.createTransaction)(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), "ethsecp256", sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
      return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign
      };
    }
    exports.createTxMsgBeginRedelegate = createTxMsgBeginRedelegate;
    function createTxMsgUndelegate(chain, sender, fee, memo, params) {
      const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
      const types = (0, eip712_1.generateTypes)(eip712_1.MSG_UNDELEGATE_TYPES);
      const msg = (0, eip712_1.createMsgUndelegate)(sender.accountAddress, params.validatorAddress, params.amount, params.denom);
      const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
      const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
      const protoMessage = (0, proto_1.createMsgUndelegate)(sender.accountAddress, params.validatorAddress, params.amount, params.denom);
      const tx = (0, proto_1.createTransaction)(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), "ethsecp256", sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
      return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign
      };
    }
    exports.createTxMsgUndelegate = createTxMsgUndelegate;
    function createTxMsgWithdrawDelegatorReward(chain, sender, fee, memo, params) {
      const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
      const types = (0, eip712_1.generateTypes)(eip712_1.MSG_WITHDRAW_DELEGATOR_REWARD_TYPES);
      const msg = (0, eip712_1.createMsgWithdrawDelegatorReward)(sender.accountAddress, params.validatorAddress);
      const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
      const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
      const protoMessage = (0, proto_1.createMsgWithdrawDelegatorReward)(sender.accountAddress, params.validatorAddress);
      const tx = (0, proto_1.createTransaction)(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), "ethsecp256", sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
      return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign
      };
    }
    exports.createTxMsgWithdrawDelegatorReward = createTxMsgWithdrawDelegatorReward;
    function createTxMsgMultipleWithdrawDelegatorReward(chain, sender, fee, memo, params) {
      const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
      const types = (0, eip712_1.generateTypes)(eip712_1.MSG_WITHDRAW_DELEGATOR_REWARD_TYPES);
      const msgs = [];
      const protoMsgs = [];
      params.validatorAddresses.forEach((validator) => {
        msgs.push((0, eip712_1.createMsgWithdrawDelegatorReward)(sender.accountAddress, validator));
        protoMsgs.push((0, proto_1.createMsgWithdrawDelegatorReward)(sender.accountAddress, validator));
      });
      const messages = (0, eip712_1.generateMessageWithMultipleTransactions)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msgs);
      const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
      const tx = (0, proto_1.createTransactionWithMultipleMessages)(protoMsgs, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), "ethsecp256", sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
      return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign
      };
    }
    exports.createTxMsgMultipleWithdrawDelegatorReward = createTxMsgMultipleWithdrawDelegatorReward;
    function createTxMsgWithdrawValidatorCommission(chain, sender, fee, memo, params) {
      const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
      const types = (0, eip712_1.generateTypes)(eip712_1.MSG_WITHDRAW_VALIDATOR_COMMISSION_TYPES);
      const msg = (0, eip712_1.createMsgWithdrawValidatorCommission)(params.validatorAddress);
      const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
      const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
      const protoMessage = (0, proto_1.createMsgWithdrawValidatorCommission)(params.validatorAddress);
      const tx = (0, proto_1.createTransaction)(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), "ethsecp256", sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
      return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign
      };
    }
    exports.createTxMsgWithdrawValidatorCommission = createTxMsgWithdrawValidatorCommission;
  }
});

// node_modules/@tharsis/transactions/dist/messages/txRaw.js
var require_txRaw = __commonJS({
  "node_modules/@tharsis/transactions/dist/messages/txRaw.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTxRawEIP712 = void 0;
    var proto_1 = require_dist();
    function createTxRawEIP712(body, authInfo, extension) {
      body.extension_options.push((0, proto_1.createAnyMessage)(extension));
      return (0, proto_1.createTxRaw)(body.serializeBinary(), authInfo.serializeBinary(), [
        new Uint8Array()
      ]);
    }
    exports.createTxRawEIP712 = createTxRawEIP712;
  }
});

// node_modules/@tharsis/transactions/dist/messages/validator.js
var require_validator = __commonJS({
  "node_modules/@tharsis/transactions/dist/messages/validator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createTxMsgEditValidator = void 0;
    var proto_1 = require_dist();
    var eip712_1 = require_dist2();
    function createTxMsgEditValidator(chain, sender, fee, memo, params) {
      const feeObject = (0, eip712_1.generateFee)(fee.amount, fee.denom, fee.gas, sender.accountAddress);
      const types = (0, eip712_1.generateTypes)(eip712_1.MSG_EDIT_VALIDATOR_TYPES);
      const msg = (0, eip712_1.createMsgEditValidator)(params.moniker, params.identity, params.website, params.securityContact, params.details, params.validatorAddress, params.commissionRate, params.minSelfDelegation);
      const messages = (0, eip712_1.generateMessage)(sender.accountNumber.toString(), sender.sequence.toString(), chain.cosmosChainId, memo, feeObject, msg);
      const eipToSign = (0, eip712_1.createEIP712)(types, chain.chainId, messages);
      const protoMessage = (0, proto_1.createMsgEditValidator)(params.moniker, params.identity, params.website, params.securityContact, params.details, params.validatorAddress, params.commissionRate, params.minSelfDelegation);
      const tx = (0, proto_1.createTransaction)(protoMessage, memo, fee.amount, fee.denom, parseInt(fee.gas, 10), "ethsecp256", sender.pubkey, sender.sequence, sender.accountNumber, chain.cosmosChainId);
      return {
        signDirect: tx.signDirect,
        legacyAmino: tx.legacyAmino,
        eipToSign
      };
    }
    exports.createTxMsgEditValidator = createTxMsgEditValidator;
  }
});

// node_modules/@tharsis/transactions/dist/messages/web3Extension.js
var require_web3Extension = __commonJS({
  "node_modules/@tharsis/transactions/dist/messages/web3Extension.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.signatureToWeb3Extension = void 0;
    var proto_1 = require_dist();
    function signatureToWeb3Extension(chain, sender, hexFormattedSignature) {
      let signature = hexFormattedSignature;
      const temp = hexFormattedSignature.split("0x");
      if (temp.length === 2) {
        ;
        [, signature] = temp;
      }
      return (0, proto_1.createWeb3Extension)(chain.chainId, sender.accountAddress, Uint8Array.from(Buffer.from(signature, "hex")));
    }
    exports.signatureToWeb3Extension = signatureToWeb3Extension;
  }
});

// node_modules/@tharsis/transactions/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/@tharsis/transactions/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
          __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_msgConvertCoin(), exports);
    __exportStar(require_msgConvertERC20(), exports);
    __exportStar(require_common(), exports);
    __exportStar(require_gov(), exports);
    __exportStar(require_ibcMsgTransfer(), exports);
    __exportStar(require_msgSend(), exports);
    __exportStar(require_staking(), exports);
    __exportStar(require_txRaw(), exports);
    __exportStar(require_validator(), exports);
    __exportStar(require_web3Extension(), exports);
  }
});

// dep:@tharsis_transactions
var tharsis_transactions_default = require_dist3();
export {
  tharsis_transactions_default as default
};
//# sourceMappingURL=@tharsis_transactions.js.map
