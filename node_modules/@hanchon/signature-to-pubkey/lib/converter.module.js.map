{"version":3,"file":"converter.module.js","sources":["../src/converter.ts"],"sourcesContent":["import { fromRpcSig } from \"ethereumjs-util\";\n\nconst secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nconst bytes_1 = require(\"ethereumjs-util/dist/bytes\");\nconst types_1 = require(\"ethereumjs-util/dist/types\");\n\nfunction calculateSigRecovery(v: any, chainId: any) {\n  const vBN = (types_1.toType)(v, types_1.TypeOutput.BN);\n  if (!chainId) {\n    return vBN.subn(27);\n  }\n  const chainIdBN = (types_1.toType)(chainId, types_1.TypeOutput.BN);\n  return vBN.sub(chainIdBN.muln(2).addn(35));\n}\n\nfunction isValidSigRecovery(recovery: any) {\n  return recovery == 0 || recovery == 1\n}\n\nfunction recoverPubKey(msgHash: Buffer, v: any, r: Buffer, s: Buffer, chainId?: any) {\n  const signature = Buffer.concat([(bytes_1.setLengthLeft)(r, 32), (bytes_1.setLengthLeft)(s, 32)], 64);\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  const senderPubKey = (secp256k1_1.ecdsaRecover)(signature, recovery.toNumber(), msgHash);\n  return Buffer.from(senderPubKey).toString('base64');\n}\n\nexport function signatureToPubkey(signature: string, msgHash: Buffer) {\n  let ret = fromRpcSig(signature)\n  return recoverPubKey(msgHash, ret.v, ret.r, ret.s)\n}\n\nexport function fromHexString(hexString: string) {\n  let match = hexString.match(/.{1,2}/g)\n  if (match === null) {\n    return new Uint8Array()\n  }\n  return new Uint8Array(match.map(byte => parseInt(byte, 16)));\n}"],"names":["secp256k1_1","require","bytes_1","types_1","signatureToPubkey","signature","msgHash","ret","fromRpcSig","v","r","s","chainId","Buffer","concat","setLengthLeft","recovery","toType","TypeOutput","BN","subn","calculateSigRecovery","isValidSigRecovery","Error","senderPubKey","ecdsaRecover","toNumber","from","toString","recoverPubKey","fromHexString","hexString","match","Uint8Array","map","byte","parseInt"],"mappings":"6CAEA,MAAMA,EAAcC,QAAQ,mCACtBC,EAAUD,QAAQ,8BAClBE,EAAUF,QAAQ,uCAyBRG,EAAkBC,EAAmBC,GACnD,IAAIC,EAAMC,EAAWH,GACrB,OAZF,SAAuBC,EAAiBG,EAAQC,EAAWC,EAAWC,GACpE,MAAMP,EAAYQ,OAAOC,OAAO,CAAEZ,EAAQa,cAAeL,EAAG,IAAMR,EAAQa,cAAeJ,EAAG,KAAM,IAC5FK,EAfR,SAA8BP,EAAQG,GAGlC,OAFWT,EAAQc,OAAQR,EAAGN,EAAQe,WAAWC,IAEtCC,KAAK,IAYDC,CAAqBZ,GACtC,IAPF,SAA4BO,GAC1B,OAAmB,GAAZA,GAA6B,GAAZA,EAMnBM,CAAmBN,GACtB,UAAUO,MAAM,6BAElB,MAAMC,EAAgBxB,EAAYyB,aAAcpB,EAAWW,EAASU,WAAYpB,GAChF,OAAOO,OAAOc,KAAKH,GAAcI,SAAS,UAKnCC,CAAcvB,EAASC,EAAIE,EAAGF,EAAIG,EAAGH,EAAII,YAGlCmB,EAAcC,GAC5B,IAAIC,EAAQD,EAAUC,MAAM,WAC5B,OAAc,OAAVA,MACSC,eAEFA,WAAWD,EAAME,IAAIC,GAAQC,SAASD,EAAM"}