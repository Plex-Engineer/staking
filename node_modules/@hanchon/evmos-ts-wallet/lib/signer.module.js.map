{"version":3,"file":"signer.module.js","sources":["../src/signer.ts"],"sourcesContent":["import fetch from 'node-fetch'\nimport { TypedDataUtils, SignTypedDataVersion } from '@metamask/eth-sig-util'\nimport { Wallet } from '@ethersproject/wallet'\nimport {\n  arrayify,\n  concat,\n  splitSignature,\n  joinSignature,\n} from '@ethersproject/bytes'\nimport { createTxRaw } from '@tharsis/proto'\nimport {\n  createTxRawEIP712,\n  signatureToWeb3Extension,\n  Sender,\n  TxGenerated,\n  createMessageSend,\n  Chain,\n} from '@tharsis/transactions'\nimport { signatureToPubkey } from '@hanchon/signature-to-pubkey'\nimport { ethToEvmos } from '@tharsis/address-converter'\n\n// Chain helpers\n\nexport const LOCALNET_CHAIN = {\n  chainId: 9000,\n  cosmosChainId: 'evmos_9000-1',\n}\n\nexport const LOCALNET_FEE = {\n  amount: '20',\n  denom: 'aevmos',\n  gas: '200000',\n}\n\nexport const MAINNET_CHAIN = {\n  chainId: 9001,\n  cosmosChainId: 'evmos_9001-2',\n}\n\nexport const MAINNET_FEE = {\n  amount: '5000',\n  denom: 'aevmos',\n  gas: '600000',\n}\n\nexport const TESTNET_CHAIN = {\n  chainId: 9000,\n  cosmosChainId: 'evmos_9000-4',\n}\n\nexport const TESTNET_FEE = {\n  amount: '5000',\n  denom: 'atevmos',\n  gas: '600000',\n}\n\n// Get Account\n/* eslint-disable camelcase */\ninterface AccountResponse {\n  account: {\n    '@type': string\n    base_account: {\n      address: string\n      pub_key?: {\n        '@type': string\n        key: string\n      }\n      account_number: string\n      sequence: string\n    }\n    code_hash: string\n  }\n}\n\nexport async function generatePubkey(wallet: Wallet) {\n  // Sign the personal message `generate_pubkey` and generate the pubkey from that signature\n  const signature = await wallet.signMessage('generate_pubkey')\n  return signatureToPubkey(\n    signature,\n    Buffer.from([\n      50, 215, 18, 245, 169, 63, 252, 16, 225, 169, 71, 95, 254, 165, 146, 216,\n      40, 162, 115, 78, 147, 125, 80, 182, 25, 69, 136, 250, 65, 200, 94, 178,\n    ]),\n  )\n}\n\nexport async function getSender(\n  wallet: Wallet,\n  url: string = 'http://127.0.0.1:1317',\n) {\n  const evmosAddress = ethToEvmos(wallet.address)\n  const addrRequest = await fetch(\n    `${url}/cosmos/auth/v1beta1/accounts/${evmosAddress}`,\n  )\n  const resp = (await addrRequest.json()) as AccountResponse\n\n  const sender = {\n    accountAddress: evmosAddress,\n    sequence: parseInt(resp.account.base_account.sequence as string, 10),\n    accountNumber: parseInt(resp.account.base_account.account_number, 10),\n    pubkey:\n      resp.account.base_account.pub_key?.key || (await generatePubkey(wallet)),\n  }\n  return sender\n}\n\n// Broadcast a transaction in json.stringify format\nexport async function broadcast(\n  transactionBody: string,\n  url: string = 'http://127.0.0.1:1317',\n) {\n  const post = await fetch(`${url}/cosmos/tx/v1beta1/txs`, {\n    method: 'post',\n    body: transactionBody,\n    headers: { 'Content-Type': 'application/json' },\n  })\n  const data = await post.json()\n  return data\n}\n\n// Sign transaction using payload method (keplr style)\nexport async function signTransaction(\n  wallet: Wallet,\n  tx: TxGenerated,\n  broadcastMode: string = 'BROADCAST_MODE_BLOCK',\n) {\n  const dataToSign = `0x${Buffer.from(\n    tx.signDirect.signBytes,\n    'base64',\n  ).toString('hex')}`\n\n  /* eslint-disable no-underscore-dangle */\n  const signatureRaw = wallet._signingKey().signDigest(dataToSign)\n  const splitedSignature = splitSignature(signatureRaw)\n  const signature = arrayify(concat([splitedSignature.r, splitedSignature.s]))\n\n  const signedTx = createTxRaw(\n    tx.signDirect.body.serializeBinary(),\n    tx.signDirect.authInfo.serializeBinary(),\n    [signature],\n  )\n  const body = `{ \"tx_bytes\": [${signedTx.message\n    .serializeBinary()\n    .toString()}], \"mode\": \"${broadcastMode}\" }`\n\n  return body\n}\n\n// Sign transaction using eip712 method (metamask style)\nexport async function singTransactionUsingEIP712(\n  wallet: Wallet,\n  sender: string,\n  tx: TxGenerated,\n  chain: Chain = LOCALNET_CHAIN,\n  broadcastMode: string = 'BROADCAST_MODE_BLOCK',\n) {\n  const dataToSign = arrayify(\n    TypedDataUtils.eip712Hash(tx.eipToSign as any, SignTypedDataVersion.V4),\n  )\n  /* eslint-disable no-underscore-dangle */\n  const signatureRaw = await wallet._signingKey().signDigest(dataToSign)\n  const signature = joinSignature(signatureRaw)\n\n  const extension = signatureToWeb3Extension(\n    chain,\n    { accountAddress: sender } as Sender,\n    signature,\n  )\n  const signedTx = createTxRawEIP712(\n    tx.legacyAmino.body,\n    tx.legacyAmino.authInfo,\n    extension,\n  )\n\n  return `{ \"tx_bytes\": [${signedTx.message\n    .serializeBinary()\n    .toString()}], \"mode\": \"${broadcastMode}\" }`\n}\n"],"names":["singTransactionUsingEIP712","wallet","sender","tx","chain","LOCALNET_CHAIN","broadcastMode","dataToSign","arrayify","TypedDataUtils","eip712Hash","eipToSign","SignTypedDataVersion","V4","_signingKey","signDigest","signatureRaw","signature","joinSignature","extension","signatureToWeb3Extension","accountAddress","createTxRawEIP712","legacyAmino","body","authInfo","message","serializeBinary","toString","e","Promise","reject","signTransaction","Buffer","from","signDirect","signBytes","splitSignature","concat","splitedSignature","r","s","createTxRaw","resolve","transactionBody","url","fetch","method","headers","post","json","getSender","ethToEvmos","address","evmosAddress","then","addrRequest","resp","_temp","_generatePubkey","sequence","_parseInt","accountNumber","_parseInt2","pubkey","parseInt","account","base_account","account_number","pub_key","key","generatePubkey","signMessage","signatureToPubkey","chainId","cosmosChainId","amount","denom","gas","MAINNET_CHAIN","MAINNET_FEE","TESTNET_CHAIN","TESTNET_FEE"],"mappings":"6cAqJsBA,MAAtBA,EAAA,SACEC,EACAC,EACAC,EACAC,EAAeC,EACfC,EAAwB,wBAL1B,IAOE,MAAMC,EAAaC,EACjBC,EAAeC,WAAWP,EAAGQ,UAAkBC,EAAqBC,KAHxB,OAMnBZ,QAAAA,QAAAA,EAAOa,cAAcC,WAAWR,kBAArDS,GACN,MAAMC,EAAYC,EAAcF,GAEjBG,EAAGC,EAChBhB,EACA,CAAEiB,eAAgBnB,GAClBe,GAQF,MAAO,kBANUK,EACfnB,EAAGoB,YAAYC,KACfrB,EAAGoB,YAAYE,SACfN,GAGgCO,QAC/BC,kBACAC,yBAAyBtB,SA3B9B,MAAAuB,GAAA,OAAAC,QAAAC,OAAAF,KA5BsBG,EACpB/B,SAAAA,EACAE,EACAG,EAAwB,wBAAsB,IAE9C,MAAMC,EAAkB,KAAA0B,OAAOC,KAC7B/B,EAAGgC,WAAWC,UACd,UACAR,SAAS,SAGLZ,EAAef,EAAOa,cAAcC,WAAWR,KAC5B8B,EAAerB,GACzBC,EAAGT,EAAS8B,EAAO,CAACC,EAAiBC,EAAGD,EAAiBE,KAO9DjB,EAAqB,kBALdkB,EACfvC,EAAGgC,WAAWX,KAAKG,kBACnBxB,EAAGgC,WAAWV,SAASE,kBACvB,CAACV,IAEqCS,QACrCC,kBACAC,yBAAyBtB,OAE5B,OAAAwB,QAAAa,QAAOnB,GAxBT,MAdAK,GAAA,OAAAC,QAAAC,OAAAF,OACEe,SAAAA,EACAC,EAAc,yBAFhB,IAIqBC,OAAAA,QAAAA,QAAAA,EAAS,GAAAD,0BAA6B,CACvDE,OAAQ,OACRvB,KAAMoB,EACNI,QAAS,CAAE,eAAgB,uBAHvBC,KAAAA,SAAAA,0BAKaA,EAAKC,UAT1B,MAAArB,GAAA,OAAAC,QAAAC,OAAAF,KArBsBsB,WACpBlD,EACA4C,EAAc,yBAFhB,IAIE,QAAqBO,EAAWnD,EAAOoD,SAFF,OAAAvB,QAAAa,QAGXG,EACrB,GAAAD,kCAAoCS,MAJJC,KAAA,SAG/BC,GAGcA,OAAAA,QAAAA,QAAAA,EAAYN,QAA1BO,KAAAA,SAAAA,GAEN,SAAAC,EAAAC,GAOA,MAPe,CACbtC,eAAgBiC,EAChBM,SAAQC,EACRC,cAAaC,EACbC,kBADeC,SAASR,EAAKS,QAAQC,aAAaC,eAAgB,IAX/BP,EAUzBI,SAASR,EAAKS,QAAQC,aAAaP,SAAoB,IAG/DH,EAAAA,EAAKS,QAAQC,aAAaE,SAASC,IAAcC,OAAAA,EAAAA,EAAAA,GAAAA,QAAAA,QAAAA,EAAetE,IAGrEsD,KAAAG,OAlBD,MAZA7B,GAAA,OAAAC,QAAAC,OAAAF,KAAA0C,EAAA,SAAqCtE,GAAc,IAAA,OAAA6B,QAAAa,QAEzB1C,EAAOuE,YAAY,oBAFMjB,KAAA,SAE3CtC,GACN,OAAwBwD,EACtBxD,EACAgB,OAAOC,KAAK,CACV,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IACrE,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,SAP1E,MAnDAL,GAAA,OAAAC,QAAAC,OAAAF,KAA2BxB,EAAG,CAC5BqE,QAAS,IACTC,cAAe,kBAGW,CAC1BC,OAAQ,KACRC,MAAO,SACPC,IAAK,UAGMC,EAAgB,CAC3BL,QAAS,KACTC,cAAe,gBAGJK,EAAc,CACzBJ,OAAQ,OACRC,MAAO,SACPC,IAAK,UAGmBG,EAAG,CAC3BP,QAAS,IACTC,cAAe,gBAGJO,EAAc,CACzBN,OAAQ,OACRC,MAAO,UACPC,IAAK"}