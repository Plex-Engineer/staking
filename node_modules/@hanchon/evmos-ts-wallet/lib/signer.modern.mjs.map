{"version":3,"file":"signer.modern.mjs","sources":["../src/signer.ts"],"sourcesContent":["import fetch from 'node-fetch'\nimport { TypedDataUtils, SignTypedDataVersion } from '@metamask/eth-sig-util'\nimport { Wallet } from '@ethersproject/wallet'\nimport {\n  arrayify,\n  concat,\n  splitSignature,\n  joinSignature,\n} from '@ethersproject/bytes'\nimport { createTxRaw } from '@tharsis/proto'\nimport {\n  createTxRawEIP712,\n  signatureToWeb3Extension,\n  Sender,\n  TxGenerated,\n  createMessageSend,\n  Chain,\n} from '@tharsis/transactions'\nimport { signatureToPubkey } from '@hanchon/signature-to-pubkey'\nimport { ethToEvmos } from '@tharsis/address-converter'\n\n// Chain helpers\n\nexport const LOCALNET_CHAIN = {\n  chainId: 9000,\n  cosmosChainId: 'evmos_9000-1',\n}\n\nexport const LOCALNET_FEE = {\n  amount: '20',\n  denom: 'aevmos',\n  gas: '200000',\n}\n\nexport const MAINNET_CHAIN = {\n  chainId: 9001,\n  cosmosChainId: 'evmos_9001-2',\n}\n\nexport const MAINNET_FEE = {\n  amount: '5000',\n  denom: 'aevmos',\n  gas: '600000',\n}\n\nexport const TESTNET_CHAIN = {\n  chainId: 9000,\n  cosmosChainId: 'evmos_9000-4',\n}\n\nexport const TESTNET_FEE = {\n  amount: '5000',\n  denom: 'atevmos',\n  gas: '600000',\n}\n\n// Get Account\n/* eslint-disable camelcase */\ninterface AccountResponse {\n  account: {\n    '@type': string\n    base_account: {\n      address: string\n      pub_key?: {\n        '@type': string\n        key: string\n      }\n      account_number: string\n      sequence: string\n    }\n    code_hash: string\n  }\n}\n\nexport async function generatePubkey(wallet: Wallet) {\n  // Sign the personal message `generate_pubkey` and generate the pubkey from that signature\n  const signature = await wallet.signMessage('generate_pubkey')\n  return signatureToPubkey(\n    signature,\n    Buffer.from([\n      50, 215, 18, 245, 169, 63, 252, 16, 225, 169, 71, 95, 254, 165, 146, 216,\n      40, 162, 115, 78, 147, 125, 80, 182, 25, 69, 136, 250, 65, 200, 94, 178,\n    ]),\n  )\n}\n\nexport async function getSender(\n  wallet: Wallet,\n  url: string = 'http://127.0.0.1:1317',\n) {\n  const evmosAddress = ethToEvmos(wallet.address)\n  const addrRequest = await fetch(\n    `${url}/cosmos/auth/v1beta1/accounts/${evmosAddress}`,\n  )\n  const resp = (await addrRequest.json()) as AccountResponse\n\n  const sender = {\n    accountAddress: evmosAddress,\n    sequence: parseInt(resp.account.base_account.sequence as string, 10),\n    accountNumber: parseInt(resp.account.base_account.account_number, 10),\n    pubkey:\n      resp.account.base_account.pub_key?.key || (await generatePubkey(wallet)),\n  }\n  return sender\n}\n\n// Broadcast a transaction in json.stringify format\nexport async function broadcast(\n  transactionBody: string,\n  url: string = 'http://127.0.0.1:1317',\n) {\n  const post = await fetch(`${url}/cosmos/tx/v1beta1/txs`, {\n    method: 'post',\n    body: transactionBody,\n    headers: { 'Content-Type': 'application/json' },\n  })\n  const data = await post.json()\n  return data\n}\n\n// Sign transaction using payload method (keplr style)\nexport async function signTransaction(\n  wallet: Wallet,\n  tx: TxGenerated,\n  broadcastMode: string = 'BROADCAST_MODE_BLOCK',\n) {\n  const dataToSign = `0x${Buffer.from(\n    tx.signDirect.signBytes,\n    'base64',\n  ).toString('hex')}`\n\n  /* eslint-disable no-underscore-dangle */\n  const signatureRaw = wallet._signingKey().signDigest(dataToSign)\n  const splitedSignature = splitSignature(signatureRaw)\n  const signature = arrayify(concat([splitedSignature.r, splitedSignature.s]))\n\n  const signedTx = createTxRaw(\n    tx.signDirect.body.serializeBinary(),\n    tx.signDirect.authInfo.serializeBinary(),\n    [signature],\n  )\n  const body = `{ \"tx_bytes\": [${signedTx.message\n    .serializeBinary()\n    .toString()}], \"mode\": \"${broadcastMode}\" }`\n\n  return body\n}\n\n// Sign transaction using eip712 method (metamask style)\nexport async function singTransactionUsingEIP712(\n  wallet: Wallet,\n  sender: string,\n  tx: TxGenerated,\n  chain: Chain = LOCALNET_CHAIN,\n  broadcastMode: string = 'BROADCAST_MODE_BLOCK',\n) {\n  const dataToSign = arrayify(\n    TypedDataUtils.eip712Hash(tx.eipToSign as any, SignTypedDataVersion.V4),\n  )\n  /* eslint-disable no-underscore-dangle */\n  const signatureRaw = await wallet._signingKey().signDigest(dataToSign)\n  const signature = joinSignature(signatureRaw)\n\n  const extension = signatureToWeb3Extension(\n    chain,\n    { accountAddress: sender } as Sender,\n    signature,\n  )\n  const signedTx = createTxRawEIP712(\n    tx.legacyAmino.body,\n    tx.legacyAmino.authInfo,\n    extension,\n  )\n\n  return `{ \"tx_bytes\": [${signedTx.message\n    .serializeBinary()\n    .toString()}], \"mode\": \"${broadcastMode}\" }`\n}\n"],"names":["LOCALNET_CHAIN","chainId","cosmosChainId","LOCALNET_FEE","amount","denom","gas","MAINNET_CHAIN","MAINNET_FEE","TESTNET_CHAIN","TESTNET_FEE","generatePubkey","wallet","signature","signMessage","Buffer","from","async","url","_resp$account$base_ac","ethToEvmos","address","fetch","evmosAddress","resp","addrRequest","json","accountAddress","sequence","parseInt","account","base_account","accountNumber","account_number","pubkey","key","pub_key","broadcast","transactionBody","post","method","body","headers","tx","broadcastMode","dataToSign","signDirect","signBytes","toString","signatureRaw","_signingKey","signDigest","splitedSignature","splitSignature","arrayify","concat","r","s","createTxRaw","serializeBinary","authInfo","message","singTransactionUsingEIP712","sender","chain","TypedDataUtils","eip712Hash","eipToSign","SignTypedDataVersion","V4","joinSignature","extension","signatureToWeb3Extension","createTxRawEIP712","legacyAmino"],"mappings":"6cAuBaA,MAAAA,EAAiB,CAC5BC,QAAS,IACTC,cAAe,gBAGQC,EAAG,CAC1BC,OAAQ,KACRC,MAAO,SACPC,IAAK,UAGMC,EAAgB,CAC3BN,QAAS,KACTC,cAAe,gBAGOM,EAAG,CACzBJ,OAAQ,OACRC,MAAO,SACPC,IAAK,UAGMG,EAAgB,CAC3BR,QAAS,IACTC,cAAe,gBAGJQ,EAAc,CACzBN,OAAQ,OACRC,MAAO,UACPC,IAAK,UAqBeK,eAAAA,EAAeC,GAEnC,MAAeC,QAAeD,EAACE,YAAY,mBAC3C,SACED,EACAE,OAAOC,KAAK,CACV,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IACrE,GAAI,IAAK,IAAK,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,OAKnEC,iBACLL,EACAM,EAAc,yBAEd,IAAAC,EAAA,QAAqBC,EAAWR,EAAOS,iBACRC,EAC1B,GAAAJ,kCAAoCK,KAE/BC,QAAUC,EAAYC,OAShC,MAPe,CACbC,eAAgBJ,EAChBK,SAAUC,SAASL,EAAKM,QAAQC,aAAaH,SAAoB,IACjEI,cAAeH,SAASL,EAAKM,QAAQC,aAAaE,eAAgB,IAClEC,QACqCC,OAAnCX,EAAAA,EAAKM,QAAQC,aAAaK,cAASD,EAAAA,EAAAA,cAA6BvB,IAMhDyB,eAAAA,EACpBC,EACApB,EAAc,yBAEd,MAAUqB,QAAcjB,EAAI,GAAAJ,0BAA6B,CACvDsB,OAAQ,OACRC,KAAMH,EACNI,QAAS,CAAE,eAAgB,sBAG7B,aADmBH,EAAKb,OAKnBT,iBACLL,EACA+B,EACAC,EAAwB,wBAExB,MAAMC,EAAkB,KAAA9B,OAAOC,KAC7B2B,EAAGG,WAAWC,UACd,UACAC,SAAS,SAGLC,EAAerC,EAAOsC,cAAcC,WAAWN,GAC/CO,EAAmBC,EAAeJ,KACtBK,EAASC,EAAO,CAACH,EAAiBI,EAAGJ,EAAiBK,KAWxE,MAJ+B,kBALdC,EACff,EAAGG,WAAWL,KAAKkB,kBACnBhB,EAAGG,WAAWc,SAASD,kBACvB,CAAC9C,IAEqCgD,QACrCF,kBACAX,yBAAyBJ,OAMRkB,eAAAA,EACpBlD,EACAmD,EACApB,EACAqB,EAAehE,EACf4C,EAAwB,wBAExB,MAAMC,EAAaS,EACjBW,EAAeC,WAAWvB,EAAGwB,UAAkBC,EAAqBC,KAGhEpB,UAA4BC,cAAcC,WAAWN,KACzCyB,EAAcrB,GAEjBsB,EAAGC,EAChBR,EACA,CAAErC,eAAgBoC,GAClBlD,GAQF,MAAO,kBANU4D,EACf9B,EAAG+B,YAAYjC,KACfE,EAAG+B,YAAYd,SACfW,GAGgCV,QAC/BF,kBACAX,yBAAyBJ"}