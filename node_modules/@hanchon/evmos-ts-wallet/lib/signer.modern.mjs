import t from"node-fetch";import{TypedDataUtils as e,SignTypedDataVersion as n}from"@metamask/eth-sig-util";import{splitSignature as s,arrayify as o,concat as a,joinSignature as i}from"@ethersproject/bytes";import{createTxRaw as r}from"@tharsis/proto";import{signatureToWeb3Extension as c,createTxRawEIP712 as m}from"@tharsis/transactions";import{signatureToPubkey as u}from"@hanchon/signature-to-pubkey";import{ethToEvmos as g}from"@tharsis/address-converter";const d={chainId:9e3,cosmosChainId:"evmos_9000-1"},y={amount:"20",denom:"aevmos",gas:"200000"},p={chainId:9001,cosmosChainId:"evmos_9001-2"},h={amount:"5000",denom:"aevmos",gas:"600000"},f={chainId:9e3,cosmosChainId:"evmos_9000-4"},b={amount:"5000",denom:"atevmos",gas:"600000"};async function _(t){const e=await t.signMessage("generate_pubkey");return u(e,Buffer.from([50,215,18,245,169,63,252,16,225,169,71,95,254,165,146,216,40,162,115,78,147,125,80,182,25,69,136,250,65,200,94,178]))}async function v(e,n="http://127.0.0.1:1317"){var s;const o=g(e.address),a=await t(`${n}/cosmos/auth/v1beta1/accounts/${o}`),i=await a.json();return{accountAddress:o,sequence:parseInt(i.account.base_account.sequence,10),accountNumber:parseInt(i.account.base_account.account_number,10),pubkey:(null==(s=i.account.base_account.pub_key)?void 0:s.key)||await _(e)}}async function B(e,n="http://127.0.0.1:1317"){const s=await t(`${n}/cosmos/tx/v1beta1/txs`,{method:"post",body:e,headers:{"Content-Type":"application/json"}});return await s.json()}async function l(t,e,n="BROADCAST_MODE_BLOCK"){const i=`0x${Buffer.from(e.signDirect.signBytes,"base64").toString("hex")}`,c=t._signingKey().signDigest(i),m=s(c),u=o(a([m.r,m.s]));return`{ "tx_bytes": [${r(e.signDirect.body.serializeBinary(),e.signDirect.authInfo.serializeBinary(),[u]).message.serializeBinary().toString()}], "mode": "${n}" }`}async function I(t,s,a,r=d,u="BROADCAST_MODE_BLOCK"){const g=o(e.eip712Hash(a.eipToSign,n.V4)),y=await t._signingKey().signDigest(g),p=i(y),h=c(r,{accountAddress:s},p);return`{ "tx_bytes": [${m(a.legacyAmino.body,a.legacyAmino.authInfo,h).message.serializeBinary().toString()}], "mode": "${u}" }`}export{d as LOCALNET_CHAIN,y as LOCALNET_FEE,p as MAINNET_CHAIN,h as MAINNET_FEE,f as TESTNET_CHAIN,b as TESTNET_FEE,B as broadcast,_ as generatePubkey,v as getSender,l as signTransaction,I as singTransactionUsingEIP712};
//# sourceMappingURL=signer.modern.mjs.map
